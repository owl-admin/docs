"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["9919"],{2239:function(n,e,r){r.r(e),r.d(e,{default:function(){return a}});var t=r(2676),i=r(453);function l(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",pre:"pre",code:"code"},(0,i.ah)(),n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h1,{id:"重写-service",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#重写-service",children:"#"}),"重写 Service"]}),"\n",(0,t.jsxs)(e.h2,{id:"主要逻辑方法",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#主要逻辑方法",children:"#"}),"主要逻辑方法"]}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"方法"}),(0,t.jsx)(e.th,{align:"left",children:"说明"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"store"})}),(0,t.jsx)(e.td,{align:"left",children:"新增数据"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"update"})}),(0,t.jsx)(e.td,{align:"left",children:"修改数据"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"delete"})}),(0,t.jsx)(e.td,{align:"left",children:"删除数据"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"list"})}),(0,t.jsx)(e.td,{align:"left",children:"查询数据"})]})]})]}),"\n",(0,t.jsxs)(e.h2,{id:"经常需要重写的方法",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#经常需要重写的方法",children:"#"}),"经常需要重写的方法"]}),"\n",(0,t.jsxs)(e.table,{children:[(0,t.jsx)(e.thead,{children:(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.th,{align:"left",children:"方法"}),(0,t.jsx)(e.th,{align:"left",children:"说明"})]})}),(0,t.jsxs)(e.tbody,{children:[(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"addRelations"})}),(0,t.jsx)(e.td,{align:"left",children:"添加关联关系"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"sortable"})}),(0,t.jsx)(e.td,{align:"left",children:"排序 (注意: 原方法中带有部分逻辑, 重写需要留意)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"searchable"})}),(0,t.jsx)(e.td,{align:"left",children:"搜索  (注意: 原方法中带有部分逻辑, 重写需要留意)"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"sortColumn"})}),(0,t.jsx)(e.td,{align:"left",children:"排序字段"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"saving"})}),(0,t.jsx)(e.td,{align:"left",children:"保存前"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"saved"})}),(0,t.jsx)(e.td,{align:"left",children:"保存后"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"deleted"})}),(0,t.jsx)(e.td,{align:"left",children:"删除后"})]}),(0,t.jsxs)(e.tr,{children:[(0,t.jsx)(e.td,{align:"left",children:(0,t.jsx)(e.strong,{children:"formatRows"})}),(0,t.jsx)(e.td,{align:"left",children:"列表数据格式化"})]})]})]}),"\n",(0,t.jsxs)(e.h2,{id:"方法列表",children:[(0,t.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#方法列表",children:"#"}),"方法列表"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-php",meta:"",children:"\n/**\n * service 中查询使用的模型\n */\npublic function getModel(){}\n\n/**\n * 获取主键名称\n */\npublic function primaryKey(){}\n\n/**\n * 详情 获取数据\n *\n * @param $id\n *\n * @return Builder|Builder[]|\\Illuminate\\Database\\Eloquent\\Collection|Model|null\n */\npublic function getDetail($id){}\n\n/**\n * 编辑 获取数据\n *\n * @param $id\n *\n * @return Model|\\Illuminate\\Database\\Eloquent\\Collection|Builder|array|null\n */\npublic function getEditData($id){}\n\n/**\n * 列表 获取查询\n *\n * @return Builder\n */\npublic function listQuery(){}\n\n/**\n * 添加关联关系\n *\n * 预留钩子, 方便处理只需要添加 [关联] 的情况\n *\n * @param        $query\n * @param string $scene 场景: list, detail, edit\n *\n * @return void\n */\npublic function addRelations($query, string $scene = 'list'){}\n\n/**\n * 排序\n *\n * @param $query\n *\n * @return void\n */\npublic function sortable($query){}\n\n/**\n * 搜索\n *\n * @param $query\n *\n * @return void\n */\npublic function searchable($query){}\n\n/**\n * 列表 排序字段\n *\n * @return string\n */\npublic function sortColumn(){}\n\n/**\n * 修改\n *\n * @param $primaryKey\n * @param $data\n *\n * @return bool\n */\npublic function update($primaryKey, $data){}\n\n/**\n * 新增\n *\n * @param $data\n *\n * @return bool\n */\npublic function store($data){}\n\n/**\n * 删除\n *\n * @param string $ids\n *\n * @return mixed\n */\npublic function delete(string $ids){}\n\n/**\n * 快速编辑\n *\n * @param $data\n *\n * @return true\n */\npublic function quickEdit($data){}\n\n/**\n * 快速编辑单条\n *\n * @param $data\n *\n * @return bool\n */\npublic function quickEditItem($data){}\n\n/**\n * saving 钩子 (执行于新增/修改前)\n *\n * 可以通过判断 $primaryKey 是否存在来判断是新增还是修改\n *\n * @param $data\n * @param $primaryKey\n *\n * @return void\n */\npublic function saving($data, $primaryKey = ''){}\n\n/**\n * saved 钩子 (执行于新增/修改后)\n *\n * 可以通过 $isEdit 来判断是新增还是修改\n *\n * @param $model\n * @param $isEdit\n *\n * @return void\n */\npublic function saved($model, $isEdit = false){}\n\n/**\n * deleted 钩子 (执行于删除后)\n *\n * @param $ids\n *\n * @return void\n */\npublic function deleted($ids){}\n\n/**\n * 列表数据格式化\n *\n * @param array $rows\n *\n * @return array\n */\npublic function formatRows($rows){}\n"})})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}let a=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["guide%2Fcrud%2Fservice-rewrite.md"]={toc:[{id:"主要逻辑方法",text:"主要逻辑方法",depth:2},{id:"经常需要重写的方法",text:"经常需要重写的方法",depth:2},{id:"方法列表",text:"方法列表",depth:2}],title:"重写 Service",frontmatter:{}}}}]);