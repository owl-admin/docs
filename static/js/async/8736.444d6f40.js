"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["8736"],{7698:function(n,e,a){a.r(e),a.d(e,{default:function(){return l}});var r=a(2676),i=a(453),s=a(8831);function t(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",code:"code",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",h4:"h4",ol:"ol",li:"li"},(0,i.ah)(),n.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.h1,{id:"新增功能详解",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#新增功能详解",children:"#"}),"新增功能详解"]}),"\n",(0,r.jsxs)(e.h2,{id:"新增流程概览",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#新增流程概览",children:"#"}),"新增流程概览"]}),"\n",(0,r.jsx)(e.p,{children:"新增功能的完整流程包括表单构建、数据验证、保存处理和响应返回："}),"\n",(0,r.jsx)(s.Z,Object.assign({code:"sequenceDiagram\n    participant U as 用户\n    participant F as 前端 Amis\n    participant C as AdminController\n    participant S as AdminService\n    participant M as Model\n    participant D as 数据库\n\n    U->>F: 点击新增按钮\n    F->>C: GET /resource/create\n    C->>C: form(false) 构建表单\n    C->>F: 返回表单结构\n    F->>U: 渲染新增表单\n\n    U->>F: 填写并提交表单\n    F->>C: POST /resource (表单数据)\n    C->>S: store($data)\n    S->>S: saving($data) 钩子\n    S->>M: 创建模型实例\n    M->>D: 保存到数据库\n    S->>S: saved($model) 钩子\n    S->>C: 返回操作结果\n    C->>F: JSON 响应\n    F->>U: 显示操作结果"},{config:{}})),"\n",(0,r.jsxs)(e.h2,{id:"表单构建详解",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表单构建详解",children:"#"}),"表单构建详解"]}),"\n",(0,r.jsxs)(e.h3,{id:"form-方法实现",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#form-方法实现",children:"#"}),"form 方法实现"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.code,{children:"form"})," 方法是构建新增和编辑表单的核心方法："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 构建表单结构\n *\n * @param bool $isEdit 是否为编辑模式\n * @return \\Slowlyo\\OwlAdmin\\Renderers\\Form\n */\npublic function form($isEdit = false)\n{\n    return $this->baseForm($isEdit)->body([\n        // 基础信息分组\n        amis()->GroupControl()->label('基础信息')->body([\n            amis()->TextControl('title', '标题')\n                ->required()\n                ->maxLength(100)\n                ->placeholder('请输入标题'),\n\n            amis()->SelectControl('category_id', '分类')\n                ->required()\n                ->source('/api/categories')\n                ->placeholder('请选择分类'),\n        ]),\n\n        // 详细信息分组\n        amis()->GroupControl()->label('详细信息')->body([\n            amis()->NumberControl('price', '价格')\n                ->min(0)\n                ->precision(2)\n                ->placeholder('请输入价格'),\n\n            amis()->SwitchControl('status', '状态')\n                ->value(1)\n                ->onText('启用')\n                ->offText('禁用'),\n\n            amis()->TextareaControl('description', '描述')\n                ->maxRows(4)\n                ->placeholder('请输入描述信息'),\n        ]),\n\n        // 高级配置分组\n        amis()->GroupControl()->label('高级配置')->body([\n            amis()->DateTimeControl('publish_at', '发布时间')\n                ->format('YYYY-MM-DD HH:mm:ss'),\n\n            amis()->TagControl('tags', '标签')\n                ->placeholder('请输入标签，回车确认'),\n        ]),\n    ]);\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"表单模式对比",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表单模式对比",children:"#"}),"表单模式对比"]}),"\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{align:"left",children:"模式"}),(0,r.jsx)(e.th,{align:"left",children:"触发方式"}),(0,r.jsx)(e.th,{align:"left",children:"表单容器"}),(0,r.jsx)(e.th,{align:"left",children:"API 设置"}),(0,r.jsx)(e.th,{align:"left",children:"特点"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.strong,{children:"页面模式"})}),(0,r.jsxs)(e.td,{align:"left",children:["访问 ",(0,r.jsx)(e.code,{children:"/resource/create"})]}),(0,r.jsx)(e.td,{align:"left",children:"Card 组件"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.code,{children:"form().api(getStorePath())"})}),(0,r.jsx)(e.td,{align:"left",children:"独立页面，适合复杂表单"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.strong,{children:"弹窗模式"})}),(0,r.jsx)(e.td,{align:"left",children:"点击新增按钮"}),(0,r.jsx)(e.td,{align:"left",children:"Dialog 组件"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.code,{children:"form().api(getStorePath())"})}),(0,r.jsx)(e.td,{align:"left",children:"浮层显示，适合简单表单"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.strong,{children:"抽屉模式"})}),(0,r.jsx)(e.td,{align:"left",children:"点击新增按钮"}),(0,r.jsx)(e.td,{align:"left",children:"Drawer 组件"}),(0,r.jsx)(e.td,{align:"left",children:(0,r.jsx)(e.code,{children:"form().api(getStorePath())"})}),(0,r.jsx)(e.td,{align:"left",children:"侧边滑出，适合中等复杂度表单"})]})]})]}),"\n",(0,r.jsxs)(e.h3,{id:"表单组件类型",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表单组件类型",children:"#"}),"表单组件类型"]}),"\n",(0,r.jsx)(e.p,{children:"框架提供了丰富的表单组件："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"// 文本输入\namis()->TextControl('name', '姓名')->required(),\n\n// 数字输入\namis()->NumberControl('age', '年龄')->min(0)->max(120),\n\n// 选择器\namis()->SelectControl('gender', '性别')\n    ->options([\n        ['label' => '男', 'value' => 1],\n        ['label' => '女', 'value' => 2],\n    ]),\n\n// 日期时间\namis()->DateTimeControl('birthday', '生日')\n    ->format('YYYY-MM-DD'),\n\n// 文件上传\namis()->FileControl('avatar', '头像')\n    ->accept('image/*')\n    ->maxSize(2 * 1024 * 1024), // 2MB\n\n// 富文本编辑器\namis()->RichTextControl('content', '内容')\n    ->vendor('tinymce'),\n\n// 开关\namis()->SwitchControl('is_active', '是否激活')->value(1),\n\n// 多选框\namis()->CheckboxesControl('permissions', '权限')\n    ->source('/api/permissions'),\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"表单验证",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表单验证",children:"#"}),"表单验证"]}),"\n",(0,r.jsxs)(e.h4,{id:"前端验证",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前端验证",children:"#"}),"前端验证"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"amis()->TextControl('email', '邮箱')\n    ->required()\n    ->validations([\n        'isEmail' => true,\n        'maxLength' => 50,\n    ])\n    ->validationErrors([\n        'isEmail' => '请输入有效的邮箱地址',\n        'maxLength' => '邮箱长度不能超过50个字符',\n    ]),\n\namis()->NumberControl('price', '价格')\n    ->required()\n    ->min(0)\n    ->validations([\n        'minimum' => 0,\n        'maximum' => 999999.99,\n    ]),\n"})}),"\n",(0,r.jsxs)(e.h4,{id:"后端验证",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#后端验证",children:"#"}),"后端验证"]}),"\n",(0,r.jsxs)(e.p,{children:["在 Service 的 ",(0,r.jsx)(e.code,{children:"saving"})," 钩子中进行验证："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"public function saving(&$data, $primaryKey = '')\n{\n    // 验证必填字段\n    if (empty($data['title'])) {\n        admin_abort('标题不能为空');\n    }\n\n    // 验证唯一性\n    if ($this->query()\n        ->where('title', $data['title'])\n        ->when($primaryKey, fn($q) => $q->where('id', '!=', $primaryKey))\n        ->exists()) {\n        admin_abort('标题已存在');\n    }\n\n    // 验证数据格式\n    if (isset($data['email']) && !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {\n        admin_abort('邮箱格式不正确');\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"数据保存处理",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数据保存处理",children:"#"}),"数据保存处理"]}),"\n",(0,r.jsxs)(e.h3,{id:"store-方法流程",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#store-方法流程",children:"#"}),"store 方法流程"]}),"\n",(0,r.jsxs)(e.p,{children:["控制器的 ",(0,r.jsx)(e.code,{children:"store"})," 方法处理新增请求："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 新增保存\n *\n * @param Request $request\n * @return JsonResponse|JsonResource\n */\npublic function store(Request $request)\n{\n    $response = fn($result) => $this->autoResponse($result, admin_trans('admin.save'));\n\n    // 处理快速编辑（表格内编辑）\n    if ($this->actionOfQuickEdit()) {\n        return $response($this->service->quickEdit($request->all()));\n    }\n\n    // 处理快速编辑单项\n    if ($this->actionOfQuickEditItem()) {\n        return $response($this->service->quickEditItem($request->all()));\n    }\n\n    // 标准新增处理\n    return $response($this->service->store($request->all()));\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"service-层处理",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#service-层处理",children:"#"}),"Service 层处理"]}),"\n",(0,r.jsxs)(e.p,{children:["AdminService 的 ",(0,r.jsx)(e.code,{children:"store"})," 方法实现："]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 新增数据\n *\n * @param array $data 表单数据\n * @return bool\n */\npublic function store($data): bool\n{\n    DB::beginTransaction();\n    try {\n        // 保存前钩子\n        $this->saving($data);\n\n        $model = $this->getModel();\n\n        // 只保存数据表中存在的字段\n        foreach ($data as $k => $v) {\n            if (!$this->hasColumn($k)) {\n                continue;\n            }\n            $model->setAttribute($k, $v);\n        }\n\n        $result = $model->save();\n\n        if ($result) {\n            // 保存后钩子\n            $this->saved($model, false);\n        }\n\n        DB::commit();\n        return $result;\n    } catch (\\Throwable $e) {\n        DB::rollBack();\n        admin_abort($e->getMessage());\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"钩子函数详解",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#钩子函数详解",children:"#"}),"钩子函数详解"]}),"\n",(0,r.jsxs)(e.h4,{id:"saving-钩子保存前",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#saving-钩子保存前",children:"#"}),"saving 钩子（保存前）"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 保存前处理\n *\n * @param array $data 表单数据\n * @param string $primaryKey 主键值（编辑时有值）\n */\npublic function saving(&$data, $primaryKey = '')\n{\n    // 数据预处理\n    if (isset($data['price'])) {\n        $data['price'] = round($data['price'], 2);\n    }\n\n    // 自动设置创建者\n    if (!$primaryKey) {\n        $data['created_by'] = admin_user()->id;\n    }\n\n    // 处理上传文件\n    if (isset($data['avatar']) && is_string($data['avatar'])) {\n        $data['avatar'] = $this->processUploadedFile($data['avatar']);\n    }\n\n    // 数据验证\n    $this->validateData($data, $primaryKey);\n}\n\n/**\n * 数据验证\n */\nprivate function validateData($data, $primaryKey = '')\n{\n    $rules = [\n        'title' => 'required|max:100',\n        'email' => 'required|email|unique:users,email,' . $primaryKey,\n        'price' => 'numeric|min:0',\n    ];\n\n    $validator = validator($data, $rules);\n\n    if ($validator->fails()) {\n        admin_abort($validator->errors()->first());\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.h4,{id:"saved-钩子保存后",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#saved-钩子保存后",children:"#"}),"saved 钩子（保存后）"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 保存后处理\n *\n * @param Model $model 模型实例\n * @param bool $isEdit 是否为编辑\n */\npublic function saved($model, $isEdit = false)\n{\n    // 清除相关缓存\n    cache()->forget(\"category_{$model->category_id}\");\n\n    // 处理关联数据\n    if (isset($this->request['tags'])) {\n        $model->tags()->sync($this->request['tags']);\n    }\n\n    // 发送通知\n    if (!$isEdit) {\n        event(new ModelCreated($model));\n    }\n\n    // 记录操作日志\n    admin_log($isEdit ? '更新记录' : '创建记录', [\n        'model' => get_class($model),\n        'id' => $model->getKey(),\n        'data' => $model->toArray(),\n    ]);\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"实际应用案例",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#实际应用案例",children:"#"}),"实际应用案例"]}),"\n",(0,r.jsxs)(e.h3,{id:"完整的用户管理新增功能",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#完整的用户管理新增功能",children:"#"}),"完整的用户管理新增功能"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Controllers;\n\nuse App\\Admin\\Services\\UserService;\nuse Slowlyo\\OwlAdmin\\Controllers\\AdminController;\n\nclass UserController extends AdminController\n{\n    protected string $serviceName = UserService::class;\n\n    public function form($isEdit = false)\n    {\n        return $this->baseForm()->body([\n            // 基础信息\n            amis()->GroupControl()->label('基础信息')->body([\n                amis()->TextControl('username', '用户名')\n                    ->required()\n                    ->minLength(3)\n                    ->maxLength(20)\n                    ->validations(['isAlphanumeric' => true])\n                    ->placeholder('3-20位字母数字组合'),\n\n                amis()->TextControl('email', '邮箱')\n                    ->required()\n                    ->validations(['isEmail' => true])\n                    ->placeholder('请输入邮箱地址'),\n\n                amis()->TextControl('phone', '手机号')\n                    ->validations(['isPhoneNumber' => true])\n                    ->placeholder('请输入手机号'),\n            ]),\n\n            // 密码设置（仅新增时显示）\n            amis()->GroupControl()\n                ->label('密码设置')\n                ->visibleOn('!this.id')\n                ->body([\n                    amis()->PasswordControl('password', '密码')\n                        ->required()\n                        ->minLength(6)\n                        ->placeholder('请输入密码'),\n\n                    amis()->PasswordControl('password_confirmation', '确认密码')\n                        ->required()\n                        ->validations(['equalsField' => 'password'])\n                        ->placeholder('请再次输入密码'),\n                ]),\n\n            // 个人信息\n            amis()->GroupControl()->label('个人信息')->body([\n                amis()->TextControl('real_name', '真实姓名')\n                    ->placeholder('请输入真实姓名'),\n\n                amis()->SelectControl('gender', '性别')\n                    ->options([\n                        ['label' => '男', 'value' => 1],\n                        ['label' => '女', 'value' => 2],\n                    ])\n                    ->placeholder('请选择性别'),\n\n                amis()->DateControl('birthday', '生日')\n                    ->format('YYYY-MM-DD')\n                    ->placeholder('请选择生日'),\n\n                amis()->FileControl('avatar', '头像')\n                    ->accept('image/*')\n                    ->maxSize(2 * 1024 * 1024)\n                    ->crop(['aspectRatio' => 1])\n                    ->placeholder('点击上传头像'),\n            ]),\n\n            // 权限设置\n            amis()->GroupControl()->label('权限设置')->body([\n                amis()->CheckboxesControl('roles', '角色')\n                    ->source('/api/roles')\n                    ->placeholder('请选择角色'),\n\n                amis()->SwitchControl('is_active', '是否激活')\n                    ->value(1)\n                    ->onText('激活')\n                    ->offText('禁用'),\n            ]),\n        ]);\n    }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"对应的 Service 实现："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Services;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Slowlyo\\OwlAdmin\\Services\\AdminService;\n\nclass UserService extends AdminService\n{\n    protected string $modelName = User::class;\n\n    public function saving(&$data, $primaryKey = '')\n    {\n        // 密码处理\n        if (isset($data['password']) && $data['password']) {\n            $data['password'] = Hash::make($data['password']);\n        } else {\n            unset($data['password']);\n        }\n\n        // 移除确认密码字段\n        unset($data['password_confirmation']);\n\n        // 验证用户名唯一性\n        if (isset($data['username'])) {\n            $exists = $this->query()\n                ->where('username', $data['username'])\n                ->when($primaryKey, fn($q) => $q->where('id', '!=', $primaryKey))\n                ->exists();\n\n            if ($exists) {\n                admin_abort('用户名已存在');\n            }\n        }\n\n        // 验证邮箱唯一性\n        if (isset($data['email'])) {\n            $exists = $this->query()\n                ->where('email', $data['email'])\n                ->when($primaryKey, fn($q) => $q->where('id', '!=', $primaryKey))\n                ->exists();\n\n            if ($exists) {\n                admin_abort('邮箱已存在');\n            }\n        }\n    }\n\n    public function saved($model, $isEdit = false)\n    {\n        // 同步角色\n        if (isset($this->request['roles'])) {\n            $model->roles()->sync($this->request['roles']);\n        }\n\n        // 清除用户相关缓存\n        cache()->forget(\"user_permissions_{$model->id}\");\n\n        // 发送欢迎邮件（仅新用户）\n        if (!$isEdit && $model->email) {\n            // dispatch(new SendWelcomeEmail($model));\n        }\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.h2,{id:"错误处理",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#错误处理",children:"#"}),"错误处理"]}),"\n",(0,r.jsxs)(e.h3,{id:"常见错误类型",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#常见错误类型",children:"#"}),"常见错误类型"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"验证错误"}),"：数据格式不正确、必填字段为空等"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"业务错误"}),"：违反业务规则、权限不足等"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"系统错误"}),"：数据库连接失败、文件上传失败等"]}),"\n"]}),"\n",(0,r.jsxs)(e.h3,{id:"错误处理机制",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#错误处理机制",children:"#"}),"错误处理机制"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"public function store($data): bool\n{\n    DB::beginTransaction();\n    try {\n        $this->saving($data);\n\n        $model = $this->getModel();\n        foreach ($data as $k => $v) {\n            if ($this->hasColumn($k)) {\n                $model->setAttribute($k, $v);\n            }\n        }\n\n        $result = $model->save();\n\n        if ($result) {\n            $this->saved($model, false);\n        }\n\n        DB::commit();\n        return $result;\n\n    } catch (\\Illuminate\\Validation\\ValidationException $e) {\n        DB::rollBack();\n        admin_abort($e->validator->errors()->first());\n\n    } catch (\\Exception $e) {\n        DB::rollBack();\n        admin_log_error('用户创建失败', [\n            'error' => $e->getMessage(),\n            'data' => $data,\n        ]);\n        admin_abort('创建失败，请稍后重试');\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"前端错误显示",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#前端错误显示",children:"#"}),"前端错误显示"]}),"\n",(0,r.jsx)(e.p,{children:"框架会自动处理错误响应并在前端显示："}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-json",meta:"",children:'{\n    "status": 0,\n    "msg": "用户名已存在",\n    "data": null\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:"前端会自动显示错误提示，无需额外处理。"}),"\n",(0,r.jsxs)(e.h2,{id:"性能优化",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#性能优化",children:"#"}),"性能优化"]}),"\n",(0,r.jsxs)(e.h3,{id:"1-数据库优化",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-数据库优化",children:"#"}),"1. 数据库优化"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"// 批量插入\npublic function batchStore($dataList): bool\n{\n    DB::beginTransaction();\n    try {\n        foreach ($dataList as $data) {\n            $this->saving($data);\n        }\n\n        $this->getModel()::insert($dataList);\n\n        DB::commit();\n        return true;\n    } catch (\\Exception $e) {\n        DB::rollBack();\n        throw $e;\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"2-文件上传优化",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-文件上传优化",children:"#"}),"2. 文件上传优化"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"// 异步处理大文件\npublic function saving(&$data, $primaryKey = '')\n{\n    if (isset($data['large_file'])) {\n        // 先保存文件路径，后台异步处理\n        $data['file_status'] = 'processing';\n        dispatch(new ProcessLargeFile($data['large_file']));\n    }\n}\n"})}),"\n",(0,r.jsxs)(e.h3,{id:"3-缓存策略",children:[(0,r.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-缓存策略",children:"#"}),"3. 缓存策略"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-php",meta:"",children:"public function saved($model, $isEdit = false)\n{\n    // 更新相关缓存\n    cache()->put(\"user_{$model->id}\", $model, 3600);\n\n    // 清除列表缓存\n    cache()->forget('user_list');\n}\n"})})]})}function d(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,i.ah)(),n.components);return e?(0,r.jsx)(e,Object.assign({},n,{children:(0,r.jsx)(t,n)})):t(n)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["guide%2Fcrud%2Fcreate.md"]={toc:[{id:"新增流程概览",text:"新增流程概览",depth:2},{id:"表单构建详解",text:"表单构建详解",depth:2},{id:"form-方法实现",text:"form 方法实现",depth:3},{id:"表单模式对比",text:"表单模式对比",depth:3},{id:"表单组件类型",text:"表单组件类型",depth:3},{id:"表单验证",text:"表单验证",depth:3},{id:"前端验证",text:"前端验证",depth:4},{id:"后端验证",text:"后端验证",depth:4},{id:"数据保存处理",text:"数据保存处理",depth:2},{id:"store-方法流程",text:"store 方法流程",depth:3},{id:"service-层处理",text:"Service 层处理",depth:3},{id:"钩子函数详解",text:"钩子函数详解",depth:3},{id:"saving-钩子保存前",text:"saving 钩子（保存前）",depth:4},{id:"saved-钩子保存后",text:"saved 钩子（保存后）",depth:4},{id:"实际应用案例",text:"实际应用案例",depth:2},{id:"完整的用户管理新增功能",text:"完整的用户管理新增功能",depth:3},{id:"错误处理",text:"错误处理",depth:2},{id:"常见错误类型",text:"常见错误类型",depth:3},{id:"错误处理机制",text:"错误处理机制",depth:3},{id:"前端错误显示",text:"前端错误显示",depth:3},{id:"性能优化",text:"性能优化",depth:2},{id:"1-数据库优化",text:"1. 数据库优化",depth:3},{id:"2-文件上传优化",text:"2. 文件上传优化",depth:3},{id:"3-缓存策略",text:"3. 缓存策略",depth:3}],title:"新增功能详解",frontmatter:{}}}}]);