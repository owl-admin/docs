"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["4525"],{8136:function(e,n,r){r.r(n),r.d(n,{default:function(){return a}});var s=r(2676),i=r(453);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h3:"h3",ol:"ol",pre:"pre",h4:"h4"},(0,i.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"动态-api",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态-api",children:"#"}),"动态 API"]}),"\n",(0,s.jsx)(n.p,{children:"动态 API 是 Owl Admin 提供的零代码接口解决方案，通过可视化配置快速创建和管理 API 接口，无需编写控制器代码即可实现常见的数据操作功能。"}),"\n",(0,s.jsxs)(n.h2,{id:"核心特性",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心特性",children:"#"}),"核心特性"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"零代码开发"}),"：通过可视化界面配置 API，无需编写代码"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"模板化设计"}),"：基于预定义模板快速创建标准化接口"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"动态路由"}),"：自动注册路由到 ",(0,s.jsx)(n.code,{children:"routes/admin.php"})," 文件"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"参数化配置"}),"：支持灵活的参数配置和验证"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"扩展性强"}),"：支持自定义 API 模板"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"使用场景",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用场景",children:"#"}),"使用场景"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"选项数据接口"}),"：为 ",(0,s.jsx)(n.code,{children:"select"}),"、",(0,s.jsx)(n.code,{children:"radios"}),"、",(0,s.jsx)(n.code,{children:"checkboxes"})," 等组件提供动态选项"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"简单 CRUD 操作"}),"：快速实现数据的增删改查功能"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"配置数据管理"}),"：系统设置的读取和保存"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"数据列表查询"}),"：带分页、筛选的数据列表接口"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"原型开发"}),"：快速搭建接口原型进行功能验证"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"路由规则",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路由规则",children:"#"}),"路由规则"]}),"\n",(0,s.jsxs)(n.p,{children:["动态 API 创建后会自动注册路由（保存/删除后都会刷新 ",(0,s.jsx)(n.code,{children:"routes/admin.php"}),"）："]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"默认前缀"}),"：",(0,s.jsx)(n.code,{children:"admin.route.prefix"}),"，默认为 ",(0,s.jsx)(n.code,{children:"admin-api"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"管理后台访问"}),"：",(0,s.jsx)(n.code,{children:"/{prefix}/{路径}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"模块化访问"}),"：",(0,s.jsx)(n.code,{children:"/{模块}-api/{路径}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"可视化编辑器"}),"：在内置前端中可直接使用配置的 ",(0,s.jsx)(n.code,{children:"path"}),"（前端会自动拼接前缀）；第三方调用需带上前缀"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"内置-api-模板",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#内置-api-模板",children:"#"}),"内置 API 模板"]}),"\n",(0,s.jsx)(n.p,{children:"系统提供了多个开箱即用的 API 模板："}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"模板名称"}),(0,s.jsx)(n.th,{children:"请求方法"}),(0,s.jsx)(n.th,{children:"功能描述"}),(0,s.jsx)(n.th,{children:"适用场景"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"OptionsApi"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"获取选项列表"}),(0,s.jsx)(n.td,{children:"下拉框、单选框等组件的数据源"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DataListApi"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"获取数据列表"}),(0,s.jsx)(n.td,{children:"表格数据展示，支持分页和筛选"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DataCreateApi"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"创建数据记录"}),(0,s.jsx)(n.td,{children:"表单提交创建新记录"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DataUpdateApi"})}),(0,s.jsx)(n.td,{children:"PUT"}),(0,s.jsx)(n.td,{children:"更新数据记录"}),(0,s.jsx)(n.td,{children:"表单提交更新现有记录"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DataDeleteApi"})}),(0,s.jsx)(n.td,{children:"DELETE"}),(0,s.jsx)(n.td,{children:"删除数据记录"}),(0,s.jsx)(n.td,{children:"批量或单个删除操作"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DataDetailApi"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"获取数据详情"}),(0,s.jsx)(n.td,{children:"查看单条记录详细信息"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"GetSettingsApi"})}),(0,s.jsx)(n.td,{children:"GET"}),(0,s.jsx)(n.td,{children:"获取系统设置"}),(0,s.jsx)(n.td,{children:"读取配置项数据"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"SaveSettingsApi"})}),(0,s.jsx)(n.td,{children:"POST"}),(0,s.jsx)(n.td,{children:"保存系统设置"}),(0,s.jsx)(n.td,{children:"批量保存配置项"})]})]})]}),"\n",(0,s.jsxs)(n.h2,{id:"创建自定义-api-模板",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建自定义-api-模板",children:"#"}),"创建自定义 API 模板"]}),"\n",(0,s.jsxs)(n.h3,{id:"方式一社区模板",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方式一社区模板",children:"#"}),"方式一：社区模板"]}),"\n",(0,s.jsxs)(n.p,{children:["访问 ",(0,s.jsx)(n.a,{href:"https://github.com/slowlyo/owl-admin/discussions/categories/%E5%8A%A8%E6%80%81-api-%E6%A8%A1%E6%9D%BF",rel:"noopener noreferrer",target:"_blank",children:"GitHub Discussions"})," 获取社区分享的 API 模板。"]}),"\n",(0,s.jsxs)(n.h3,{id:"方式二手动创建",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方式二手动创建",children:"#"}),"方式二：手动创建"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["在 ",(0,s.jsx)(n.code,{children:"app/ApiTemplates"})," 目录下创建新的 PHP 类"]}),"\n",(0,s.jsxs)(n.li,{children:["继承 ",(0,s.jsx)(n.code,{children:"Slowlyo\\OwlAdmin\\Support\\Apis\\AdminBaseApi"})," 基类"]}),"\n",(0,s.jsxs)(n.li,{children:["实现 ",(0,s.jsx)(n.code,{children:"AdminApiInterface"})," 接口的必需方法"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"基础结构",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础结构",children:"#"}),"基础结构"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\ApiTemplates;\n\nuse Slowlyo\\OwlAdmin\\Support\\Apis\\AdminBaseApi;\n\nclass CustomApi extends AdminBaseApi\n{\n    /** @var string HTTP 请求方法 */\n    public string $method = 'get';\n\n    /** @var string API 模板名称 */\n    public string $title = '自定义接口';\n\n    /**\n     * 获取模板名称（可选，优先级高于 $title 属性）\n     */\n    public function getTitle(): string\n    {\n        return '自定义接口模板';\n    }\n\n    /**\n     * 接口处理逻辑（必须实现）\n     *\n     * @return mixed\n     */\n    public function handle()\n    {\n        // 获取配置参数\n        $model = $this->getArgs('model');\n        $fields = $this->getArgs('fields', ['*']);\n\n        // 执行业务逻辑\n        $data = $this->service()->query()->get($fields);\n\n        // 返回响应\n        return Admin::response()->success($data);\n    }\n\n    /**\n     * 参数配置表单（必须实现）\n     *\n     * @return array Amis 表单结构\n     */\n    public function argsSchema(): array\n    {\n        return [\n            amis()->SelectControl('model', '数据模型')\n                ->required()\n                ->menuTpl('${label} <span class=\"text-gray-300 pl-2\">${table}</span>')\n                ->source(admin_url('dev_tools/relation/model_options', true))\n                ->searchable(),\n            amis()->TextControl('fields', '查询字段')\n                ->placeholder('多个字段用逗号分隔，默认为 *')\n                ->description('指定要查询的字段，如：id,name,email'),\n        ];\n    }\n\n    /**\n     * 获取服务实例\n     */\n    protected function service()\n    {\n        $service = $this->blankService();\n        $service->setModelName($this->getArgs('model'));\n        return $service;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"核心方法详解",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心方法详解",children:"#"}),"核心方法详解"]}),"\n",(0,s.jsxs)(n.h3,{id:"必须实现的方法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#必须实现的方法",children:"#"}),"必须实现的方法"]}),"\n",(0,s.jsxs)(n.h4,{id:"handle---接口处理逻辑",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#handle---接口处理逻辑",children:"#"}),(0,s.jsx)(n.code,{children:"handle()"})," - 接口处理逻辑"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"作用"}),"：定义 API 的核心业务逻辑"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),"：可以是任意数据类型，建议使用 ",(0,s.jsx)(n.code,{children:"Admin::response()"})," 包装"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"示例"}),"："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    $data = $this->service()->list();\n    return Admin::response()->success($data);\n}\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"argsschema---参数配置表单",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#argsschema---参数配置表单",children:"#"}),(0,s.jsx)(n.code,{children:"argsSchema()"})," - 参数配置表单"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"作用"}),"：定义 API 创建时的参数配置表单"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"返回值"}),"：Amis 表单组件数组"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"示例"}),"："]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function argsSchema(): array\n{\n    return [\n        amis()->TextControl('name', '名称')->required(),\n        amis()->SelectControl('type', '类型')->options([\n            ['label' => '类型1', 'value' => 'type1'],\n            ['label' => '类型2', 'value' => 'type2'],\n        ]),\n    ];\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"可选配置属性",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可选配置属性",children:"#"}),"可选配置属性"]}),"\n",(0,s.jsxs)(n.h4,{id:"method---http-请求方法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#method---http-请求方法",children:"#"}),(0,s.jsx)(n.code,{children:"$method"})," - HTTP 请求方法"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public string $method = 'get'; // 支持：get, post, put, delete, patch, options, head, any\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"title---模板名称",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#title---模板名称",children:"#"}),(0,s.jsx)(n.code,{children:"$title"})," - 模板名称"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public string $title = 'API 模板名称';\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"辅助方法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#辅助方法",children:"#"}),"辅助方法"]}),"\n",(0,s.jsxs)(n.h4,{id:"getargs---获取配置参数",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getargs---获取配置参数",children:"#"}),(0,s.jsx)(n.code,{children:"getArgs()"})," - 获取配置参数"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"// 获取所有参数\n$allArgs = $this->getArgs();\n\n// 获取指定参数\n$model = $this->getArgs('model');\n\n// 获取嵌套参数，支持点语法\n$value = $this->getArgs('config.database.host', 'localhost');\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"blankservice---获取空白服务实例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#blankservice---获取空白服务实例",children:"#"}),(0,s.jsx)(n.code,{children:"blankService()"})," - 获取空白服务实例"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"$service = $this->blankService();\n$service->setModelName('App\\\\Models\\\\User');\n"})}),"\n",(0,s.jsxs)(n.h4,{id:"getapirecord---获取-api-记录",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getapirecord---获取-api-记录",children:"#"}),(0,s.jsx)(n.code,{children:"getApiRecord()"})," - 获取 API 记录"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"$apiRecord = $this->getApiRecord();\necho $apiRecord->path; // API 路径\necho $apiRecord->args; // 配置参数\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"实际应用示例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实际应用示例",children:"#"}),"实际应用示例"]}),"\n",(0,s.jsxs)(n.h3,{id:"示例-1选项列表-api",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-1选项列表-api",children:"#"}),"示例 1：选项列表 API"]}),"\n",(0,s.jsx)(n.p,{children:"适用于为下拉框、单选框等组件提供数据源："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\ApiTemplates;\n\nuse Slowlyo\\OwlAdmin\\Admin;\nuse Slowlyo\\OwlAdmin\\Support\\Apis\\AdminBaseApi;\n\nclass OptionsApi extends AdminBaseApi\n{\n    public string $method = 'get';\n    public string $title = '获取选项列表';\n\n    public function handle()\n    {\n        $valueField = $this->getArgs('value_field', 'id');\n        $labelField = $this->getArgs('label_field', 'name');\n        $condition = $this->getArgs('condition', []);\n\n        $query = $this->service()->query();\n\n        // 应用筛选条件\n        foreach ($condition as $field => $value) {\n            if ($value !== null && $value !== '') {\n                $query->where($field, $value);\n            }\n        }\n\n        $data = $query->get([\n            $valueField . ' as value',\n            $labelField . ' as label'\n        ]);\n\n        return Admin::response()->success($data);\n    }\n\n    public function argsSchema(): array\n    {\n        return [\n            amis()->SelectControl('model', '数据模型')\n                ->required()\n                ->menuTpl('${label} <span class=\"text-gray-300 pl-2\">${table}</span>')\n                ->source(admin_url('dev_tools/relation/model_options', true))\n                ->searchable(),\n            amis()->TextControl('value_field', 'Value 字段')\n                ->required()\n                ->value('id')\n                ->source(admin_url('dev_tools/relation/column_options?model=${model}', true)),\n            amis()->TextControl('label_field', 'Label 字段')\n                ->required()\n                ->value('name')\n                ->source(admin_url('dev_tools/relation/column_options?model=${model}', true)),\n            amis()->ComboControl('condition', '筛选条件')\n                ->items([\n                    amis()->TextControl('field', '字段名'),\n                    amis()->TextControl('value', '字段值'),\n                ])\n                ->multiple()\n                ->description('可添加多个筛选条件'),\n        ];\n    }\n\n    protected function service()\n    {\n        $service = $this->blankService();\n        $service->setModelName($this->getArgs('model'));\n        return $service;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"示例-2统计数据-api",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#示例-2统计数据-api",children:"#"}),"示例 2：统计数据 API"]}),"\n",(0,s.jsx)(n.p,{children:"用于获取各种统计信息："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\ApiTemplates;\n\nuse Slowlyo\\OwlAdmin\\Admin;\nuse Slowlyo\\OwlAdmin\\Support\\Apis\\AdminBaseApi;\n\nclass StatisticsApi extends AdminBaseApi\n{\n    public string $method = 'get';\n    public string $title = '统计数据接口';\n\n    public function handle()\n    {\n        $model = $this->getArgs('model');\n        $groupBy = $this->getArgs('group_by');\n        $countField = $this->getArgs('count_field', '*');\n        $dateRange = $this->getArgs('date_range');\n\n        $query = $this->service()->query();\n\n        // 日期范围筛选\n        if ($dateRange && isset($dateRange['start'], $dateRange['end'])) {\n            $dateField = $this->getArgs('date_field', 'created_at');\n            $query->whereBetween($dateField, [$dateRange['start'], $dateRange['end']]);\n        }\n\n        // 分组统计\n        if ($groupBy) {\n            $data = $query->selectRaw(\"{$groupBy}, COUNT({$countField}) as count\")\n                         ->groupBy($groupBy)\n                         ->get();\n        } else {\n            $data = ['total' => $query->count()];\n        }\n\n        return Admin::response()->success($data);\n    }\n\n    public function argsSchema(): array\n    {\n        return [\n            amis()->SelectControl('model', '数据模型')\n                ->required()\n                ->menuTpl('${label} <span class=\"text-gray-300 pl-2\">${table}</span>')\n                ->source(admin_url('dev_tools/relation/model_options', true))\n                ->searchable(),\n            amis()->SelectControl('group_by', '分组字段')\n                ->source(admin_url('dev_tools/relation/column_options?model=${model}', true))\n                ->description('不选择则返回总数'),\n            amis()->TextControl('count_field', '统计字段')\n                ->value('*')\n                ->description('默认为 * (计数)'),\n            amis()->TextControl('date_field', '日期字段')\n                ->value('created_at')\n                ->source(admin_url('dev_tools/relation/column_options?model=${model}', true)),\n            amis()->DateRangeControl('date_range', '日期范围')\n                ->format('YYYY-MM-DD')\n                ->description('可选的日期筛选范围'),\n        ];\n    }\n\n    protected function service()\n    {\n        $service = $this->blankService();\n        $service->setModelName($this->getArgs('model'));\n        return $service;\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"高级用法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高级用法",children:"#"}),"高级用法"]}),"\n",(0,s.jsxs)(n.h3,{id:"请求参数处理",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#请求参数处理",children:"#"}),"请求参数处理"]}),"\n",(0,s.jsxs)(n.p,{children:["在 ",(0,s.jsx)(n.code,{children:"handle()"})," 方法中可以获取和处理各种请求参数："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    // 获取 URL 参数\n    $id = request('id');\n    $page = request('page', 1);\n\n    // 获取所有请求数据\n    $requestData = request()->all();\n\n    // 获取配置参数\n    $model = $this->getArgs('model');\n\n    // 结合使用\n    $query = $this->service()->query();\n\n    if ($id) {\n        $query->where('id', $id);\n    }\n\n    return Admin::response()->success($query->paginate($page));\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"错误处理",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#错误处理",children:"#"}),"错误处理"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    try {\n        $model = $this->getArgs('model');\n\n        if (!$model) {\n            return Admin::response()->fail('模型参数不能为空');\n        }\n\n        if (!class_exists($model)) {\n            return Admin::response()->fail('指定的模型不存在');\n        }\n\n        $data = $this->service()->list();\n\n        return Admin::response()->success($data);\n\n    } catch (\\Exception $e) {\n        return Admin::response()->fail('操作失败：' . $e->getMessage());\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"数据验证",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据验证",children:"#"}),"数据验证"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    // 验证必需参数\n    $rules = [\n        'name' => 'required|string|max:255',\n        'email' => 'required|email|unique:users',\n        'age' => 'integer|min:18|max:100',\n    ];\n\n    $validator = validator(request()->all(), $rules);\n\n    if ($validator->fails()) {\n        return Admin::response()->fail('验证失败', $validator->errors());\n    }\n\n    // 继续处理...\n    $result = $this->service()->store(request()->all());\n\n    return Admin::response()->success($result);\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"复杂查询构建",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#复杂查询构建",children:"#"}),"复杂查询构建"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    $query = $this->service()->query();\n\n    // 关联查询\n    $with = $this->getArgs('with', []);\n    if ($with) {\n        $query->with($with);\n    }\n\n    // 条件筛选\n    $filters = request('filters', []);\n    foreach ($filters as $field => $value) {\n        if ($value !== null && $value !== '') {\n            if (is_array($value)) {\n                $query->whereIn($field, $value);\n            } else {\n                $query->where($field, 'like', \"%{$value}%\");\n            }\n        }\n    }\n\n    // 排序\n    $orderBy = request('orderBy', 'id');\n    $orderDir = request('orderDir', 'desc');\n    $query->orderBy($orderBy, $orderDir);\n\n    // 分页\n    $perPage = request('perPage', 15);\n    $data = $query->paginate($perPage);\n\n    return Admin::response()->success($data);\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"最佳实践",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最佳实践",children:"#"}),"最佳实践"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-命名规范",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-命名规范",children:"#"}),"1. 命名规范"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"类名"}),"：使用 PascalCase，以 ",(0,s.jsx)(n.code,{children:"Api"})," 结尾，如 ",(0,s.jsx)(n.code,{children:"UserOptionsApi"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"方法名"}),"：使用 camelCase，语义明确"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"参数名"}),"：使用 snake_case，与数据库字段保持一致"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-参数设计",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-参数设计",children:"#"}),"2. 参数设计"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function argsSchema(): array\n{\n    return [\n        // 必需参数放在前面\n        amis()->SelectControl('model', '数据模型')->required(),\n\n        // 提供默认值\n        amis()->NumberControl('per_page', '每页数量')->value(15),\n\n        // 添加描述说明\n        amis()->TextControl('fields', '查询字段')\n            ->placeholder('id,name,email')\n            ->description('多个字段用逗号分隔'),\n\n        // 使用动态数据源\n        amis()->SelectControl('status', '状态')\n            ->source(admin_url('status-options', true)),\n    ];\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-性能优化",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-性能优化",children:"#"}),"3. 性能优化"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    $query = $this->service()->query();\n\n    // 只查询需要的字段\n    $fields = $this->getArgs('fields', ['id', 'name']);\n    $query->select($fields);\n\n    // 避免 N+1 查询\n    $with = $this->getArgs('with', []);\n    if ($with) {\n        $query->with($with);\n    }\n\n    // 使用索引字段进行筛选\n    $indexedField = $this->getArgs('indexed_field');\n    if ($indexedField) {\n        $query->where($indexedField, request($indexedField));\n    }\n\n    return Admin::response()->success($query->get());\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"4-安全考虑",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-安全考虑",children:"#"}),"4. 安全考虑"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    // 验证模型权限\n    $model = $this->getArgs('model');\n    $allowedModels = ['App\\\\Models\\\\User', 'App\\\\Models\\\\Post'];\n\n    if (!in_array($model, $allowedModels)) {\n        return Admin::response()->fail('无权访问该模型');\n    }\n\n    // 过滤敏感字段\n    $sensitiveFields = ['password', 'secret_key', 'token'];\n    $fields = array_diff($this->getArgs('fields', ['*']), $sensitiveFields);\n\n    $data = $this->service()->query()->get($fields);\n\n    return Admin::response()->success($data);\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"注意事项",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"}),"注意事项"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-路径冲突",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-路径冲突",children:"#"}),"1. 路径冲突"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"API 路径不能与现有路由冲突"}),"\n",(0,s.jsxs)(n.li,{children:["避免使用系统保留路径（如 ",(0,s.jsx)(n.code,{children:"admin"}),"、",(0,s.jsx)(n.code,{children:"api"})," 等）"]}),"\n",(0,s.jsx)(n.li,{children:"建议使用有意义的路径名称"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-参数验证",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-参数验证",children:"#"}),"2. 参数验证"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["在 ",(0,s.jsx)(n.code,{children:"argsSchema()"})," 中定义完整的参数验证规则"]}),"\n",(0,s.jsxs)(n.li,{children:["在 ",(0,s.jsx)(n.code,{children:"handle()"})," 方法中进行二次验证"]}),"\n",(0,s.jsx)(n.li,{children:"对用户输入进行适当的过滤和转义"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"3-错误处理",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-错误处理",children:"#"}),"3. 错误处理"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"使用统一的错误响应格式"}),"\n",(0,s.jsx)(n.li,{children:"记录详细的错误日志便于调试"}),"\n",(0,s.jsx)(n.li,{children:"向用户返回友好的错误信息"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"4-性能考虑",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-性能考虑",children:"#"}),"4. 性能考虑"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"避免在循环中执行数据库查询"}),"\n",(0,s.jsx)(n.li,{children:"合理使用缓存机制"}),"\n",(0,s.jsx)(n.li,{children:"对大数据量查询进行分页处理"}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"5-安全性",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-安全性",children:"#"}),"5. 安全性"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"验证用户权限和数据访问范围"}),"\n",(0,s.jsx)(n.li,{children:"过滤敏感数据字段"}),"\n",(0,s.jsx)(n.li,{children:"防止 SQL 注入和其他安全漏洞"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"调试技巧",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#调试技巧",children:"#"}),"调试技巧"]}),"\n",(0,s.jsxs)(n.h3,{id:"1-日志记录",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-日志记录",children:"#"}),"1. 日志记录"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    \\Log::info('API 调用', [\n        'template' => static::class,\n        'args' => $this->getArgs(),\n        'request' => request()->all(),\n    ]);\n\n    // 业务逻辑...\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"2-开发模式调试",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-开发模式调试",children:"#"}),"2. 开发模式调试"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"public function handle()\n{\n    if (config('app.debug')) {\n        return Admin::response()->success([\n            'debug_info' => [\n                'args' => $this->getArgs(),\n                'request' => request()->all(),\n                'sql' => \\DB::getQueryLog(),\n            ]\n        ]);\n    }\n\n    // 正常逻辑...\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"通过以上完整的文档，开发者可以深入理解动态 API 系统的设计理念、使用方法和最佳实践，快速上手并创建高质量的 API 接口。"})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(d,e)})):d(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["guide%2Fbuilt-in%2Fapi.md"]={toc:[{id:"核心特性",text:"核心特性",depth:2},{id:"使用场景",text:"使用场景",depth:2},{id:"路由规则",text:"路由规则",depth:2},{id:"内置-api-模板",text:"内置 API 模板",depth:2},{id:"创建自定义-api-模板",text:"创建自定义 API 模板",depth:2},{id:"方式一社区模板",text:"方式一：社区模板",depth:3},{id:"方式二手动创建",text:"方式二：手动创建",depth:3},{id:"基础结构",text:"基础结构",depth:3},{id:"核心方法详解",text:"核心方法详解",depth:2},{id:"必须实现的方法",text:"必须实现的方法",depth:3},{id:"handle---接口处理逻辑",text:"`handle()` - 接口处理逻辑",depth:4},{id:"argsschema---参数配置表单",text:"`argsSchema()` - 参数配置表单",depth:4},{id:"可选配置属性",text:"可选配置属性",depth:3},{id:"method---http-请求方法",text:"`$method` - HTTP 请求方法",depth:4},{id:"title---模板名称",text:"`$title` - 模板名称",depth:4},{id:"辅助方法",text:"辅助方法",depth:3},{id:"getargs---获取配置参数",text:"`getArgs()` - 获取配置参数",depth:4},{id:"blankservice---获取空白服务实例",text:"`blankService()` - 获取空白服务实例",depth:4},{id:"getapirecord---获取-api-记录",text:"`getApiRecord()` - 获取 API 记录",depth:4},{id:"实际应用示例",text:"实际应用示例",depth:2},{id:"示例-1选项列表-api",text:"示例 1：选项列表 API",depth:3},{id:"示例-2统计数据-api",text:"示例 2：统计数据 API",depth:3},{id:"高级用法",text:"高级用法",depth:2},{id:"请求参数处理",text:"请求参数处理",depth:3},{id:"错误处理",text:"错误处理",depth:3},{id:"数据验证",text:"数据验证",depth:3},{id:"复杂查询构建",text:"复杂查询构建",depth:3},{id:"最佳实践",text:"最佳实践",depth:2},{id:"1-命名规范",text:"1. 命名规范",depth:3},{id:"2-参数设计",text:"2. 参数设计",depth:3},{id:"3-性能优化",text:"3. 性能优化",depth:3},{id:"4-安全考虑",text:"4. 安全考虑",depth:3},{id:"注意事项",text:"注意事项",depth:2},{id:"1-路径冲突",text:"1. 路径冲突",depth:3},{id:"2-参数验证",text:"2. 参数验证",depth:3},{id:"3-错误处理",text:"3. 错误处理",depth:3},{id:"4-性能考虑",text:"4. 性能考虑",depth:3},{id:"5-安全性",text:"5. 安全性",depth:3},{id:"调试技巧",text:"调试技巧",depth:2},{id:"1-日志记录",text:"1. 日志记录",depth:3},{id:"2-开发模式调试",text:"2. 开发模式调试",depth:3}],title:"动态 API",frontmatter:{}}}}]);