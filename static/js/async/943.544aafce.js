"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["943"],{9436:function(n,e,a){a.r(e),a.d(e,{default:function(){return l}});var i=a(2676),s=a(453);function d(n){let e=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",pre:"pre",code:"code",strong:"strong",ul:"ul",li:"li",div:"div"},(0,s.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"助手函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#助手函数",children:"#"}),"助手函数"]}),"\n",(0,i.jsx)(e.p,{children:"Owl Admin 提供了丰富的助手函数来简化开发工作，这些函数涵盖了组件创建、数据处理、文件管理、用户认证等各个方面。"}),"\n",(0,i.jsxs)(e.h2,{id:"组件创建函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#组件创建函数",children:"#"}),"组件创建函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"amis",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#amis",children:"#"}),"amis()"]}),"\n",(0,i.jsx)(e.p,{children:"万能组件创建函数，支持多种调用方式"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\namis($type = null): \\Slowlyo\\OwlAdmin\\Renderers\\Amis|\\Slowlyo\\OwlAdmin\\Renderers\\Component\n\n// 使用示例\namis('page')->title('页面标题')->body('页面内容');\n// 等效于\nPage::make()->title('页面标题')->body('页面内容');\n// 等效于\namis()->Page()->title('页面标题')->body('页面内容');\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"不传参数时返回 Amis 实例，可链式调用各种组件"}),"\n",(0,i.jsx)(e.li,{children:"传入组件类型时直接创建对应组件"}),"\n",(0,i.jsx)(e.li,{children:"支持所有 amis 组件类型"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"使用场景："})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 创建表单\n$form = amis('form')->api('/api/save')->body([\n    amis('text')->name('name')->label('姓名'),\n    amis('email')->name('email')->label('邮箱')\n]);\n\n// 创建页面\n$page = amis()->Page()\n    ->title('用户管理')\n    ->body($form);\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"amismake-已废弃",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#amismake-已废弃",children:"#"}),"amisMake() (已废弃)"]}),"\n",(0,i.jsxs)(e.div,{className:"rspress-directive warning",children:[(0,i.jsx)(e.div,{className:"rspress-directive-title",children:"废弃提醒"}),(0,i.jsx)(e.div,{className:"rspress-directive-content",children:(0,i.jsxs)(e.p,{children:["\n此函数已被标记为废弃，建议使用 ",(0,i.jsx)(e.code,{children:"amis()"}),"函数替代。"]})})]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 旧用法（不推荐）\namisMake()->TextControl()->name('name')->label('标签');\n// 新用法（推荐）\namis()->TextControl()->name('name')->label('标签');\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"加密解密函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#加密解密函数",children:"#"}),"加密解密函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_encode",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_encode",children:"#"}),"admin_encode()"]}),"\n",(0,i.jsx)(e.p,{children:"使用 Laravel 加密服务加密字符串"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_encode(string $str): string\n\n// 使用示例\n$encrypted = admin_encode('敏感信息');\n// 输出类似：eyJpdiI6IjVqSGJHVjNxM...\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"基于 Laravel 的 Crypt 门面实现"}),"\n",(0,i.jsx)(e.li,{children:"使用应用的 APP_KEY 进行加密"}),"\n",(0,i.jsx)(e.li,{children:"返回 Base64 编码的加密字符串"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_decode",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_decode",children:"#"}),"admin_decode()"]}),"\n",(0,i.jsxs)(e.p,{children:["解密由 ",(0,i.jsx)(e.code,{children:"admin_encode()"})," 加密的字符串"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_decode(string $decodeStr): string\n\n// 使用示例\n$decrypted = admin_decode($encrypted);\n// 如果解密失败，返回空字符串\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"自动处理解密异常，失败时返回空字符串"}),"\n",(0,i.jsxs)(e.li,{children:["与 ",(0,i.jsx)(e.code,{children:"admin_encode()"})," 配对使用"]}),"\n",(0,i.jsx)(e.li,{children:"适用于敏感数据的临时加密存储"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"数据处理函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数据处理函数",children:"#"}),"数据处理函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"array2tree",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#array2tree",children:"#"}),"array2tree()"]}),"\n",(0,i.jsx)(e.p,{children:"将平面数组转换为树状结构"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\narray2tree(array $list, int $parentId = 0): array\n\n// 使用示例\n$flatArray = [\n    ['id' => 1, 'parent_id' => 0, 'name' => '根节点'],\n    ['id' => 2, 'parent_id' => 1, 'name' => '子节点1'],\n    ['id' => 3, 'parent_id' => 1, 'name' => '子节点2'],\n    ['id' => 4, 'parent_id' => 2, 'name' => '孙节点']\n];\n\n$tree = array2tree($flatArray);\n// 结果：\n// [\n//     [\n//         'id' => 1,\n//         'parent_id' => 0,\n//         'name' => '根节点',\n//         'children' => [\n//             [\n//                 'id' => 2,\n//                 'parent_id' => 1,\n//                 'name' => '子节点1',\n//                 'children' => [\n//                     ['id' => 4, 'parent_id' => 2, 'name' => '孙节点']\n//                 ]\n//             ],\n//             ['id' => 3, 'parent_id' => 1, 'name' => '子节点2']\n//         ]\n//     ]\n// ]\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["要求数组元素包含 ",(0,i.jsx)(e.code,{children:"id"})," 和 ",(0,i.jsx)(e.code,{children:"parent_id"})," 字段"]}),"\n",(0,i.jsx)(e.li,{children:"递归构建树状结构"}),"\n",(0,i.jsxs)(e.li,{children:["子节点存储在 ",(0,i.jsx)(e.code,{children:"children"})," 字段中"]}),"\n",(0,i.jsx)(e.li,{children:"常用于菜单、分类等层级数据处理"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"map2options",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#map2options",children:"#"}),"map2options()"]}),"\n",(0,i.jsx)(e.p,{children:"将关联数组转换为选项格式"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nmap2options(array $map): array\n\n// 使用示例\n$statusMap = [\n    'active' => '激活',\n    'inactive' => '禁用',\n    'pending' => '待审核'\n];\n\n$options = map2options($statusMap);\n// 结果：\n// [\n//     ['label' => '激活', 'value' => 'active'],\n//     ['label' => '禁用', 'value' => 'inactive'],\n//     ['label' => '待审核', 'value' => 'pending']\n// ]\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["键作为 ",(0,i.jsx)(e.code,{children:"value"}),"，值作为 ",(0,i.jsx)(e.code,{children:"label"})]}),"\n",(0,i.jsx)(e.li,{children:"返回标准的选项数组格式"}),"\n",(0,i.jsx)(e.li,{children:"适用于下拉框、单选框等组件的选项数据"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"is_json",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#is_json",children:"#"}),"is_json()"]}),"\n",(0,i.jsx)(e.p,{children:"检查字符串是否为有效的 JSON 格式"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nis_json(string $string): bool\n\n// 使用示例\nis_json('{\"name\": \"张三\"}');     // true\nis_json('[1, 2, 3]');           // true\nis_json('普通字符串');           // false\nis_json('{\"invalid\": json}');   // false\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"检查字符串格式和 JSON 解析是否成功"}),"\n",(0,i.jsx)(e.li,{children:"仅接受能解析为数组的 JSON 字符串"}),"\n",(0,i.jsx)(e.li,{children:"常用于数据验证和格式检查"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"路径和-url-函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#路径和-url-函数",children:"#"}),"路径和 URL 函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_url",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_url",children:"#"}),"admin_url()"]}),"\n",(0,i.jsx)(e.p,{children:"生成管理后台的 URL 路径"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_url(string $path = null, bool $needPrefix = false): string\n\n// 使用示例\nadmin_url('user');              // /user\nadmin_url('user', true);        // /admin-api/user\nadmin_url('user/create');       // /user/create\nadmin_url('user/create', true); // /admin-api/user/create\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"参数说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"$path"}),"：路径字符串"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"$needPrefix"}),"：是否添加 API 前缀"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"自动处理路径分隔符"}),"\n",(0,i.jsx)(e.li,{children:"根据配置添加管理后台前缀"}),"\n",(0,i.jsx)(e.li,{children:"用于生成后台页面和 API 路径"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_path",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_path",children:"#"}),"admin_path()"]}),"\n",(0,i.jsx)(e.p,{children:"获取管理后台目录的绝对路径"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_path(string $path = ''): string\n\n// 使用示例\nadmin_path();                    // /path/to/app/Admin\nadmin_path('Controllers');       // /path/to/app/Admin/Controllers\nadmin_path('Models/User.php');   // /path/to/app/Admin/Models/User.php\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["基于 ",(0,i.jsx)(e.code,{children:"config('admin.directory')"})," 配置，返回绝对路径"]}),"\n",(0,i.jsx)(e.li,{children:"用于文件系统操作和类路径生成"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_extension_path",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_extension_path",children:"#"}),"admin_extension_path()"]}),"\n",(0,i.jsx)(e.p,{children:"获取扩展目录的绝对路径"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_extension_path(?string $path = null): string\n\n// 使用示例\nadmin_extension_path();              // /path/to/extensions\nadmin_extension_path('my-plugin');   // /path/to/extensions/my-plugin\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["基于 ",(0,i.jsx)(e.code,{children:"config('admin.extension.dir')"})," 配置"]}),"\n",(0,i.jsxs)(e.li,{children:["默认为项目根目录下的 ",(0,i.jsx)(e.code,{children:"extensions"})," 文件夹"]}),"\n",(0,i.jsx)(e.li,{children:"用于扩展插件的文件管理"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"owl_admin_path",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#owl_admin_path",children:"#"}),"owl_admin_path()"]}),"\n",(0,i.jsx)(e.p,{children:"获取 Owl Admin 框架内部文件路径"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nowl_admin_path(string $path = ''): string\n\n// 使用示例\nowl_admin_path('config/admin.php');  // 框架配置文件路径\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"指向框架源码目录"}),"\n",(0,i.jsx)(e.li,{children:"主要用于框架内部文件访问"}),"\n",(0,i.jsx)(e.li,{children:"一般开发者不需要直接使用"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"数据库函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数据库函数",children:"#"}),"数据库函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"table_columns",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#table_columns",children:"#"}),"table_columns()"]}),"\n",(0,i.jsx)(e.p,{children:"获取数据表的字段名列表"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:'// 函数签名\ntable_columns(string $tableName): array\n\n// 使用示例\n$columns = table_columns(\'users\');\n// 返回字段名数组，例如：["id", "name", "created_at"]\n'})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["基于框架内部 ",(0,i.jsx)(e.code,{children:"Database::getTableColumns()"})," 实现"]}),"\n",(0,i.jsx)(e.li,{children:"仅返回字段名数组"}),"\n",(0,i.jsx)(e.li,{children:"常用于代码生成器和动态表单创建"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"文件处理函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#文件处理函数",children:"#"}),"文件处理函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_resource_full_path",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_resource_full_path",children:"#"}),"admin_resource_full_path()"]}),"\n",(0,i.jsx)(e.p,{children:"生成资源文件的完整 URL"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_resource_full_path(string $path, string $server = null): string\n\n// 使用示例\nadmin_resource_full_path('uploads/avatar.jpg');\n// 输出：https://example.com/storage/uploads/avatar.jpg\n\nadmin_resource_full_path('avatar.jpg', 'https://cdn.example.com');\n// 输出：https://cdn.example.com/avatar.jpg\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"自动处理相对路径和绝对路径"}),"\n",(0,i.jsx)(e.li,{children:"支持自定义服务器地址"}),"\n",(0,i.jsx)(e.li,{children:"根据配置自动选择 HTTP/HTTPS 协议"}),"\n",(0,i.jsx)(e.li,{children:"支持 Data URL 格式（base64 图片）"}),"\n"]}),"\n",(0,i.jsxs)(e.h3,{id:"file_upload_handle",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#file_upload_handle",children:"#"}),"file_upload_handle()"]}),"\n",(0,i.jsx)(e.p,{children:"处理单文件上传的 Eloquent 属性转换"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nfile_upload_handle(): \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n\n// 在模型中使用\nclass User extends Model\n{\n    protected function avatar(): Attribute\n    {\n        return file_upload_handle();\n    }\n}\n\n// 使用效果\n$user = new User();\n$user->avatar = '/storage/uploads/avatar.jpg';  // 存储时去除域名\necho $user->avatar;  // 输出完整 URL：https://example.com/storage/uploads/avatar.jpg\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"file_upload_handle_multi",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#file_upload_handle_multi",children:"#"}),"file_upload_handle_multi()"]}),"\n",(0,i.jsx)(e.p,{children:"处理多文件上传的 Eloquent 属性转换"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nfile_upload_handle_multi(): \\Illuminate\\Database\\Eloquent\\Casts\\Attribute\n\n// 在模型中使用\nclass Product extends Model\n{\n    protected function images(): Attribute\n    {\n        return file_upload_handle_multi();\n    }\n}\n\n// 使用效果\n$product = new Product();\n$product->images = ['image1.jpg', 'image2.jpg'];  // 存储为逗号分隔的字符串\necho json_encode($product->images);  // 输出完整 URL 数组\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"自动处理存储和读取时的 URL 转换"}),"\n",(0,i.jsx)(e.li,{children:"存储时去除域名，节省存储空间"}),"\n",(0,i.jsx)(e.li,{children:"读取时自动添加完整域名"}),"\n",(0,i.jsx)(e.li,{children:"多文件版本支持数组和逗号分隔字符串"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"用户和认证函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#用户和认证函数",children:"#"}),"用户和认证函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_user",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_user",children:"#"}),"admin_user()"]}),"\n",(0,i.jsx)(e.p,{children:"获取当前登录的管理员用户"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_user(): ?\\Slowlyo\\OwlAdmin\\Models\\AdminUser\n\n// 使用示例\n$user = admin_user();\nif ($user) {\n    echo $user->name;     // 用户名\n    echo $user->id;       // 用户ID\n    echo $user->email;    // 邮箱\n}\n\n// 检查用户权限\nif (admin_user()?->can('user.create')) {\n    // 有创建用户权限\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"基于当前会话获取用户信息"}),"\n",(0,i.jsx)(e.li,{children:"未登录时返回 null"}),"\n",(0,i.jsx)(e.li,{children:"返回完整的用户模型实例"}),"\n",(0,i.jsx)(e.li,{children:"支持权限检查和角色判断"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"设置管理函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#设置管理函数",children:"#"}),"设置管理函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"settings",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#settings",children:"#"}),"settings()"]}),"\n",(0,i.jsx)(e.p,{children:"获取系统设置服务实例"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nsettings(): \\Slowlyo\\OwlAdmin\\Services\\AdminSettingService\n\n// 使用示例\n// 获取设置\n$siteName = settings()->get('site_name', '默认站点名');\n$config = settings()->get('mail_config');\n\n// 设置单个值\nsettings()->set('site_name', '我的站点');\n\n// 批量设置\nsettings()->setMany([\n    'site_name' => '我的站点',\n    'site_description' => '站点描述'\n]);\n\n// 获取所有设置\n$allSettings = settings()->all();\n\n// 删除设置\nsettings()->del('old_setting');\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"提供完整的设置管理功能"}),"\n",(0,i.jsx)(e.li,{children:"支持缓存机制，提高性能"}),"\n",(0,i.jsx)(e.li,{children:"支持模块化设置管理"}),"\n",(0,i.jsx)(e.li,{children:"支持数组路径访问（点号分隔）"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"页面管理函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#页面管理函数",children:"#"}),"页面管理函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_pages",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_pages",children:"#"}),"admin_pages()"]}),"\n",(0,i.jsx)(e.p,{children:"获取自定义页面内容"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_pages(string $sign): mixed\n\n// 使用示例\n$pageSchema = admin_pages('dashboard');\n// 返回页面的 JSON Schema 配置\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"基于页面标识获取页面配置"}),"\n",(0,i.jsx)(e.li,{children:"支持缓存机制"}),"\n",(0,i.jsx)(e.li,{children:"用于自定义页面的动态加载"}),"\n",(0,i.jsx)(e.li,{children:"返回 amis 页面 Schema"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"异常处理函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#异常处理函数",children:"#"}),"异常处理函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_abort",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_abort",children:"#"}),"admin_abort()"]}),"\n",(0,i.jsx)(e.p,{children:"抛出管理后台异常"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_abort(string $message = '', array $data = [], int $doNotDisplayToast = 1): void\n\n// 使用示例\nadmin_abort('操作失败');\nadmin_abort('数据验证失败', ['field' => 'name']);\nadmin_abort('静默失败', [], 0);  // 不显示 Toast 提示\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"admin_abort_if",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_abort_if",children:"#"}),"admin_abort_if()"]}),"\n",(0,i.jsx)(e.p,{children:"条件异常抛出"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_abort_if(bool $flag, string $message = '', array $data = [], int $doNotDisplayToast = 1): void\n\n// 使用示例\nadmin_abort_if(empty($user), '用户不存在');\nadmin_abort_if($user->status !== 'active', '用户已被禁用');\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"amis_abort-和-amis_abort_if",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#amis_abort-和-amis_abort_if",children:"#"}),"amis_abort() 和 amis_abort_if()"]}),"\n",(0,i.jsx)(e.p,{children:"专用于 amis 组件的异常处理"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 使用示例\namis_abort('操作失败');  // 会显示 Toast 提示\namis_abort_if($condition, '条件不满足');\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"admin_abort"})," 系列默认不显示 Toast（避免重复提示）"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"amis_abort"})," 系列会显示 Toast 提示"]}),"\n",(0,i.jsx)(e.li,{children:"支持携带额外数据"}),"\n",(0,i.jsx)(e.li,{children:"统一的错误处理机制"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"国际化函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#国际化函数",children:"#"}),"国际化函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_trans",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_trans",children:"#"}),"admin_trans()"]}),"\n",(0,i.jsx)(e.p,{children:"管理后台专用的翻译函数"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_trans(string $key = null, array $replace = [], string $locale = null): string\n\n// 使用示例\nadmin_trans('admin.save');              // 保存\nadmin_trans('admin.user_not_found');    // 用户未找到\nadmin_trans('admin.welcome', ['name' => '张三']);  // 欢迎，张三\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"优先查找应用的语言文件"}),"\n",(0,i.jsxs)(e.li,{children:["回退到框架的 ",(0,i.jsx)(e.code,{children:"admin::"})," 命名空间"]}),"\n",(0,i.jsx)(e.li,{children:"支持参数替换"}),"\n",(0,i.jsx)(e.li,{children:"自动处理语言包前缀"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"管道处理函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#管道处理函数",children:"#"}),"管道处理函数"]}),"\n",(0,i.jsxs)(e.h3,{id:"admin_pipeline",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#admin_pipeline",children:"#"}),"admin_pipeline()"]}),"\n",(0,i.jsx)(e.p,{children:"Laravel 管道处理的封装"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 函数签名\nadmin_pipeline($passable): \\Slowlyo\\OwlAdmin\\Support\\Pipeline\n\n// 使用示例\n$result = admin_pipeline($data)\n    ->through([\n        ValidateDataPipe::class,\n        ProcessDataPipe::class,\n        SaveDataPipe::class\n    ])\n    ->then(fn($data) => $data);\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"功能说明："})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"兼容 Laravel 9+ 的管道处理"}),"\n",(0,i.jsx)(e.li,{children:"支持中间件模式的数据处理"}),"\n",(0,i.jsx)(e.li,{children:"用于复杂的数据处理流程"}),"\n",(0,i.jsx)(e.li,{children:"提供统一的管道接口"}),"\n"]}),"\n",(0,i.jsxs)(e.h2,{id:"使用技巧",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#使用技巧",children:"#"}),"使用技巧"]}),"\n",(0,i.jsxs)(e.h3,{id:"1-组合使用示例",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#1-组合使用示例",children:"#"}),"1. 组合使用示例"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 创建带权限检查的表单\nif (admin_user()?->can('user.edit')) {\n    $form = amis('form')\n        ->api(admin_url('users', true))\n        ->body([\n            amis('text')->name('name')->label(admin_trans('admin.name')),\n            amis('select')->name('status')->label(admin_trans('admin.status'))\n                ->options(map2options(['active' => '激活', 'inactive' => '禁用']))\n        ]);\n}\n\n// 处理文件上传\nclass User extends Model\n{\n    protected function avatar(): Attribute\n    {\n        return file_upload_handle();\n    }\n\n    protected function documents(): Attribute\n    {\n        return file_upload_handle_multi();\n    }\n}\n\n// 设置管理\nsettings()->setMany([\n    'site_name' => admin_trans('admin.default_site_name'),\n    'upload_path' => admin_path('uploads')\n]);\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"2-错误处理最佳实践",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#2-错误处理最佳实践",children:"#"}),"2. 错误处理最佳实践"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 数据验证\nadmin_abort_if(empty($request->name), admin_trans('admin.name_required'));\nadmin_abort_if(!is_json($request->config), admin_trans('admin.invalid_json'));\n\n// 权限检查\nadmin_abort_if(!admin_user()?->can('user.delete'), admin_trans('admin.permission_denied'));\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"3-性能优化建议",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#3-性能优化建议",children:"#"}),"3. 性能优化建议"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 使用缓存获取设置\n$config = settings()->get('cache_key', $default, false);  // 使用缓存\n$fresh = settings()->get('cache_key', $default, true);    // 强制刷新\n\n// 批量操作\nsettings()->setMany($data);  // 比多次调用 set() 更高效\n"})}),"\n",(0,i.jsxs)(e.div,{className:"rspress-directive info",children:[(0,i.jsx)(e.div,{className:"rspress-directive-title",children:"提示"}),(0,i.jsx)(e.div,{className:"rspress-directive-content",children:(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"大部分函数都有完善的错误处理机制"}),"\n",(0,i.jsx)(e.li,{children:"建议在生产环境中合理使用缓存功能"}),"\n",(0,i.jsx)(e.li,{children:"文件处理函数会自动处理各种边界情况"}),"\n",(0,i.jsx)(e.li,{children:"异常处理函数支持国际化消息"}),"\n"]})})]})]})}function r(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,s.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(d,n)})):d(n)}let l=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["guide%2Fbasic%2Fhelper.md"]={toc:[{id:"组件创建函数",text:"组件创建函数",depth:2},{id:"amis",text:"amis()",depth:3},{id:"amismake-已废弃",text:"amisMake() (已废弃)",depth:3},{id:"加密解密函数",text:"加密解密函数",depth:2},{id:"admin_encode",text:"admin_encode()",depth:3},{id:"admin_decode",text:"admin_decode()",depth:3},{id:"数据处理函数",text:"数据处理函数",depth:2},{id:"array2tree",text:"array2tree()",depth:3},{id:"map2options",text:"map2options()",depth:3},{id:"is_json",text:"is_json()",depth:3},{id:"路径和-url-函数",text:"路径和 URL 函数",depth:2},{id:"admin_url",text:"admin_url()",depth:3},{id:"admin_path",text:"admin_path()",depth:3},{id:"admin_extension_path",text:"admin_extension_path()",depth:3},{id:"owl_admin_path",text:"owl_admin_path()",depth:3},{id:"数据库函数",text:"数据库函数",depth:2},{id:"table_columns",text:"table_columns()",depth:3},{id:"文件处理函数",text:"文件处理函数",depth:2},{id:"admin_resource_full_path",text:"admin_resource_full_path()",depth:3},{id:"file_upload_handle",text:"file_upload_handle()",depth:3},{id:"file_upload_handle_multi",text:"file_upload_handle_multi()",depth:3},{id:"用户和认证函数",text:"用户和认证函数",depth:2},{id:"admin_user",text:"admin_user()",depth:3},{id:"设置管理函数",text:"设置管理函数",depth:2},{id:"settings",text:"settings()",depth:3},{id:"页面管理函数",text:"页面管理函数",depth:2},{id:"admin_pages",text:"admin_pages()",depth:3},{id:"异常处理函数",text:"异常处理函数",depth:2},{id:"admin_abort",text:"admin_abort()",depth:3},{id:"admin_abort_if",text:"admin_abort_if()",depth:3},{id:"amis_abort-和-amis_abort_if",text:"amis_abort() 和 amis_abort_if()",depth:3},{id:"国际化函数",text:"国际化函数",depth:2},{id:"admin_trans",text:"admin_trans()",depth:3},{id:"管道处理函数",text:"管道处理函数",depth:2},{id:"admin_pipeline",text:"admin_pipeline()",depth:3},{id:"使用技巧",text:"使用技巧",depth:2},{id:"1-组合使用示例",text:"1. 组合使用示例",depth:3},{id:"2-错误处理最佳实践",text:"2. 错误处理最佳实践",depth:3},{id:"3-性能优化建议",text:"3. 性能优化建议",depth:3}],title:"助手函数",frontmatter:{}}}}]);