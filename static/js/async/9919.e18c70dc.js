"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["9919"],{2239:function(e,n,r){r.r(n),r.d(n,{default:function(){return l}});var t=r(2676),a=r(453),i=r(8831);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",h4:"h4",pre:"pre",ul:"ul",li:"li",strong:"strong"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"service-重写详解",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#service-重写详解",children:"#"}),"Service 重写详解"]}),"\n",(0,t.jsxs)(n.h2,{id:"service-架构概览",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#service-架构概览",children:"#"}),"Service 架构概览"]}),"\n",(0,t.jsx)(n.p,{children:"AdminService 是 Owl Admin 框架的核心服务层，提供了完整的 CRUD 操作和扩展机制："}),"\n",(0,t.jsx)(i.Z,Object.assign({code:'classDiagram\n    class AdminService {\n        +string modelName\n        +Request request\n        +getModel() Model\n        +getCurrentModel() Model|null\n        +query() Builder\n        +list() array\n        +store(data) bool\n        +update(primaryKey, data) bool\n        +delete(ids) mixed\n        +saving(data, primaryKey)\n        +saved(model, isEdit)\n        +deleted(ids)\n    }\n\n    class UserService {\n        +string modelName = User::class\n        +addRelations(query, scene)\n        +searchable(query)\n        +sortable(query)\n        +saving(data, primaryKey)\n        +saved(model, isEdit)\n        +formatRows(rows)\n    }\n\n    class ProductService {\n        +string modelName = Product::class\n        +addRelations(query, scene)\n        +searchable(query)\n        +saving(data, primaryKey)\n        +saved(model, isEdit)\n    }\n\n    AdminService <|-- UserService\n    AdminService <|-- ProductService\n\n    note for AdminService "基础服务类\\n提供通用 CRUD 方法"\n    note for UserService "用户服务\\n处理用户相关业务逻辑"\n    note for ProductService "商品服务\\n处理商品相关业务逻辑"'},{config:{}})),"\n",(0,t.jsxs)(n.h2,{id:"核心方法分类",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心方法分类",children:"#"}),"核心方法分类"]}),"\n",(0,t.jsxs)(n.h3,{id:"主要-crud-方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#主要-crud-方法",children:"#"}),"主要 CRUD 方法"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"方法"}),(0,t.jsx)(n.th,{align:"left",children:"说明"}),(0,t.jsx)(n.th,{align:"left",children:"使用场景"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"list()"})}),(0,t.jsx)(n.td,{align:"left",children:"获取列表数据"}),(0,t.jsx)(n.td,{align:"left",children:"列表页面数据查询"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"store($data)"})}),(0,t.jsx)(n.td,{align:"left",children:"新增数据"}),(0,t.jsx)(n.td,{align:"left",children:"创建新记录"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"update($primaryKey, $data)"})}),(0,t.jsx)(n.td,{align:"left",children:"修改数据"}),(0,t.jsx)(n.td,{align:"left",children:"更新现有记录"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"delete($ids)"})}),(0,t.jsx)(n.td,{align:"left",children:"删除数据"}),(0,t.jsx)(n.td,{align:"left",children:"删除单条或多条记录"})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"查询相关方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#查询相关方法",children:"#"}),"查询相关方法"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"方法"}),(0,t.jsx)(n.th,{align:"left",children:"说明"}),(0,t.jsx)(n.th,{align:"left",children:"重写频率"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"listQuery()"})}),(0,t.jsx)(n.td,{align:"left",children:"构建列表查询"}),(0,t.jsx)(n.td,{align:"left",children:"高"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"addRelations($query, $scene)"})}),(0,t.jsx)(n.td,{align:"left",children:"添加关联关系"}),(0,t.jsx)(n.td,{align:"left",children:"高"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"searchable($query)"})}),(0,t.jsx)(n.td,{align:"left",children:"搜索条件"}),(0,t.jsx)(n.td,{align:"left",children:"高"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"sortable($query)"})}),(0,t.jsx)(n.td,{align:"left",children:"排序逻辑"}),(0,t.jsx)(n.td,{align:"left",children:"中"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"sortColumn()"})}),(0,t.jsx)(n.td,{align:"left",children:"默认排序字段"}),(0,t.jsx)(n.td,{align:"left",children:"中"})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"数据处理方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据处理方法",children:"#"}),"数据处理方法"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"方法"}),(0,t.jsx)(n.th,{align:"left",children:"说明"}),(0,t.jsx)(n.th,{align:"left",children:"重写频率"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"formatRows($rows)"})}),(0,t.jsx)(n.td,{align:"left",children:"列表数据格式化"}),(0,t.jsx)(n.td,{align:"left",children:"高"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"getDetail($id)"})}),(0,t.jsx)(n.td,{align:"left",children:"获取详情数据"}),(0,t.jsx)(n.td,{align:"left",children:"中"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"getEditData($id)"})}),(0,t.jsx)(n.td,{align:"left",children:"获取编辑数据"}),(0,t.jsx)(n.td,{align:"left",children:"中"})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"辅助方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#辅助方法",children:"#"}),"辅助方法"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"方法"}),(0,t.jsx)(n.th,{align:"left",children:"说明"}),(0,t.jsx)(n.th,{align:"left",children:"使用场景"})]})}),(0,t.jsx)(n.tbody,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"getCurrentModel()"})}),(0,t.jsx)(n.td,{align:"left",children:"获取新增/修改成功后缓存的当前模型实例"}),(0,t.jsxs)(n.td,{align:"left",children:["在 ",(0,t.jsx)(n.code,{children:"saved()"})," 钩子或控制器后续逻辑中读取；批量快速编辑时为最后一次更新的实例"]})]})})]}),"\n",(0,t.jsxs)(n.h3,{id:"钩子方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#钩子方法",children:"#"}),"钩子方法"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"方法"}),(0,t.jsx)(n.th,{align:"left",children:"说明"}),(0,t.jsx)(n.th,{align:"left",children:"执行时机"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"saving(&$data, $primaryKey)"})}),(0,t.jsx)(n.td,{align:"left",children:"保存前处理"}),(0,t.jsx)(n.td,{align:"left",children:"新增/修改前"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"saved($model, $isEdit)"})}),(0,t.jsx)(n.td,{align:"left",children:"保存后处理"}),(0,t.jsx)(n.td,{align:"left",children:"新增/修改后"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"deleted($ids)"})}),(0,t.jsx)(n.td,{align:"left",children:"删除后处理"}),(0,t.jsx)(n.td,{align:"left",children:"删除后"})]})]})]}),"\n",(0,t.jsxs)(n.h2,{id:"方法详解与实现",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#方法详解与实现",children:"#"}),"方法详解与实现"]}),"\n",(0,t.jsxs)(n.h3,{id:"1-查询构建方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-查询构建方法",children:"#"}),"1. 查询构建方法"]}),"\n",(0,t.jsxs)(n.h4,{id:"listquery---构建基础查询",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#listquery---构建基础查询",children:"#"}),"listQuery() - 构建基础查询"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 构建列表查询\n *\n * @return Builder\n */\npublic function listQuery()\n{\n    $query = $this->query();\n\n    // 添加基础条件\n    $query->where('status', '!=', 'deleted');\n\n    // 添加权限过滤\n    if (!admin_user()->hasRole('admin')) {\n        $query->where('created_by', admin_user()->id);\n    }\n\n    // 添加关联关系\n    $this->addRelations($query, 'list');\n\n    return $query;\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"addrelations---添加关联关系",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#addrelations---添加关联关系",children:"#"}),"addRelations() - 添加关联关系"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 添加关联关系\n *\n * @param Builder $query\n * @param string $scene 场景: list, detail, edit\n * @return void\n */\npublic function addRelations($query, string $scene = 'list')\n{\n    switch ($scene) {\n        case 'list':\n            // 列表页面需要的关联\n            $query->with([\n                'category:id,name',\n                'user:id,username,avatar',\n                'tags:id,name,color'\n            ]);\n            break;\n\n        case 'detail':\n            // 详情页面需要的关联\n            $query->with([\n                'category',\n                'user.profile',\n                'tags',\n                'comments.user',\n                'attachments'\n            ]);\n            break;\n\n        case 'edit':\n            // 编辑页面需要的关联\n            $query->with([\n                'category:id,name',\n                'tags:id,name',\n                'permissions:id,name'\n            ]);\n            break;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"searchable---搜索条件",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#searchable---搜索条件",children:"#"}),"searchable() - 搜索条件"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 搜索条件\n *\n * @param Builder $query\n * @return void\n */\npublic function searchable($query)\n{\n    $keyword = request('keyword');\n\n    if ($keyword) {\n        $query->where(function($q) use ($keyword) {\n            $q->where('title', 'like', \"%{$keyword}%\")\n              ->orWhere('content', 'like', \"%{$keyword}%\")\n              ->orWhere('description', 'like', \"%{$keyword}%\")\n              ->orWhereHas('user', function($userQuery) use ($keyword) {\n                  $userQuery->where('username', 'like', \"%{$keyword}%\");\n              });\n        });\n    }\n\n    // 分类筛选\n    if (request('category_id')) {\n        $query->where('category_id', request('category_id'));\n    }\n\n    // 状态筛选\n    if (request('status') !== null) {\n        $query->where('status', request('status'));\n    }\n\n    // 日期范围筛选\n    if (request('date_range')) {\n        $dates = explode(',', request('date_range'));\n        if (count($dates) === 2) {\n            $query->whereBetween('created_at', [\n                $dates[0] . ' 00:00:00',\n                $dates[1] . ' 23:59:59'\n            ]);\n        }\n    }\n\n    // 高级搜索\n    if (request('advanced_search')) {\n        $this->applyAdvancedSearch($query, request('advanced_search'));\n    }\n}\n\n/**\n * 应用高级搜索\n */\nprotected function applyAdvancedSearch($query, $conditions)\n{\n    foreach ($conditions as $condition) {\n        $field = $condition['field'] ?? '';\n        $operator = $condition['operator'] ?? '=';\n        $value = $condition['value'] ?? '';\n\n        if (!$field || $value === '') {\n            continue;\n        }\n\n        switch ($operator) {\n            case 'like':\n                $query->where($field, 'like', \"%{$value}%\");\n                break;\n            case 'not_like':\n                $query->where($field, 'not like', \"%{$value}%\");\n                break;\n            case 'in':\n                $query->whereIn($field, explode(',', $value));\n                break;\n            case 'not_in':\n                $query->whereNotIn($field, explode(',', $value));\n                break;\n            case 'between':\n                $values = explode(',', $value);\n                if (count($values) === 2) {\n                    $query->whereBetween($field, $values);\n                }\n                break;\n            default:\n                $query->where($field, $operator, $value);\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"sortable---排序逻辑",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#sortable---排序逻辑",children:"#"}),"sortable() - 排序逻辑"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 排序逻辑\n *\n * @param Builder $query\n * @return void\n */\npublic function sortable($query)\n{\n    $orderBy = request('orderBy', $this->sortColumn());\n    $orderDir = request('orderDir', 'desc');\n\n    // 验证排序字段\n    $allowedSortFields = [\n        'id', 'title', 'created_at', 'updated_at',\n        'status', 'sort', 'view_count'\n    ];\n\n    if (!in_array($orderBy, $allowedSortFields)) {\n        $orderBy = $this->sortColumn();\n    }\n\n    // 验证排序方向\n    if (!in_array(strtolower($orderDir), ['asc', 'desc'])) {\n        $orderDir = 'desc';\n    }\n\n    // 特殊排序处理\n    switch ($orderBy) {\n        case 'user_name':\n            // 关联表排序\n            $query->leftJoin('users', 'articles.user_id', '=', 'users.id')\n                  ->orderBy('users.username', $orderDir)\n                  ->select('articles.*');\n            break;\n\n        case 'category_name':\n            // 关联表排序\n            $query->leftJoin('categories', 'articles.category_id', '=', 'categories.id')\n                  ->orderBy('categories.name', $orderDir)\n                  ->select('articles.*');\n            break;\n\n        default:\n            // 普通字段排序\n            $query->orderBy($orderBy, $orderDir);\n    }\n\n    // 添加二级排序\n    if ($orderBy !== 'id') {\n        $query->orderBy('id', 'desc');\n    }\n}\n\n/**\n * 默认排序字段\n *\n * @return string\n */\npublic function sortColumn(): string\n{\n    return 'created_at';\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"2-数据处理方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-数据处理方法",children:"#"}),"2. 数据处理方法"]}),"\n",(0,t.jsxs)(n.h4,{id:"formatrows---列表数据格式化",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formatrows---列表数据格式化",children:"#"}),"formatRows() - 列表数据格式化"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 列表数据格式化\n *\n * @param array $rows\n * @return array\n */\npublic function formatRows($rows)\n{\n    return array_map(function($row) {\n        // 格式化日期\n        if (isset($row['created_at'])) {\n            $row['created_at_formatted'] = date('Y-m-d H:i', strtotime($row['created_at']));\n        }\n\n        // 格式化状态\n        if (isset($row['status'])) {\n            $row['status_text'] = $this->getStatusText($row['status']);\n            $row['status_color'] = $this->getStatusColor($row['status']);\n        }\n\n        // 格式化用户信息\n        if (isset($row['user'])) {\n            $row['user_name'] = $row['user']['username'] ?? '';\n            $row['user_avatar'] = $row['user']['avatar'] ?? '';\n        }\n\n        // 格式化分类信息\n        if (isset($row['category'])) {\n            $row['category_name'] = $row['category']['name'] ?? '';\n        }\n\n        // 格式化标签\n        if (isset($row['tags'])) {\n            $row['tag_names'] = implode(', ', array_column($row['tags'], 'name'));\n            $row['tag_colors'] = array_column($row['tags'], 'color');\n        }\n\n        // 格式化文件大小\n        if (isset($row['file_size'])) {\n            $row['file_size_formatted'] = $this->formatFileSize($row['file_size']);\n        }\n\n        // 格式化金额\n        if (isset($row['amount'])) {\n            $row['amount_formatted'] = number_format($row['amount'], 2);\n        }\n\n        // 添加操作权限\n        $row['can_edit'] = $this->canEdit($row);\n        $row['can_delete'] = $this->canDelete($row);\n\n        return $row;\n    }, $rows);\n}\n\n/**\n * 获取状态文本\n */\nprotected function getStatusText($status)\n{\n    $statusMap = [\n        0 => '禁用',\n        1 => '启用',\n        2 => '待审核',\n        3 => '已拒绝',\n    ];\n\n    return $statusMap[$status] ?? '未知';\n}\n\n/**\n * 获取状态颜色\n */\nprotected function getStatusColor($status)\n{\n    $colorMap = [\n        0 => 'danger',\n        1 => 'success',\n        2 => 'warning',\n        3 => 'secondary',\n    ];\n\n    return $colorMap[$status] ?? 'secondary';\n}\n\n/**\n * 格式化文件大小\n */\nprotected function formatFileSize($bytes)\n{\n    $units = ['B', 'KB', 'MB', 'GB', 'TB'];\n\n    for ($i = 0; $bytes > 1024 && $i < count($units) - 1; $i++) {\n        $bytes /= 1024;\n    }\n\n    return round($bytes, 2) . ' ' . $units[$i];\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"getdetail---获取详情数据",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getdetail---获取详情数据",children:"#"}),"getDetail() - 获取详情数据"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 获取详情数据\n *\n * @param mixed $id\n * @return Model\n */\npublic function getDetail($id)\n{\n    $query = $this->query();\n\n    // 添加详情页面需要的关联\n    $this->addRelations($query, 'detail');\n\n    $model = $query->findOrFail($id);\n\n    // 增加浏览次数\n    $this->incrementViewCount($model);\n\n    // 格式化详情数据\n    return $this->formatDetailData($model);\n}\n\n/**\n * 格式化详情数据\n */\nprotected function formatDetailData($model)\n{\n    // 处理富文本内容\n    if ($model->content) {\n        $model->content_html = $this->processRichText($model->content);\n    }\n\n    // 处理附件\n    if ($model->attachments) {\n        $model->attachment_list = $model->attachments->map(function($attachment) {\n            return [\n                'id' => $attachment->id,\n                'name' => $attachment->name,\n                'url' => $attachment->url,\n                'size' => $this->formatFileSize($attachment->size),\n                'type' => $attachment->type,\n            ];\n        });\n    }\n\n    // 处理相关推荐\n    $model->related_items = $this->getRelatedItems($model);\n\n    return $model;\n}\n\n/**\n * 增加浏览次数\n */\nprotected function incrementViewCount($model)\n{\n    if (method_exists($model, 'increment')) {\n        $model->increment('view_count');\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"geteditdata---获取编辑数据",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#geteditdata---获取编辑数据",children:"#"}),"getEditData() - 获取编辑数据"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 获取编辑数据\n *\n * @param mixed $id\n * @return Model\n */\npublic function getEditData($id)\n{\n    $query = $this->query();\n\n    // 添加编辑页面需要的关联\n    $this->addRelations($query, 'edit');\n\n    $model = $query->findOrFail($id);\n\n    // 格式化编辑数据\n    return $this->formatEditData($model);\n}\n\n/**\n * 格式化编辑数据\n */\nprotected function formatEditData($model)\n{\n    // 处理多选关联数据\n    if ($model->relationLoaded('tags')) {\n        $model->tag_ids = $model->tags->pluck('id')->toArray();\n    }\n\n    if ($model->relationLoaded('permissions')) {\n        $model->permission_ids = $model->permissions->pluck('id')->toArray();\n    }\n\n    // 处理日期格式\n    $dateFields = ['publish_at', 'expire_at', 'birthday'];\n    foreach ($dateFields as $field) {\n        if ($model->$field) {\n            $model->$field = $model->$field->format('Y-m-d H:i:s');\n        }\n    }\n\n    // 处理 JSON 字段\n    if ($model->settings) {\n        $model->settings = json_decode($model->settings, true);\n    }\n\n    // 移除敏感字段\n    $model->makeHidden(['password', 'remember_token']);\n\n    return $model;\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"3-钩子方法详解",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-钩子方法详解",children:"#"}),"3. 钩子方法详解"]}),"\n",(0,t.jsxs)(n.h4,{id:"saving---保存前处理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#saving---保存前处理",children:"#"}),"saving() - 保存前处理"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 保存前处理\n *\n * @param array $data 表单数据（引用传递，可修改）\n * @param string $primaryKey 主键值（空表示新增）\n * @return void\n */\npublic function saving(&$data, $primaryKey = '')\n{\n    $isEdit = !empty($primaryKey);\n\n    // 数据验证\n    $this->validateData($data, $isEdit);\n\n    // 密码处理\n    if (isset($data['password'])) {\n        if ($isEdit && empty($data['password'])) {\n            // 编辑时密码为空则不更新\n            unset($data['password']);\n        } else {\n            // 加密密码\n            $data['password'] = Hash::make($data['password']);\n        }\n    }\n\n    // 处理上传文件\n    $this->handleFileUploads($data, $primaryKey);\n\n    // 处理 JSON 字段\n    if (isset($data['settings']) && is_array($data['settings'])) {\n        $data['settings'] = json_encode($data['settings']);\n    }\n\n    // 生成唯一标识\n    if (!$isEdit && !isset($data['uuid'])) {\n        $data['uuid'] = Str::uuid();\n    }\n\n    // 生成 slug\n    if (isset($data['title']) && !isset($data['slug'])) {\n        $data['slug'] = $this->generateSlug($data['title'], $primaryKey);\n    }\n\n    // 设置创建者/更新者\n    if (!$isEdit) {\n        $data['created_by'] = admin_user()->id;\n    } else {\n        $data['updated_by'] = admin_user()->id;\n    }\n\n    // 处理状态变更\n    if ($isEdit && isset($data['status'])) {\n        $oldModel = $this->query()->find($primaryKey);\n        if ($oldModel && $oldModel->status !== $data['status']) {\n            $data['status_changed_at'] = now();\n            $data['status_changed_by'] = admin_user()->id;\n        }\n    }\n\n    // 业务逻辑处理\n    $this->handleBusinessLogic($data, $isEdit);\n}\n\n/**\n * 数据验证\n */\nprotected function validateData($data, $isEdit = false)\n{\n    $rules = [\n        'title' => 'required|max:255',\n        'email' => 'required|email|unique:users,email' . ($isEdit ? ',' . $data['id'] : ''),\n    ];\n\n    if (!$isEdit) {\n        $rules['password'] = 'required|min:6';\n    }\n\n    $validator = validator($data, $rules);\n\n    if ($validator->fails()) {\n        admin_abort($validator->errors()->first());\n    }\n}\n\n/**\n * 处理文件上传\n */\nprotected function handleFileUploads(&$data, $primaryKey = '')\n{\n    $fileFields = ['avatar', 'cover', 'attachments'];\n\n    foreach ($fileFields as $field) {\n        if (!isset($data[$field])) {\n            continue;\n        }\n\n        if (is_string($data[$field])) {\n            // 单文件处理\n            $data[$field] = $this->processUploadedFile($data[$field], $primaryKey, $field);\n        } elseif (is_array($data[$field])) {\n            // 多文件处理\n            $data[$field] = array_map(function($file) use ($primaryKey, $field) {\n                return $this->processUploadedFile($file, $primaryKey, $field);\n            }, $data[$field]);\n        }\n    }\n}\n\n/**\n * 处理单个上传文件\n */\nprotected function processUploadedFile($file, $primaryKey, $field)\n{\n    // 如果是编辑模式，删除旧文件\n    if ($primaryKey) {\n        $oldModel = $this->query()->find($primaryKey);\n        if ($oldModel && $oldModel->$field && $oldModel->$field !== $file) {\n            Storage::delete($oldModel->$field);\n        }\n    }\n\n    // 处理新文件\n    if (Str::startsWith($file, 'temp/')) {\n        // 从临时目录移动到正式目录\n        $newPath = str_replace('temp/', 'uploads/', $file);\n        Storage::move($file, $newPath);\n        return $newPath;\n    }\n\n    return $file;\n}\n\n/**\n * 生成唯一 slug\n */\nprotected function generateSlug($title, $excludeId = null)\n{\n    $slug = Str::slug($title);\n    $originalSlug = $slug;\n    $counter = 1;\n\n    while ($this->slugExists($slug, $excludeId)) {\n        $slug = $originalSlug . '-' . $counter;\n        $counter++;\n    }\n\n    return $slug;\n}\n\n/**\n * 检查 slug 是否存在\n */\nprotected function slugExists($slug, $excludeId = null)\n{\n    $query = $this->query()->where('slug', $slug);\n\n    if ($excludeId) {\n        $query->where('id', '!=', $excludeId);\n    }\n\n    return $query->exists();\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"saved---保存后处理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#saved---保存后处理",children:"#"}),"saved() - 保存后处理"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 保存后处理\n *\n * @param Model $model 保存后的模型实例\n * @param bool $isEdit 是否为编辑操作\n * @return void\n */\npublic function saved($model, $isEdit = false)\n{\n    // 处理关联数据\n    $this->handleRelationships($model, $isEdit);\n\n    // 清理缓存\n    $this->clearRelatedCache($model);\n\n    // 记录操作日志\n    $this->logOperation($model, $isEdit);\n\n    // 发送通知\n    $this->sendNotifications($model, $isEdit);\n\n    // 处理搜索索引\n    $this->updateSearchIndex($model, $isEdit);\n\n    // 触发事件\n    $this->triggerEvents($model, $isEdit);\n}\n\n/**\n * 处理关联数据\n */\nprotected function handleRelationships($model, $isEdit)\n{\n    // 同步标签关联\n    if (isset($this->request['tag_ids'])) {\n        $model->tags()->sync($this->request['tag_ids']);\n    }\n\n    // 同步权限关联\n    if (isset($this->request['permission_ids'])) {\n        $model->permissions()->sync($this->request['permission_ids']);\n    }\n\n    // 同步角色关联\n    if (isset($this->request['role_ids'])) {\n        $model->roles()->sync($this->request['role_ids']);\n    }\n\n    // 处理附件关联\n    if (isset($this->request['attachment_ids'])) {\n        $model->attachments()->sync($this->request['attachment_ids']);\n    }\n\n    // 处理分类关联（多对多）\n    if (isset($this->request['category_ids'])) {\n        $model->categories()->sync($this->request['category_ids']);\n    }\n}\n\n/**\n * 清理相关缓存\n */\nprotected function clearRelatedCache($model)\n{\n    $cacheKeys = [\n        \"model_{$model->id}\",\n        \"user_permissions_{$model->id}\",\n        \"category_products_{$model->category_id}\",\n        \"user_statistics\",\n        \"popular_articles\",\n    ];\n\n    foreach ($cacheKeys as $key) {\n        cache()->forget($key);\n    }\n\n    // 清理标签缓存\n    cache()->tags(['articles', 'users'])->flush();\n}\n\n/**\n * 记录操作日志\n */\nprotected function logOperation($model, $isEdit)\n{\n    $action = $isEdit ? '更新' : '创建';\n\n    logger()->info(\"{$action}记录\", [\n        'model' => get_class($model),\n        'id' => $model->getKey(),\n        'title' => $model->title ?? $model->name ?? '',\n        'operator' => admin_user()->username,\n        'changes' => $isEdit ? $model->getChanges() : null,\n    ]);\n}\n\n/**\n * 发送通知\n */\nprotected function sendNotifications($model, $isEdit)\n{\n    if (!$isEdit) {\n        // 新增通知\n        event(new ModelCreated($model));\n\n        // 通知相关用户\n        if ($model instanceof Article) {\n            // 通知关注者\n            $this->notifyFollowers($model);\n        }\n    } else {\n        // 更新通知\n        event(new ModelUpdated($model));\n\n        // 状态变更通知\n        if ($model->wasChanged('status')) {\n            event(new StatusChanged($model));\n        }\n    }\n}\n\n/**\n * 更新搜索索引\n */\nprotected function updateSearchIndex($model, $isEdit)\n{\n    // 如果使用了搜索引擎（如 Elasticsearch）\n    if (class_exists('Laravel\\Scout\\Searchable') && in_array('Laravel\\Scout\\Searchable', class_uses($model))) {\n        $model->searchable();\n    }\n\n    // 自定义搜索索引更新\n    dispatch(new UpdateSearchIndex($model));\n}\n\n/**\n * 触发事件\n */\nprotected function triggerEvents($model, $isEdit)\n{\n    if ($isEdit) {\n        event(new ModelUpdated($model));\n    } else {\n        event(new ModelCreated($model));\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"deleted---删除后处理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deleted---删除后处理",children:"#"}),"deleted() - 删除后处理"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 删除后处理\n *\n * @param array $ids 删除的ID数组\n * @return void\n */\npublic function deleted($ids)\n{\n    // 获取被删除的模型（软删除情况下）\n    $models = $this->query()->withTrashed()->whereIn($this->primaryKey(), $ids)->get();\n\n    foreach ($models as $model) {\n        // 清理关联数据\n        $this->cleanupRelatedData($model);\n\n        // 清理文件\n        $this->cleanupFiles($model);\n\n        // 清理缓存\n        $this->clearModelCache($model);\n\n        // 记录删除日志\n        $this->logDeletion($model);\n\n        // 发送删除通知\n        $this->sendDeletionNotification($model);\n    }\n\n    // 更新统计数据\n    $this->updateStatistics();\n}\n\n/**\n * 清理关联数据\n */\nprotected function cleanupRelatedData($model)\n{\n    // 删除关联的标签\n    if (method_exists($model, 'tags')) {\n        $model->tags()->detach();\n    }\n\n    // 删除关联的评论\n    if (method_exists($model, 'comments')) {\n        $model->comments()->delete();\n    }\n\n    // 删除关联的收藏\n    if (method_exists($model, 'favorites')) {\n        $model->favorites()->delete();\n    }\n\n    // 删除关联的通知\n    if (method_exists($model, 'notifications')) {\n        $model->notifications()->delete();\n    }\n}\n\n/**\n * 清理文件\n */\nprotected function cleanupFiles($model)\n{\n    $fileFields = ['avatar', 'cover', 'attachments'];\n\n    foreach ($fileFields as $field) {\n        if (isset($model->$field) && $model->$field) {\n            if (is_array($model->$field)) {\n                foreach ($model->$field as $file) {\n                    Storage::delete($file);\n                }\n            } else {\n                Storage::delete($model->$field);\n            }\n        }\n    }\n}\n\n/**\n * 清理模型缓存\n */\nprotected function clearModelCache($model)\n{\n    $cacheKeys = [\n        \"model_{$model->id}\",\n        \"user_permissions_{$model->id}\",\n        \"article_views_{$model->id}\",\n    ];\n\n    foreach ($cacheKeys as $key) {\n        cache()->forget($key);\n    }\n}\n\n/**\n * 记录删除日志\n */\nprotected function logDeletion($model)\n{\n    logger()->info('删除记录', [\n        'model' => get_class($model),\n        'id' => $model->getKey(),\n        'title' => $model->title ?? $model->name ?? '',\n        'operator' => admin_user()->username,\n        'deleted_at' => now(),\n    ]);\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"完整实际应用案例",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#完整实际应用案例",children:"#"}),"完整实际应用案例"]}),"\n",(0,t.jsxs)(n.h3,{id:"1-用户管理-service",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-用户管理-service",children:"#"}),"1. 用户管理 Service"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Services;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Slowlyo\\OwlAdmin\\Services\\AdminService;\n\nclass UserService extends AdminService\n{\n    protected string $modelName = User::class;\n\n    /**\n     * 构建列表查询\n     */\n    public function listQuery()\n    {\n        $query = $this->query();\n\n        // 排除软删除的用户\n        $query->whereNull('deleted_at');\n\n        // 非超级管理员只能看到自己创建的用户\n        if (!admin_user()->hasRole('super-admin')) {\n            $query->where('created_by', admin_user()->id);\n        }\n\n        $this->addRelations($query, 'list');\n\n        return $query;\n    }\n\n    /**\n     * 添加关联关系\n     */\n    public function addRelations($query, string $scene = 'list')\n    {\n        switch ($scene) {\n            case 'list':\n                $query->with([\n                    'roles:id,name,display_name',\n                    'department:id,name',\n                    'creator:id,username'\n                ]);\n                break;\n\n            case 'detail':\n                $query->with([\n                    'roles.permissions',\n                    'department.parent',\n                    'profile',\n                    'loginLogs' => function($q) {\n                        $q->latest()->limit(10);\n                    }\n                ]);\n                break;\n\n            case 'edit':\n                $query->with(['roles:id,name', 'department:id,name']);\n                break;\n        }\n    }\n\n    /**\n     * 搜索条件\n     */\n    public function searchable($query)\n    {\n        // 关键词搜索\n        if ($keyword = request('keyword')) {\n            $query->where(function($q) use ($keyword) {\n                $q->where('username', 'like', \"%{$keyword}%\")\n                  ->orWhere('email', 'like', \"%{$keyword}%\")\n                  ->orWhere('real_name', 'like', \"%{$keyword}%\")\n                  ->orWhere('phone', 'like', \"%{$keyword}%\");\n            });\n        }\n\n        // 部门筛选\n        if ($departmentId = request('department_id')) {\n            $query->where('department_id', $departmentId);\n        }\n\n        // 角色筛选\n        if ($roleId = request('role_id')) {\n            $query->whereHas('roles', function($q) use ($roleId) {\n                $q->where('roles.id', $roleId);\n            });\n        }\n\n        // 状态筛选\n        if (request('status') !== null) {\n            $query->where('status', request('status'));\n        }\n\n        // 注册时间筛选\n        if ($dateRange = request('created_at_range')) {\n            $dates = explode(' - ', $dateRange);\n            if (count($dates) === 2) {\n                $query->whereBetween('created_at', [\n                    $dates[0] . ' 00:00:00',\n                    $dates[1] . ' 23:59:59'\n                ]);\n            }\n        }\n    }\n\n    /**\n     * 排序逻辑\n     */\n    public function sortable($query)\n    {\n        $orderBy = request('orderBy', 'created_at');\n        $orderDir = request('orderDir', 'desc');\n\n        switch ($orderBy) {\n            case 'department_name':\n                $query->leftJoin('departments', 'users.department_id', '=', 'departments.id')\n                      ->orderBy('departments.name', $orderDir)\n                      ->select('users.*');\n                break;\n\n            case 'role_name':\n                $query->leftJoin('model_has_roles', 'users.id', '=', 'model_has_roles.model_id')\n                      ->leftJoin('roles', 'model_has_roles.role_id', '=', 'roles.id')\n                      ->orderBy('roles.name', $orderDir)\n                      ->select('users.*')\n                      ->distinct();\n                break;\n\n            default:\n                $query->orderBy($orderBy, $orderDir);\n        }\n    }\n\n    /**\n     * 保存前处理\n     */\n    public function saving(&$data, $primaryKey = '')\n    {\n        $isEdit = !empty($primaryKey);\n\n        // 验证数据\n        $this->validateUserData($data, $isEdit);\n\n        // 处理密码\n        if (isset($data['password'])) {\n            if ($isEdit && empty($data['password'])) {\n                unset($data['password']);\n            } else {\n                $data['password'] = Hash::make($data['password']);\n            }\n        }\n\n        // 处理头像上传\n        if (isset($data['avatar']) && $data['avatar']) {\n            $data['avatar'] = $this->handleAvatarUpload($data['avatar'], $primaryKey);\n        }\n\n        // 生成用户名（如果未提供）\n        if (!$isEdit && empty($data['username'])) {\n            $data['username'] = $this->generateUsername($data['email']);\n        }\n\n        // 设置创建者\n        if (!$isEdit) {\n            $data['created_by'] = admin_user()->id;\n        }\n\n        // 处理员工编号\n        if (!$isEdit && empty($data['employee_id'])) {\n            $data['employee_id'] = $this->generateEmployeeId();\n        }\n    }\n\n    /**\n     * 验证用户数据\n     */\n    protected function validateUserData($data, $isEdit = false)\n    {\n        $rules = [\n            'email' => 'required|email|unique:users,email' . ($isEdit ? ',' . $data['id'] : ''),\n            'real_name' => 'required|max:50',\n            'phone' => 'nullable|regex:/^1[3-9]\\d{9}$/|unique:users,phone' . ($isEdit ? ',' . $data['id'] : ''),\n        ];\n\n        if (!$isEdit) {\n            $rules['password'] = 'required|min:6|max:20';\n        }\n\n        $validator = validator($data, $rules, [\n            'email.required' => '邮箱不能为空',\n            'email.email' => '邮箱格式不正确',\n            'email.unique' => '邮箱已存在',\n            'real_name.required' => '真实姓名不能为空',\n            'phone.regex' => '手机号格式不正确',\n            'phone.unique' => '手机号已存在',\n            'password.required' => '密码不能为空',\n            'password.min' => '密码至少6位',\n        ]);\n\n        if ($validator->fails()) {\n            admin_abort($validator->errors()->first());\n        }\n    }\n\n    /**\n     * 处理头像上传\n     */\n    protected function handleAvatarUpload($avatar, $primaryKey = '')\n    {\n        // 删除旧头像\n        if ($primaryKey) {\n            $oldUser = $this->query()->find($primaryKey);\n            if ($oldUser && $oldUser->avatar && $oldUser->avatar !== $avatar) {\n                Storage::delete($oldUser->avatar);\n            }\n        }\n\n        // 处理新头像\n        if (Str::startsWith($avatar, 'temp/')) {\n            $newPath = 'avatars/' . date('Y/m/') . basename($avatar);\n            Storage::move($avatar, $newPath);\n            return $newPath;\n        }\n\n        return $avatar;\n    }\n\n    /**\n     * 生成用户名\n     */\n    protected function generateUsername($email)\n    {\n        $username = explode('@', $email)[0];\n        $originalUsername = $username;\n        $counter = 1;\n\n        while ($this->query()->where('username', $username)->exists()) {\n            $username = $originalUsername . $counter;\n            $counter++;\n        }\n\n        return $username;\n    }\n\n    /**\n     * 生成员工编号\n     */\n    protected function generateEmployeeId()\n    {\n        $prefix = 'EMP';\n        $date = date('Ymd');\n        $lastEmployee = $this->query()\n            ->where('employee_id', 'like', $prefix . $date . '%')\n            ->orderBy('employee_id', 'desc')\n            ->first();\n\n        if ($lastEmployee) {\n            $lastNumber = intval(substr($lastEmployee->employee_id, -4));\n            $newNumber = $lastNumber + 1;\n        } else {\n            $newNumber = 1;\n        }\n\n        return $prefix . $date . str_pad($newNumber, 4, '0', STR_PAD_LEFT);\n    }\n\n    /**\n     * 保存后处理\n     */\n    public function saved($model, $isEdit = false)\n    {\n        // 同步角色\n        if (isset($this->request['role_ids'])) {\n            $model->syncRoles($this->request['role_ids']);\n        }\n\n        // 创建用户档案\n        if (!$isEdit) {\n            $model->profile()->create([\n                'nickname' => $model->real_name,\n                'gender' => $this->request['gender'] ?? 0,\n                'birthday' => $this->request['birthday'] ?? null,\n            ]);\n        }\n\n        // 清理权限缓存\n        cache()->forget(\"user_permissions_{$model->id}\");\n        cache()->forget(\"user_roles_{$model->id}\");\n\n        // 记录操作日志\n        logger()->info($isEdit ? '更新用户' : '创建用户', [\n            'user_id' => $model->id,\n            'username' => $model->username,\n            'real_name' => $model->real_name,\n            'operator' => admin_user()->username,\n        ]);\n\n        // 发送通知邮件\n        if (!$isEdit && isset($this->request['send_welcome_email'])) {\n            dispatch(new SendWelcomeEmail($model));\n        }\n    }\n\n    /**\n     * 列表数据格式化\n     */\n    public function formatRows($rows)\n    {\n        return array_map(function($row) {\n            // 格式化状态\n            $row['status_text'] = $row['status'] ? '启用' : '禁用';\n            $row['status_color'] = $row['status'] ? 'success' : 'danger';\n\n            // 格式化角色\n            if (isset($row['roles'])) {\n                $row['role_names'] = implode(', ', array_column($row['roles'], 'display_name'));\n            }\n\n            // 格式化部门\n            if (isset($row['department'])) {\n                $row['department_name'] = $row['department']['name'] ?? '';\n            }\n\n            // 格式化创建时间\n            $row['created_at_formatted'] = date('Y-m-d H:i', strtotime($row['created_at']));\n\n            // 格式化最后登录时间\n            if ($row['last_login_at']) {\n                $row['last_login_at_formatted'] = date('Y-m-d H:i', strtotime($row['last_login_at']));\n            } else {\n                $row['last_login_at_formatted'] = '从未登录';\n            }\n\n            // 添加操作权限\n            $row['can_edit'] = admin_user()->can('update', User::class);\n            $row['can_delete'] = admin_user()->can('delete', User::class) && $row['id'] !== admin_user()->id;\n\n            return $row;\n        }, $rows);\n    }\n\n    /**\n     * 删除后处理\n     */\n    public function deleted($ids)\n    {\n        $users = $this->query()->withTrashed()->whereIn('id', $ids)->get();\n\n        foreach ($users as $user) {\n            // 删除头像文件\n            if ($user->avatar) {\n                Storage::delete($user->avatar);\n            }\n\n            // 清理会话\n            $user->sessions()->delete();\n\n            // 撤销所有角色\n            $user->roles()->detach();\n\n            // 清理权限缓存\n            cache()->forget(\"user_permissions_{$user->id}\");\n\n            // 记录删除日志\n            logger()->info('删除用户', [\n                'user_id' => $user->id,\n                'username' => $user->username,\n                'operator' => admin_user()->username,\n            ]);\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"2-文章管理-service",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-文章管理-service",children:"#"}),"2. 文章管理 Service"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Services;\n\nuse App\\Models\\Article;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Slowlyo\\OwlAdmin\\Services\\AdminService;\n\nclass ArticleService extends AdminService\n{\n    protected string $modelName = Article::class;\n\n    public function listQuery()\n    {\n        $query = $this->query();\n\n        // 根据用户权限过滤\n        if (!admin_user()->hasRole('admin')) {\n            $query->where('author_id', admin_user()->id);\n        }\n\n        $this->addRelations($query, 'list');\n\n        return $query;\n    }\n\n    public function addRelations($query, string $scene = 'list')\n    {\n        switch ($scene) {\n            case 'list':\n                $query->with([\n                    'category:id,name,color',\n                    'author:id,username,real_name,avatar',\n                    'tags:id,name,color'\n                ]);\n                break;\n\n            case 'detail':\n                $query->with([\n                    'category',\n                    'author.profile',\n                    'tags',\n                    'comments' => function($q) {\n                        $q->with('user:id,username,avatar')->latest();\n                    }\n                ]);\n                break;\n        }\n    }\n\n    public function searchable($query)\n    {\n        if ($keyword = request('keyword')) {\n            $query->where(function($q) use ($keyword) {\n                $q->where('title', 'like', \"%{$keyword}%\")\n                  ->orWhere('summary', 'like', \"%{$keyword}%\")\n                  ->orWhere('content', 'like', \"%{$keyword}%\");\n            });\n        }\n\n        if ($categoryId = request('category_id')) {\n            $query->where('category_id', $categoryId);\n        }\n\n        if ($status = request('status')) {\n            $query->where('status', $status);\n        }\n\n        if ($tagId = request('tag_id')) {\n            $query->whereHas('tags', function($q) use ($tagId) {\n                $q->where('tags.id', $tagId);\n            });\n        }\n    }\n\n    public function saving(&$data, $primaryKey = '')\n    {\n        $isEdit = !empty($primaryKey);\n\n        // 生成摘要\n        if (empty($data['summary']) && !empty($data['content'])) {\n            $data['summary'] = Str::limit(strip_tags($data['content']), 200);\n        }\n\n        // 生成 slug\n        if (empty($data['slug'])) {\n            $data['slug'] = $this->generateSlug($data['title'], $primaryKey);\n        }\n\n        // 处理封面图片\n        if (isset($data['cover']) && $data['cover']) {\n            $data['cover'] = $this->handleCoverUpload($data['cover'], $primaryKey);\n        }\n\n        // 设置作者\n        if (!$isEdit) {\n            $data['author_id'] = admin_user()->id;\n        }\n\n        // 处理发布时间\n        if ($data['status'] === 'published' && empty($data['published_at'])) {\n            $data['published_at'] = now();\n        }\n\n        // 统计字数\n        if (isset($data['content'])) {\n            $data['word_count'] = mb_strlen(strip_tags($data['content']));\n        }\n    }\n\n    public function saved($model, $isEdit = false)\n    {\n        // 同步标签\n        if (isset($this->request['tag_ids'])) {\n            $model->tags()->sync($this->request['tag_ids']);\n        }\n\n        // 处理 SEO 信息\n        if (isset($this->request['seo'])) {\n            $model->seo()->updateOrCreate(\n                ['article_id' => $model->id],\n                $this->request['seo']\n            );\n        }\n\n        // 更新分类文章数\n        if ($model->category) {\n            $model->category->updateArticleCount();\n        }\n\n        // 清理缓存\n        cache()->forget(\"article_{$model->id}\");\n        cache()->forget(\"popular_articles\");\n        cache()->forget(\"latest_articles\");\n\n        // 更新搜索索引\n        if ($model->status === 'published') {\n            dispatch(new UpdateSearchIndex($model));\n        }\n    }\n\n    public function formatRows($rows)\n    {\n        return array_map(function($row) {\n            // 格式化状态\n            $statusMap = [\n                'draft' => ['text' => '草稿', 'color' => 'secondary'],\n                'published' => ['text' => '已发布', 'color' => 'success'],\n                'pending' => ['text' => '待审核', 'color' => 'warning'],\n                'rejected' => ['text' => '已拒绝', 'color' => 'danger'],\n            ];\n\n            $status = $statusMap[$row['status']] ?? ['text' => '未知', 'color' => 'secondary'];\n            $row['status_text'] = $status['text'];\n            $row['status_color'] = $status['color'];\n\n            // 格式化分类\n            if (isset($row['category'])) {\n                $row['category_name'] = $row['category']['name'];\n                $row['category_color'] = $row['category']['color'] ?? '#007bff';\n            }\n\n            // 格式化作者\n            if (isset($row['author'])) {\n                $row['author_name'] = $row['author']['real_name'] ?: $row['author']['username'];\n            }\n\n            // 格式化标签\n            if (isset($row['tags'])) {\n                $row['tag_names'] = implode(', ', array_column($row['tags'], 'name'));\n            }\n\n            // 格式化时间\n            $row['created_at_formatted'] = date('Y-m-d H:i', strtotime($row['created_at']));\n\n            if ($row['published_at']) {\n                $row['published_at_formatted'] = date('Y-m-d H:i', strtotime($row['published_at']));\n            }\n\n            return $row;\n        }, $rows);\n    }\n\n    protected function generateSlug($title, $excludeId = null)\n    {\n        $slug = Str::slug($title);\n        $originalSlug = $slug;\n        $counter = 1;\n\n        while ($this->slugExists($slug, $excludeId)) {\n            $slug = $originalSlug . '-' . $counter;\n            $counter++;\n        }\n\n        return $slug;\n    }\n\n    protected function slugExists($slug, $excludeId = null)\n    {\n        $query = $this->query()->where('slug', $slug);\n\n        if ($excludeId) {\n            $query->where('id', '!=', $excludeId);\n        }\n\n        return $query->exists();\n    }\n\n    protected function handleCoverUpload($cover, $primaryKey = '')\n    {\n        if ($primaryKey) {\n            $oldArticle = $this->query()->find($primaryKey);\n            if ($oldArticle && $oldArticle->cover && $oldArticle->cover !== $cover) {\n                Storage::delete($oldArticle->cover);\n            }\n        }\n\n        if (Str::startsWith($cover, 'temp/')) {\n            $newPath = 'covers/' . date('Y/m/') . basename($cover);\n            Storage::move($cover, $newPath);\n            return $newPath;\n        }\n\n        return $cover;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"最佳实践总结",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最佳实践总结",children:"#"}),"最佳实践总结"]}),"\n",(0,t.jsxs)(n.h3,{id:"1-方法重写原则",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-方法重写原则",children:"#"}),"1. 方法重写原则"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"保持原有逻辑"}),"：重写 ",(0,t.jsx)(n.code,{children:"searchable()"})," 和 ",(0,t.jsx)(n.code,{children:"sortable()"})," 时要保留原方法的核心逻辑"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"数据验证"}),"：在 ",(0,t.jsx)(n.code,{children:"saving()"})," 中进行严格的数据验证"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"关联处理"}),"：在 ",(0,t.jsx)(n.code,{children:"saved()"})," 中处理复杂的关联关系"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"缓存清理"}),"：及时清理相关缓存，保证数据一致性"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"2-性能优化",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-性能优化",children:"#"}),"2. 性能优化"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"预加载关联"}),"：在 ",(0,t.jsx)(n.code,{children:"addRelations()"})," 中合理使用 ",(0,t.jsx)(n.code,{children:"with()"})," 预加载"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"查询优化"}),"：避免 N+1 查询问题"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"索引使用"}),"：确保搜索和排序字段有适当的数据库索引"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"分页处理"}),"：大数据量时使用游标分页"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"3-安全考虑",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-安全考虑",children:"#"}),"3. 安全考虑"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"权限控制"}),"：在查询中加入权限过滤"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"数据验证"}),"：严格验证用户输入"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"SQL 注入防护"}),"：使用参数化查询"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"文件上传安全"}),"：验证文件类型和大小"]}),"\n"]}),"\n",(0,t.jsxs)(n.h3,{id:"4-代码组织",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-代码组织",children:"#"}),"4. 代码组织"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"单一职责"}),"：每个方法只负责一个功能"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"可读性"}),"：使用清晰的变量名和注释"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"可测试性"}),"：将复杂逻辑拆分为小方法"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"可扩展性"}),"：预留扩展点，便于后续功能添加"]}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(s,e)})):s(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["guide%2Fcrud%2Fservice-rewrite.md"]={toc:[{id:"service-架构概览",text:"Service 架构概览",depth:2},{id:"核心方法分类",text:"核心方法分类",depth:2},{id:"主要-crud-方法",text:"主要 CRUD 方法",depth:3},{id:"查询相关方法",text:"查询相关方法",depth:3},{id:"数据处理方法",text:"数据处理方法",depth:3},{id:"辅助方法",text:"辅助方法",depth:3},{id:"钩子方法",text:"钩子方法",depth:3},{id:"方法详解与实现",text:"方法详解与实现",depth:2},{id:"1-查询构建方法",text:"1. 查询构建方法",depth:3},{id:"listquery---构建基础查询",text:"listQuery() - 构建基础查询",depth:4},{id:"addrelations---添加关联关系",text:"addRelations() - 添加关联关系",depth:4},{id:"searchable---搜索条件",text:"searchable() - 搜索条件",depth:4},{id:"sortable---排序逻辑",text:"sortable() - 排序逻辑",depth:4},{id:"2-数据处理方法",text:"2. 数据处理方法",depth:3},{id:"formatrows---列表数据格式化",text:"formatRows() - 列表数据格式化",depth:4},{id:"getdetail---获取详情数据",text:"getDetail() - 获取详情数据",depth:4},{id:"geteditdata---获取编辑数据",text:"getEditData() - 获取编辑数据",depth:4},{id:"3-钩子方法详解",text:"3. 钩子方法详解",depth:3},{id:"saving---保存前处理",text:"saving() - 保存前处理",depth:4},{id:"saved---保存后处理",text:"saved() - 保存后处理",depth:4},{id:"deleted---删除后处理",text:"deleted() - 删除后处理",depth:4},{id:"完整实际应用案例",text:"完整实际应用案例",depth:2},{id:"1-用户管理-service",text:"1. 用户管理 Service",depth:3},{id:"2-文章管理-service",text:"2. 文章管理 Service",depth:3},{id:"最佳实践总结",text:"最佳实践总结",depth:2},{id:"1-方法重写原则",text:"1. 方法重写原则",depth:3},{id:"2-性能优化",text:"2. 性能优化",depth:3},{id:"3-安全考虑",text:"3. 安全考虑",depth:3},{id:"4-代码组织",text:"4. 代码组织",depth:3}],title:"Service 重写详解",frontmatter:{}}}}]);