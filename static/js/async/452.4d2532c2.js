"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["452"],{9560:function(e,n,i){i.r(n),i.d(n,{default:function(){return c}});var l=i(2676),r=i(453),s=i(8831);function t(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",strong:"strong",ul:"ul",li:"li",h3:"h3",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",pre:"pre",ol:"ol",div:"div"},(0,r.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.h1,{id:"crud-基础概念",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#crud-基础概念",children:"#"}),"CRUD 基础概念"]}),"\n",(0,l.jsxs)(n.h2,{id:"架构概览",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#架构概览",children:"#"}),"架构概览"]}),"\n",(0,l.jsx)(n.p,{children:"Owl Admin 的 CRUD 功能基于 Laravel 的 Resource Controller 模式，采用分层架构设计："}),"\n",(0,l.jsx)(s.Z,Object.assign({code:"graph TB\n    A[前端 Amis 组件] --\x3e B[AdminController 控制器层]\n    B --\x3e C[AdminService 服务层]\n    C --\x3e D[Eloquent Model 模型层]\n    D --\x3e E[数据库]\n\n    B --\x3e F[ElementTrait 组件构建]\n    B --\x3e G[QueryPathTrait 路径处理]\n    B --\x3e H[CheckActionTrait 动作检查]\n\n    C --\x3e I[数据查询与处理]\n    C --\x3e J[业务逻辑封装]\n    C --\x3e K[数据验证与格式化]"},{config:{}})),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"核心特性："})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"统一的 RESTful API 设计"}),"：遵循 Laravel Resource Controller 规范"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"前后端分离架构"}),"：前端 Amis 组件 + 后端 JSON API"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"高度可扩展性"}),"：通过继承和重写实现自定义逻辑"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"组件化构建"}),"：使用 Trait 模块化功能组织"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"管道模式支持"}),"：通过 AdminPipeline 实现组件定制"]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"控制器层详解",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#控制器层详解",children:"#"}),"控制器层详解"]}),"\n",(0,l.jsxs)(n.h3,{id:"核心方法说明",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心方法说明",children:"#"}),"核心方法说明"]}),"\n",(0,l.jsxs)(n.p,{children:["框架在 ",(0,l.jsx)(n.code,{children:"Slowlyo\\OwlAdmin\\Controllers\\AdminController"})," 中实现了完整的 CRUD 方法："]}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"方法"}),(0,l.jsx)(n.th,{align:"left",children:"HTTP 方法"}),(0,l.jsx)(n.th,{align:"left",children:"路由模式"}),(0,l.jsx)(n.th,{align:"left",children:"功能描述"}),(0,l.jsx)(n.th,{align:"left",children:"返回内容"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"index()"}),(0,l.jsx)(n.td,{align:"left",children:"GET"}),(0,l.jsx)(n.td,{align:"left",children:"/resource"}),(0,l.jsx)(n.td,{align:"left",children:"列表页面构建 & 数据获取"}),(0,l.jsx)(n.td,{align:"left",children:"页面结构 或 列表数据"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"create()"}),(0,l.jsx)(n.td,{align:"left",children:"GET"}),(0,l.jsx)(n.td,{align:"left",children:"/resource/create"}),(0,l.jsx)(n.td,{align:"left",children:"新增页面构建"}),(0,l.jsx)(n.td,{align:"left",children:"新增页面结构"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"store()"}),(0,l.jsx)(n.td,{align:"left",children:"POST"}),(0,l.jsx)(n.td,{align:"left",children:"/resource"}),(0,l.jsx)(n.td,{align:"left",children:"新增数据保存"}),(0,l.jsx)(n.td,{align:"left",children:"操作结果响应"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"show()"}),(0,l.jsx)(n.td,{align:"left",children:"GET"}),(0,l.jsx)(n.td,{align:"left",children:"/resource/{id}"}),(0,l.jsx)(n.td,{align:"left",children:"详情页面构建 & 数据获取"}),(0,l.jsx)(n.td,{align:"left",children:"页面结构 或 详情数据"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"edit()"}),(0,l.jsx)(n.td,{align:"left",children:"GET"}),(0,l.jsx)(n.td,{align:"left",children:"/resource/{id}/edit"}),(0,l.jsx)(n.td,{align:"left",children:"编辑页面构建 & 数据回显"}),(0,l.jsx)(n.td,{align:"left",children:"页面结构 或 编辑数据"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"update()"}),(0,l.jsx)(n.td,{align:"left",children:"PUT/PATCH"}),(0,l.jsx)(n.td,{align:"left",children:"/resource/{id}"}),(0,l.jsx)(n.td,{align:"left",children:"编辑数据保存"}),(0,l.jsx)(n.td,{align:"left",children:"操作结果响应"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:"destroy()"}),(0,l.jsx)(n.td,{align:"left",children:"DELETE"}),(0,l.jsx)(n.td,{align:"left",children:"/resource/{id}"}),(0,l.jsx)(n.td,{align:"left",children:"删除数据"}),(0,l.jsx)(n.td,{align:"left",children:"操作结果响应"})]})]})]}),"\n",(0,l.jsxs)(n.h3,{id:"动作参数机制",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动作参数机制",children:"#"}),"动作参数机制"]}),"\n",(0,l.jsxs)(n.p,{children:["控制器通过 ",(0,l.jsx)(n.code,{children:"_action"})," 参数实现一个方法处理多种请求："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",meta:"",children:"public function index()\n{\n    // 获取列表数据: ?_action=getData\n    if ($this->actionOfGetData()) {\n        return $this->response()->success($this->service->list());\n    }\n\n    // 导出数据: ?_action=export\n    if ($this->actionOfExport()) {\n        return $this->export();\n    }\n\n    // 默认返回页面结构\n    return $this->response()->success($this->list());\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"动作类型说明："})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"getData"}),"（GET）和 ",(0,l.jsx)(n.code,{children:"export"}),"（GET）在 ",(0,l.jsx)(n.code,{children:"index()"})," 中处理"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"quickEdit"}),"（POST）和 ",(0,l.jsx)(n.code,{children:"quickEditItem"}),"（POST）在 ",(0,l.jsx)(n.code,{children:"store()"})," 中处理（表格内快速编辑）"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"页面构建方法",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面构建方法",children:"#"}),"页面构建方法"]}),"\n",(0,l.jsx)(n.p,{children:"控制器需在子类中实现以下方法（约定实现，用于页面构建）："}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",meta:"",children:"// 需在继承 AdminController 的子类中实现\nprotected function list() {}\nprotected function form($isEdit) {}\nprotected function detail($id) {}\n"})}),"\n",(0,l.jsxs)(n.h2,{id:"服务层详解",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#服务层详解",children:"#"}),"服务层详解"]}),"\n",(0,l.jsxs)(n.h3,{id:"service-自动注入",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#service-自动注入",children:"#"}),"Service 自动注入"]}),"\n",(0,l.jsxs)(n.p,{children:["控制器通过 ",(0,l.jsx)(n.code,{children:"serviceName"})," 属性自动注入对应的服务实例："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",meta:"",children:"class BookController extends AdminController\n{\n    protected string $serviceName = BookService::class;\n\n    // $this->service 会自动初始化为 BookService 实例\n}\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"核心服务方法",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心服务方法",children:"#"}),"核心服务方法"]}),"\n",(0,l.jsx)(n.p,{children:"AdminService 提供了完整的数据操作方法："}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{align:"left",children:"方法分类"}),(0,l.jsx)(n.th,{align:"left",children:"方法名称"}),(0,l.jsx)(n.th,{align:"left",children:"功能描述"}),(0,l.jsx)(n.th,{align:"left",children:"返回类型"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"查询"})}),(0,l.jsx)(n.td,{align:"left",children:"list()"}),(0,l.jsx)(n.td,{align:"left",children:"获取分页列表数据"}),(0,l.jsx)(n.td,{align:"left",children:"array"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"listQuery()"}),(0,l.jsx)(n.td,{align:"left",children:"构建列表查询条件"}),(0,l.jsx)(n.td,{align:"left",children:"Builder"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"getDetail($id)"}),(0,l.jsx)(n.td,{align:"left",children:"获取详情数据"}),(0,l.jsx)(n.td,{align:"left",children:"Model"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"getEditData($id)"}),(0,l.jsx)(n.td,{align:"left",children:"获取编辑回显数据"}),(0,l.jsx)(n.td,{align:"left",children:"Model"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"操作"})}),(0,l.jsx)(n.td,{align:"left",children:"store($data)"}),(0,l.jsx)(n.td,{align:"left",children:"新增数据"}),(0,l.jsx)(n.td,{align:"left",children:"bool"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"update($id, $data)"}),(0,l.jsx)(n.td,{align:"left",children:"更新数据"}),(0,l.jsx)(n.td,{align:"left",children:"bool"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"delete($ids)"}),(0,l.jsx)(n.td,{align:"left",children:"删除数据"}),(0,l.jsx)(n.td,{align:"left",children:"mixed"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"钩子"})}),(0,l.jsx)(n.td,{align:"left",children:"saving($data, $id)"}),(0,l.jsx)(n.td,{align:"left",children:"保存前钩子"}),(0,l.jsx)(n.td,{align:"left",children:"void"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"saved($model, $isEdit)"}),(0,l.jsx)(n.td,{align:"left",children:"保存后钩子"}),(0,l.jsx)(n.td,{align:"left",children:"void"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left"}),(0,l.jsx)(n.td,{align:"left",children:"deleted($ids)"}),(0,l.jsx)(n.td,{align:"left",children:"删除后钩子"}),(0,l.jsx)(n.td,{align:"left",children:"void"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"辅助"})}),(0,l.jsx)(n.td,{align:"left",children:"getCurrentModel()"}),(0,l.jsx)(n.td,{align:"left",children:"获取新增/修改成功后缓存的当前模型实例"}),(0,l.jsx)(n.td,{align:"left",children:"Model"})]})]})]}),"\n",(0,l.jsxs)(n.h2,{id:"开发流程",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#开发流程",children:"#"}),"开发流程"]}),"\n",(0,l.jsxs)(n.h3,{id:"1-路由注册",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-路由注册",children:"#"}),"1. 路由注册"]}),"\n",(0,l.jsxs)(n.p,{children:["推荐通过“代码生成器”勾选“生成路由&菜单”，系统会写入 ",(0,l.jsx)(n.code,{children:"routes/admin.php"})," 并自动刷新路由（命令：",(0,l.jsx)(n.code,{children:"php artisan admin:gen-route"}),"）。"]}),"\n",(0,l.jsxs)(n.p,{children:["如需手动注册，可在 ",(0,l.jsx)(n.code,{children:"routes/admin.php"})," 内添加 Resource 路由："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",meta:"",children:"$router->resource('books', \\App\\Admin\\Controllers\\BookController::class);\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"2-控制器创建",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-控制器创建",children:"#"}),"2. 控制器创建"]}),"\n",(0,l.jsxs)(n.p,{children:["创建控制器 ",(0,l.jsx)(n.code,{children:"app/Admin/Controllers/BookController.php"}),"："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Controllers;\n\nuse App\\Admin\\Services\\BookService;\nuse Slowlyo\\OwlAdmin\\Controllers\\AdminController;\n\n/**\n * 图书管理控制器\n *\n * @property BookService $service\n */\nclass BookController extends AdminController\n{\n    protected string $serviceName = BookService::class;\n\n    /**\n     * 列表页面构建\n     */\n    public function list()\n    {\n        $crud = $this->baseCRUD()\n            ->filter($this->baseFilter()->body([\n                amis()->TextControl('title', '书名')->size('md')->clearable(),\n                amis()->SelectControl('category_id', '分类')\n                    ->source('/api/categories')\n                    ->clearable(),\n            ]))\n            ->headerToolbar([\n                $this->createButton('dialog'),\n                ...$this->baseHeaderToolBar(),\n                $this->exportAction(),\n            ])\n            ->columns([\n                amis()->TableColumn('id', 'ID')->sortable(),\n                amis()->TableColumn('title', '书名')->searchable(),\n                amis()->TableColumn('author', '作者'),\n                amis()->TableColumn('category.name', '分类'),\n                amis()->TableColumn('price', '价格')->type('number'),\n                amis()->TableColumn('status', '状态')->type('mapping')\n                    ->map(['1' => '上架', '0' => '下架']),\n                amis()->TableColumn('created_at', '创建时间')\n                    ->type('datetime')->sortable(),\n                $this->rowActions('dialog'),\n            ]);\n\n        return $this->baseList($crud);\n    }\n\n    /**\n     * 表单构建\n     */\n    public function form($isEdit = false)\n    {\n        return $this->baseForm()->body([\n            amis()->TextControl('title', '书名')->required(),\n            amis()->TextControl('author', '作者')->required(),\n            amis()->SelectControl('category_id', '分类')\n                ->source('/api/categories')->required(),\n            amis()->NumberControl('price', '价格')->min(0)->precision(2),\n            amis()->SwitchControl('status', '状态')->value(1),\n            amis()->TextareaControl('description', '描述')->maxRows(4),\n        ]);\n    }\n\n    /**\n     * 详情页面构建\n     */\n    public function detail($id)\n    {\n        return $this->baseDetail()->body([\n            amis()->StaticExactControl('id', 'ID'),\n            amis()->StaticExactControl('title', '书名'),\n            amis()->StaticExactControl('author', '作者'),\n            amis()->StaticExactControl('category.name', '分类'),\n            amis()->StaticExactControl('price', '价格'),\n            amis()->StaticExactControl('status', '状态')\n                ->map(['1' => '上架', '0' => '下架']),\n            amis()->StaticExactControl('description', '描述'),\n            amis()->StaticExactControl('created_at', '创建时间'),\n        ]);\n    }\n}\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"3-服务层创建",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-服务层创建",children:"#"}),"3. 服务层创建"]}),"\n",(0,l.jsxs)(n.p,{children:["创建服务 ",(0,l.jsx)(n.code,{children:"app/Admin/Services/BookService.php"}),"："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Services;\n\nuse App\\Models\\Book;\nuse Slowlyo\\OwlAdmin\\Services\\AdminService;\n\n/**\n * 图书服务类\n *\n * @method Book getModel()\n * @method Book|Builder query()\n */\nclass BookService extends AdminService\n{\n    protected string $modelName = Book::class;\n\n    /**\n     * 列表查询条件构建\n     */\n    public function listQuery()\n    {\n        $query = $this->query();\n\n        // 处理排序\n        $this->sortable($query);\n\n        // 加载关联关系\n        $this->addRelations($query);\n\n        // 处理搜索\n        $this->searchable($query);\n\n        return $query;\n    }\n\n    /**\n     * 添加关联关系\n     */\n    public function addRelations($query, string $scene = 'list')\n    {\n        if ($scene === 'list') {\n            $query->with(['category:id,name']);\n        }\n    }\n\n    /**\n     * 搜索条件处理\n     */\n    public function searchable($query)\n    {\n        $title = request('title');\n        $categoryId = request('category_id');\n\n        $query->when($title, function($q) use ($title) {\n            $q->where('title', 'like', \"%{$title}%\");\n        });\n\n        $query->when($categoryId, function($q) use ($categoryId) {\n            $q->where('category_id', $categoryId);\n        });\n    }\n\n    /**\n     * 保存前处理\n     */\n    public function saving(&$data, $primaryKey = '')\n    {\n        // 数据预处理\n        if (isset($data['price'])) {\n            $data['price'] = round($data['price'], 2);\n        }\n    }\n\n    /**\n     * 保存后处理\n     */\n    public function saved($model, $isEdit = false)\n    {\n        // 清除相关缓存\n        cache()->forget(\"book_category_{$model->category_id}\");\n\n        // 记录操作日志（示例）\n        logger()->info($isEdit ? '更新图书' : '创建图书', $model->toArray());\n    }\n}\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"4-模型创建",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-模型创建",children:"#"}),"4. 模型创建"]}),"\n",(0,l.jsxs)(n.p,{children:["创建模型 ",(0,l.jsx)(n.code,{children:"app/Models/Book.php"}),"："]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Database\\Eloquent\\Relations\\BelongsTo;\n\nclass Book extends Model\n{\n    protected $fillable = [\n        'title', 'author', 'category_id', 'price', 'status', 'description'\n    ];\n\n    protected $casts = [\n        'price' => 'decimal:2',\n        'status' => 'boolean',\n    ];\n\n    /**\n     * 分类关联\n     */\n    public function category(): BelongsTo\n    {\n        return $this->belongsTo(Category::class);\n    }\n}\n"})}),"\n",(0,l.jsxs)(n.h3,{id:"5-菜单配置",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-菜单配置",children:"#"}),"5. 菜单配置"]}),"\n",(0,l.jsxs)(n.p,{children:["在后台菜单管理中创建对应菜单项，设置路由为 ",(0,l.jsx)(n.code,{children:"/books"}),"。"]}),"\n",(0,l.jsxs)(n.h2,{id:"代码生成器",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#代码生成器",children:"#"}),"代码生成器"]}),"\n",(0,l.jsx)(n.p,{children:"框架提供了强大的代码生成器，可以自动生成完整的 CRUD 代码："}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"访问代码生成器"}),"：后台 → 开发工具 → 代码生成器"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"选择数据表"}),"：选择要生成 CRUD 的数据表"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"配置字段"}),"：设置字段类型、验证规则、显示方式等"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"生成代码"}),"：一键生成控制器、服务、路由等完整代码"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"生成的文件包括："})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"控制器文件"}),"\n",(0,l.jsx)(n.li,{children:"服务文件"}),"\n",(0,l.jsxs)(n.li,{children:["路由配置（写入 ",(0,l.jsx)(n.code,{children:"routes/admin.php"}),"）"]}),"\n",(0,l.jsx)(n.li,{children:"菜单配置\n（权限请在“系统-权限”中按需生成/分配）"}),"\n"]}),"\n",(0,l.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,l.jsx)(n.div,{className:"rspress-directive-title",children:"提示"}),(0,l.jsx)(n.div,{className:"rspress-directive-content",children:(0,l.jsx)(n.p,{children:"\n使用代码生成器可以大大提高开发效率，生成后只需根据业务需求进行微调即可。"})})]}),"\n",(0,l.jsxs)(n.h2,{id:"最佳实践",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最佳实践",children:"#"}),"最佳实践"]}),"\n",(0,l.jsxs)(n.h3,{id:"1-控制器职责分离",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-控制器职责分离",children:"#"}),"1. 控制器职责分离"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"控制器"}),"：专注于页面结构构建和请求响应"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"服务层"}),"：处理业务逻辑和数据操作"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"模型层"}),"：定义数据结构和关联关系"]}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"2-代码复用",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-代码复用",children:"#"}),"2. 代码复用"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["使用 ",(0,l.jsx)(n.code,{children:"baseCRUD()"}),"、",(0,l.jsx)(n.code,{children:"baseForm()"})," 等基础方法"]}),"\n",(0,l.jsx)(n.li,{children:"通过 Trait 封装通用功能"}),"\n",(0,l.jsx)(n.li,{children:"利用管道模式实现组件定制"}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"3-性能优化",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-性能优化",children:"#"}),"3. 性能优化"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"合理使用关联查询避免 N+1 问题"}),"\n",(0,l.jsx)(n.li,{children:"适当添加数据库索引"}),"\n",(0,l.jsx)(n.li,{children:"使用缓存减少重复查询"}),"\n"]}),"\n",(0,l.jsxs)(n.h3,{id:"4-安全考虑",children:[(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-安全考虑",children:"#"}),"4. 安全考虑"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"使用表单验证确保数据安全"}),"\n",(0,l.jsx)(n.li,{children:"实现权限控制限制访问"}),"\n",(0,l.jsx)(n.li,{children:"防止 SQL 注入和 XSS 攻击"}),"\n"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,l.jsx)(n,Object.assign({},e,{children:(0,l.jsx)(t,e)})):t(e)}let c=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["guide%2Fcrud%2Fbase.md"]={toc:[{id:"架构概览",text:"架构概览",depth:2},{id:"控制器层详解",text:"控制器层详解",depth:2},{id:"核心方法说明",text:"核心方法说明",depth:3},{id:"动作参数机制",text:"动作参数机制",depth:3},{id:"页面构建方法",text:"页面构建方法",depth:3},{id:"服务层详解",text:"服务层详解",depth:2},{id:"service-自动注入",text:"Service 自动注入",depth:3},{id:"核心服务方法",text:"核心服务方法",depth:3},{id:"开发流程",text:"开发流程",depth:2},{id:"1-路由注册",text:"1. 路由注册",depth:3},{id:"2-控制器创建",text:"2. 控制器创建",depth:3},{id:"3-服务层创建",text:"3. 服务层创建",depth:3},{id:"4-模型创建",text:"4. 模型创建",depth:3},{id:"5-菜单配置",text:"5. 菜单配置",depth:3},{id:"代码生成器",text:"代码生成器",depth:2},{id:"最佳实践",text:"最佳实践",depth:2},{id:"1-控制器职责分离",text:"1. 控制器职责分离",depth:3},{id:"2-代码复用",text:"2. 代码复用",depth:3},{id:"3-性能优化",text:"3. 性能优化",depth:3},{id:"4-安全考虑",text:"4. 安全考虑",depth:3}],title:"CRUD 基础概念",frontmatter:{}}}}]);