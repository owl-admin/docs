"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["4285"],{1350:function(e,n,i){i.r(n),i.d(n,{default:function(){return c}});var s=i(2676),r=i(453);function a(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",pre:"pre",code:"code",h3:"h3",div:"div",em:"em"},(0,r.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"组件管道",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件管道",children:"#"}),"组件管道"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsx)(n.p,{children:"v3.9.3 支持"}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"什么是管道",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#什么是管道",children:"#"}),"什么是管道"]}),"\n",(0,s.jsx)(n.p,{children:"使用 Pipeline 你可以将一个实例对象（object）在多个类之间传递，就像流水顺着管道依次流淌一般，层层传递，你就得到了从头至尾一系列执行操作的 “最终” 结果。"}),"\n",(0,s.jsx)(n.p,{children:"用一段简单的代码演示一下："}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"$pipeline = new \\Illuminate\\Pipeline\\Pipeline();\n\n// 原始传入数据\n$user = [\n    'name' => '张三',\n    'age' => 18,\n    'gender' => '男',\n];\n\n$result = $pipeline\n            ->send($user)\n            // ->via('run') // 你可以通过调用 via 方法指定一个方法名，Pipeline 会调用该方法, 替代默认的 handle 方法\n            ->through([\n                // 这里如果传入的是一个类名, Pipeline 会默认调用该类中的 handle 方法\n                GenderTransition::class, \n                // handle 方法的参数是 $user (原始数据) 和 $next\n                function ($user, $next){ // 这里也可以直接传入 闭包\n                    // 这里的 $user 是上一个类传递过来的数据\n                    \n                    // 假设: GenderTransition 类中, 将 gender 设置为了 女\n                    // 那么, 这个方法中 $user['gender'] = '女'\n                    \n                    // 再次给 $user 添加属性\n                    $user['address'] = 'M78 星云';\n                    \n                    // 执行下一个类, 传递 $user\n                    return $next($user);\n                },\n                // ...\n            ])\n            ->then(function ($user) {\n                // 最后一个类执行完后, 会执行 then 方法\n                \n                // 你可以做你想做的事, 比如:\n                $user['address'] .= ' 123456';\n            \n                // 最后返回 $user\n                return $user;\n            });\n            \nvar_dump($result);\n/*\narray(4) {\n  [\"name\"]=>\n  string(6) \"张三\"\n  [\"age\"]=>\n  int(18)\n  [\"gender\"]=>\n  string(1) \"女\"\n  [\"address\"]=>\n  string(15) \"M78 星云 123456\"\n}\n*/\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"框架中对管道的封装",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#框架中对管道的封装",children:"#"}),"框架中对管道的封装"]}),"\n",(0,s.jsxs)(n.h3,{id:"adminpipeline",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#adminpipeline",children:"#"}),"AdminPipeline"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace Slowlyo\\OwlAdmin\\Support\\Cores;\n\nuse Slowlyo\\OwlAdmin\\Admin;\n\nclass AdminPipeline\n{\n    /**\n     * @param               $key\n     * @param               $passable\n     * @param callable|null $callback\n     *\n     * @return mixed\n     */\n    public static function handle($key, $passable, callable $callback = null)\n    {\n        $do    = fn($i) => $callback ? $callback($i) : $i; // 如果传入了回调函数, 则执行回调函数, 否则直接返回 $passable\n        $pipes = Admin::context()->get($key, []); // 从框架上下文中获取管道内容\n\n        // 管道为空, 则直接返回原始数据, 稍微提升些许性能\n        if (blank($pipes)) {\n            return $do($passable);\n        }\n\n        // 执行管道\n        return admin_pipeline($passable)->through($pipes)->then(fn($i) => $do($i));\n    }\n\n    /**\n     * 该方法用于设置管道, 它们通过 $key 来对应\n     * \n     * @param array|mixed $pipes\n     *\n     * @return void\n     */\n    public static function through($key, $pipes)\n    {\n        Admin::context()->set($key, $pipes);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive info",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"上下文"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,s.jsxs)(n.p,{children:["\n",(0,s.jsx)(n.code,{children:"Admin::context()"})," 返回的是 ",(0,s.jsx)(n.code,{children:"\\Slowlyo\\OwlAdmin\\Support\\Context"})," 类"]}),(0,s.jsx)(n.p,{children:"它是一个单例类 (在框架的服务提供者中进行了单例绑定), 用于存储全局变量, 你可以通过它来存储和获取全局变量"})]})]}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive info",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"admin_pipeline"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,s.jsxs)(n.p,{children:["\n由于 laravel 9 中, 官方并没有提供 ",(0,s.jsx)(n.code,{children:"Pipeline"})," 门面类, 所以我们自己封装了一个 ",(0,s.jsx)(n.code,{children:"Pipeline"})," 类"]}),(0,s.jsx)(n.p,{children:"它继承了 Illuminate\\Pipeline\\Pipeline 类, 与 laravel 10 / 11 中一致"})]})]}),"\n",(0,s.jsxs)(n.h2,{id:"对组件进行管道封装",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#对组件进行管道封装",children:"#"}),"对组件进行管道封装"]}),"\n",(0,s.jsxs)(n.p,{children:["这里用 ",(0,s.jsx)(n.code,{children:"createButton"})," 来举例:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"protected function createButton(bool|string $dialog = false, string $dialogSize = 'md', string $title = '')\n{\n    // 原本的代码\n    // ...\n\n    $action->label($title)->icon('fa fa-add')->level('primary');\n\n    // 这里使用了 AdminPipeline::handle 方法\n    // 将处理完的 $action 作为原始数据传入管道\n    return AdminPipeline::handle(AdminPipeline::PIPE_CREATE_ACTION, $action);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["现在, 给 ",(0,s.jsx)(n.code,{children:"createButton"})," 添加管道:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n// file: app/Admin/bootstrap.php\n\nuse Slowlyo\\OwlAdmin\\Support\\Cores\\AdminPipeline;\n\nAdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION, // 这里是框架中定义的 key, 用于从上下文中设置/获取管道内容\n    [\n        // 这里 $schema 的类型取决于传入的原始数据, 这里传入的是个 Renderer, 所以能直接调用方法\n        function ($schema, $next) {\n            // 在这里就可以对框架默认的组件进行修改了\n            // 比如: \n            $schema->label('创建'); // 修改 label\n            $schema->level('success'); // 修改新增按钮的颜色为绿色\n            \n            // 甚至可以直接返回一个新对象, 比如:\n            $schema = amis()->DialogAction()->label('我是个按钮');\n\n            // 进入下一个管道\n            return $next($schema);\n        },\n        // ... \n        // 当然这里也可以以 class 的形式传入管道, 它会自动调用 handle 方法\n        RewriteCreateAction::class,\n    ]\n);\n"})}),"\n",(0,s.jsxs)(n.div,{className:"rspress-directive info",children:[(0,s.jsx)(n.div,{className:"rspress-directive-title",children:"为什么要在 bootstrap 中添加管道"}),(0,s.jsxs)(n.div,{className:"rspress-directive-content",children:[(0,s.jsxs)(n.p,{children:["\n从原理上来讲, 只要在执行 ",(0,s.jsx)(n.code,{children:"AdminPipeline::handle"})," 方法前, 把管道内容添加到上下文中, 就可以了"]}),(0,s.jsx)(n.p,{children:"框架内最适合的位置就是 bootstrap.php 中, 因为对组件的调整是全局性的, 所以推荐在这里统一处理"})]})]}),"\n",(0,s.jsxs)(n.h2,{id:"controller-可用的管道",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#controller-可用的管道",children:"#"}),"Controller 可用的管道"]}),"\n",(0,s.jsx)(n.p,{children:"框架内定义了以下管道:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/** @var string 基础页面 */\nconst PIPE_BASE_PAGE = 'pipe_schema_base_page';\n/** @var string 返回按钮 */\nconst PIPE_BACK_ACTION = 'pipe_schema_back_action';\n/** @var string 批量删除按钮 */\nconst PIPE_BULK_DELETE_ACTION = 'pipe_schema_bulk_delete_action';\n/** @var string 添加按钮 */\nconst PIPE_CREATE_ACTION = 'pipe_schema_create_action';\n/** @var string 编辑按钮 */\nconst PIPE_EDIT_ACTION = 'pipe_schema_edit_action';\n/** @var string 查看按钮 */\nconst PIPE_SHOW_ACTION = 'pipe_schema_show_action';\n/** @var string 删除按钮 */\nconst PIPE_DELETE_ACTION = 'pipe_schema_delete_action';\n/** @var string 行操作按钮 */\nconst PIPE_ROW_ACTIONS = 'pipe_schema_row_actions';\n/** @var string 基础筛选 */\nconst PIPE_BASE_FILTER = 'pipe_schema_base_filter';\n/** @var string 基础CRUD */\nconst PIPE_BASE_CRUD = 'pipe_schema_base_crud';\n/** @var string 基础头部工具栏 */\nconst PIPE_BASE_HEADER_TOOLBAR = 'pipe_schema_base_header_toolbar';\n/** @var string 基础表单 */\nconst PIPE_BASE_FORM = 'pipe_schema_base_form';\n/** @var string 基础详情 */\nconst PIPE_BASE_DETAIL = 'pipe_schema_base_detail';\n/** @var string 基础列表 */\nconst PIPE_BASE_LIST = 'pipe_schema_base_list';\n/** @var string 导出按钮 */\nconst PIPE_EXPORT_ACTION = 'pipe_schema_export_action';\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"给任意组件添加管道",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#给任意组件添加管道",children:"#"}),"给任意组件添加管道"]}),"\n",(0,s.jsxs)(n.h3,{id:"原理",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#原理",children:"#"}),"原理"]}),"\n",(0,s.jsxs)(n.p,{children:["在组件结构返回给前端前, 会调用 ",(0,s.jsx)(n.code,{children:"AdminPipeline::handle"})," 方法"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"\\Slowlyo\\OwlAdmin\\Support\\Cores\\AdminPipeline::handle(static::class, $this->amisSchema);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"使用",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用",children:"#"}),"使用"]}),"\n",(0,s.jsx)(n.p,{children:"你可以根据对应组件的类名来添加管道, 比如:"}),"\n",(0,s.jsx)(n.p,{children:"给文本框组件添加默认的最大长度:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n// file: app/Admin/bootstrap.php\n\nuse Slowlyo\\OwlAdmin\\Support\\Cores\\AdminPipeline;\n\nAdminPipeline::through(\n    \\Slowlyo\\OwlAdmin\\Renderers\\TextControl::class,\n    [\n        // 由于原始参数传入了 amisSchema, 所以这里的 $schema 类型为数组\n        function ($schema, $next) {\n            $schema['maxLength'] = 200;\n        \n            // 进入下一个管道\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.em,{children:"如果看完这篇文档, 你还没有理解 Pipeline, 请点击"})," ",(0,s.jsx)(n.a,{href:"https://www.baidu.com/s?wd=laravel%20pipeline",rel:"noopener noreferrer",target:"_blank",children:"这里"})]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(a,e)})):a(e)}let c=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["guide%2Fcrud%2Fcomponent-pipeline.md"]={toc:[{id:"什么是管道",text:"什么是管道",depth:2},{id:"框架中对管道的封装",text:"框架中对管道的封装",depth:2},{id:"adminpipeline",text:"AdminPipeline",depth:3},{id:"对组件进行管道封装",text:"对组件进行管道封装",depth:2},{id:"controller-可用的管道",text:"Controller 可用的管道",depth:2},{id:"给任意组件添加管道",text:"给任意组件添加管道",depth:2},{id:"原理",text:"原理",depth:3},{id:"使用",text:"使用",depth:3}],title:"组件管道",frontmatter:{}}}}]);