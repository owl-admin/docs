"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["4285"],{1350:function(e,n,i){i.r(n),i.d(n,{default:function(){return a}});var d=i(2676),s=i(453),r=i(8831);function h(e){let n=Object.assign({h1:"h1",a:"a",blockquote:"blockquote",p:"p",h2:"h2",h3:"h3",ol:"ol",li:"li",strong:"strong",code:"code",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4",ul:"ul"},(0,s.ah)(),e.components);return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.h1,{id:"组件管道",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件管道",children:"#"}),"组件管道"]}),"\n",(0,d.jsxs)(n.blockquote,{children:["\n",(0,d.jsx)(n.p,{children:"v3.9.3 支持"}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"管道概念",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道概念",children:"#"}),"管道概念"]}),"\n",(0,d.jsx)(n.p,{children:"组件管道允许你在组件渲染前对其进行链式处理和修改，就像流水线一样，组件依次经过多个处理器。每个组件在最终渲染前都会经过管道系统的处理，允许开发者在不修改核心代码的情况下扩展和定制组件行为。"}),"\n",(0,d.jsx)(r.Z,Object.assign({code:"flowchart LR\n    A[原始组件] --\x3e B[处理器1]\n    B --\x3e C[处理器2]\n    C --\x3e D[处理器3]\n    D --\x3e E[最终组件]"},{config:{}})),"\n",(0,d.jsxs)(n.h2,{id:"工作原理",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#工作原理",children:"#"}),"工作原理"]}),"\n",(0,d.jsxs)(n.h3,{id:"管道执行流程",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道执行流程",children:"#"}),"管道执行流程"]}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"组件创建"}),"：组件实例化并设置基础属性"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"管道检索"}),"：从上下文中获取注册的管道处理器"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"链式处理"}),"：依次执行每个处理器，每个处理器可以修改组件"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.strong,{children:"结果返回"}),"：返回经过所有处理器处理后的最终组件"]}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"核心机制",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心机制",children:"#"}),"核心机制"]}),"\n",(0,d.jsxs)(n.p,{children:["管道系统基于 Laravel 的 Pipeline 模式实现，通过 ",(0,d.jsx)(n.code,{children:"Admin::context()"})," 进行管道存储和检索："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 存储管道到上下文\nAdmin::context()->set($key, $pipes);\n\n// 从上下文检索管道\n$pipes = Admin::context()->get($key, []);\n\n// 执行管道处理\nadmin_pipeline($passable)->through($pipes)->then($callback);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"adminpipeline-核心类",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#adminpipeline-核心类",children:"#"}),"AdminPipeline 核心类"]}),"\n",(0,d.jsxs)(n.p,{children:["框架提供了 ",(0,d.jsx)(n.code,{children:"AdminPipeline"})," 类来管理组件管道："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"use Slowlyo\\OwlAdmin\\Support\\Cores\\AdminPipeline;\n\n// 注册管道处理器\nAdminPipeline::through($key, $pipes);\n\n// 执行管道处理\nAdminPipeline::handle($key, $passable, $callback);\n\n// 简化的执行方式（无回调）\nAdminPipeline::tap($key, $callback);\n\n// 动态生成管道键名\n$key = AdminPipeline::parseKey($suffix, $getChild);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"基础使用",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#基础使用",children:"#"}),"基础使用"]}),"\n",(0,d.jsxs)(n.h3,{id:"修改新增按钮",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改新增按钮",children:"#"}),"修改新增按钮"]}),"\n",(0,d.jsxs)(n.p,{children:["在 ",(0,d.jsx)(n.code,{children:"app/Admin/bootstrap.php"})," 中添加："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"use Slowlyo\\OwlAdmin\\Support\\Cores\\AdminPipeline;\n\nAdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        function ($schema, $next) {\n            // 修改按钮样式\n            $schema->label('创建')->level('success');\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"修改表单组件",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#修改表单组件",children:"#"}),"修改表单组件"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    \\Slowlyo\\OwlAdmin\\Renderers\\TextControl::class,\n    [\n        function ($schema, $next) {\n            // 为所有文本框添加默认最大长度\n            $schema['maxLength'] = 200;\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"可用管道常量",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#可用管道常量",children:"#"}),"可用管道常量"]}),"\n",(0,d.jsx)(n.p,{children:"框架内置了丰富的管道常量，覆盖了各种组件类型："}),"\n",(0,d.jsxs)(n.h3,{id:"页面级管道",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面级管道",children:"#"}),"页面级管道"]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"常量"}),(0,d.jsx)(n.th,{children:"说明"}),(0,d.jsx)(n.th,{children:"触发时机"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BASE_PAGE"})}),(0,d.jsx)(n.td,{children:"基础页面"}),(0,d.jsx)(n.td,{children:"页面组件渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BASE_LIST"})}),(0,d.jsx)(n.td,{children:"基础列表页"}),(0,d.jsx)(n.td,{children:"列表页面渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BASE_CRUD"})}),(0,d.jsx)(n.td,{children:"基础CRUD页"}),(0,d.jsx)(n.td,{children:"CRUD页面渲染时"})]})]})]}),"\n",(0,d.jsxs)(n.h3,{id:"表单级管道",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表单级管道",children:"#"}),"表单级管道"]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"常量"}),(0,d.jsx)(n.th,{children:"说明"}),(0,d.jsx)(n.th,{children:"触发时机"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BASE_FORM"})}),(0,d.jsx)(n.td,{children:"基础表单"}),(0,d.jsx)(n.td,{children:"表单组件渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BASE_DETAIL"})}),(0,d.jsx)(n.td,{children:"基础详情"}),(0,d.jsx)(n.td,{children:"详情页面渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BASE_FILTER"})}),(0,d.jsx)(n.td,{children:"基础筛选器"}),(0,d.jsx)(n.td,{children:"筛选表单渲染时"})]})]})]}),"\n",(0,d.jsxs)(n.h3,{id:"按钮级管道",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#按钮级管道",children:"#"}),"按钮级管道"]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"常量"}),(0,d.jsx)(n.th,{children:"说明"}),(0,d.jsx)(n.th,{children:"触发时机"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_CREATE_ACTION"})}),(0,d.jsx)(n.td,{children:"新增按钮"}),(0,d.jsx)(n.td,{children:"创建按钮渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_EDIT_ACTION"})}),(0,d.jsx)(n.td,{children:"编辑按钮"}),(0,d.jsx)(n.td,{children:"编辑按钮渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_SHOW_ACTION"})}),(0,d.jsx)(n.td,{children:"查看按钮"}),(0,d.jsx)(n.td,{children:"查看按钮渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_DELETE_ACTION"})}),(0,d.jsx)(n.td,{children:"删除按钮"}),(0,d.jsx)(n.td,{children:"删除按钮渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BACK_ACTION"})}),(0,d.jsx)(n.td,{children:"返回按钮"}),(0,d.jsx)(n.td,{children:"返回按钮渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_EXPORT_ACTION"})}),(0,d.jsx)(n.td,{children:"导出按钮"}),(0,d.jsx)(n.td,{children:"导出按钮渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BULK_DELETE_ACTION"})}),(0,d.jsx)(n.td,{children:"批量删除按钮"}),(0,d.jsx)(n.td,{children:"批量删除按钮渲染时"})]})]})]}),"\n",(0,d.jsxs)(n.h3,{id:"工具栏级管道",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#工具栏级管道",children:"#"}),"工具栏级管道"]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"常量"}),(0,d.jsx)(n.th,{children:"说明"}),(0,d.jsx)(n.th,{children:"触发时机"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_ROW_ACTIONS"})}),(0,d.jsx)(n.td,{children:"行操作按钮组"}),(0,d.jsx)(n.td,{children:"表格行操作渲染时"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:(0,d.jsx)(n.code,{children:"PIPE_BASE_HEADER_TOOLBAR"})}),(0,d.jsx)(n.td,{children:"基础头部工具栏"}),(0,d.jsx)(n.td,{children:"头部工具栏渲染时"})]})]})]}),"\n",(0,d.jsxs)(n.h3,{id:"组件级管道",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件级管道",children:"#"}),"组件级管道"]}),"\n",(0,d.jsx)(n.p,{children:"除了预定义常量外，每个组件类都可以作为管道键使用："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 为所有文本输入框添加处理器\nAdminPipeline::through(\n    \\Slowlyo\\OwlAdmin\\Renderers\\TextControl::class,\n    [$processor]\n);\n\n// 为所有选择框添加处理器\nAdminPipeline::through(\n    \\Slowlyo\\OwlAdmin\\Renderers\\SelectControl::class,\n    [$processor]\n);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"实际应用案例",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实际应用案例",children:"#"}),"实际应用案例"]}),"\n",(0,d.jsxs)(n.h3,{id:"1-统一按钮样式",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-统一按钮样式",children:"#"}),"1. 统一按钮样式"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 统一所有新增按钮的样式\nAdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        function ($schema, $next) {\n            $schema->icon('fa fa-plus-circle')\n                ->level('primary')\n                ->size('md');\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"2-添加权限控制",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-添加权限控制",children:"#"}),"2. 添加权限控制"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 为编辑按钮添加权限检查\nAdminPipeline::through(\n    AdminPipeline::PIPE_EDIT_ACTION,\n    [\n        function ($schema, $next) {\n            // 检查用户权限\n            if (!admin_user()->can('edit')) {\n                $schema->disabled(true)->disabledTip('无编辑权限');\n            }\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"3-表单字段增强",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-表单字段增强",children:"#"}),"3. 表单字段增强"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 为所有选择框添加搜索功能\nAdminPipeline::through(\n    \\Slowlyo\\OwlAdmin\\Renderers\\SelectControl::class,\n    [\n        function ($schema, $next) {\n            $schema['searchable'] = true;\n            $schema['clearable'] = true;\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"4-列表组件定制",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-列表组件定制",children:"#"}),"4. 列表组件定制"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 为所有列表添加默认配置\nAdminPipeline::through(\n    AdminPipeline::PIPE_BASE_CRUD,\n    [\n        function ($schema, $next) {\n            // 添加默认的表格配置\n            $schema->set('table.sticky', true)\n                ->set('table.resizable', true)\n                ->set('table.columnsTogglable', false);\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"管道处理器类",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道处理器类",children:"#"}),"管道处理器类"]}),"\n",(0,d.jsxs)(n.h3,{id:"创建处理器类",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建处理器类",children:"#"}),"创建处理器类"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Pipes;\n\nclass ButtonStylePipe\n{\n    public function handle($schema, $next)\n    {\n        // 统一按钮样式\n        if (method_exists($schema, 'level')) {\n            $schema->level('primary');\n        }\n        \n        if (method_exists($schema, 'size')) {\n            $schema->size('md');\n        }\n        \n        return $next($schema);\n    }\n}\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"使用处理器类",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#使用处理器类",children:"#"}),"使用处理器类"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        \\App\\Admin\\Pipes\\ButtonStylePipe::class,\n        function ($schema, $next) {\n            // 其他处理逻辑\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"管道链配置",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道链配置",children:"#"}),"管道链配置"]}),"\n",(0,d.jsxs)(n.h3,{id:"多个处理器组合",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#多个处理器组合",children:"#"}),"多个处理器组合"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        // 1. 基础样式处理\n        function ($schema, $next) {\n            $schema->level('primary')->size('md');\n            return $next($schema);\n        },\n        \n        // 2. 权限检查\n        function ($schema, $next) {\n            if (!admin_user()->can('create')) {\n                $schema->disabled(true);\n            }\n            return $next($schema);\n        },\n        \n        // 3. 图标设置\n        function ($schema, $next) {\n            $schema->icon('fa fa-plus');\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"条件处理",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#条件处理",children:"#"}),"条件处理"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_BASE_FORM,\n    [\n        function ($schema, $next) {\n            // 根据用户角色调整表单\n            $user = admin_user();\n            \n            if ($user->isAdmin()) {\n                // 管理员看到所有字段\n                $schema->mode('horizontal');\n            } else {\n                // 普通用户隐藏敏感字段\n                $schema->mode('normal');\n            }\n            \n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"高级功能",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高级功能",children:"#"}),"高级功能"]}),"\n",(0,d.jsxs)(n.h3,{id:"动态管道键生成",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态管道键生成",children:"#"}),"动态管道键生成"]}),"\n",(0,d.jsxs)(n.p,{children:["使用 ",(0,d.jsx)(n.code,{children:"parseKey()"})," 方法可以动态生成管道键："]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"class CustomController extends AdminController\n{\n    public function customButton()\n    {\n        // 生成基于当前类的管道键\n        $key = AdminPipeline::parseKey('custom_button');\n        // 结果：CustomController:custom_button\n\n        $button = amis()->Button()->label('自定义按钮');\n\n        return AdminPipeline::handle($key, $button);\n    }\n}\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"条件管道注册",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#条件管道注册",children:"#"}),"条件管道注册"]}),"\n",(0,d.jsx)(n.p,{children:"根据条件动态注册管道："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 根据用户角色注册不同的管道\nif (admin_user()->isAdmin()) {\n    AdminPipeline::through(\n        AdminPipeline::PIPE_CREATE_ACTION,\n        [AdminButtonPipe::class]\n    );\n} else {\n    AdminPipeline::through(\n        AdminPipeline::PIPE_CREATE_ACTION,\n        [UserButtonPipe::class]\n    );\n}\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"管道中断处理",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道中断处理",children:"#"}),"管道中断处理"]}),"\n",(0,d.jsx)(n.p,{children:"在管道中可以中断后续处理："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        function ($schema, $next) {\n            // 检查权限，如果无权限则不继续处理\n            if (!admin_user()->can('create')) {\n                return null; // 中断管道\n            }\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"管道数据传递",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道数据传递",children:"#"}),"管道数据传递"]}),"\n",(0,d.jsx)(n.p,{children:"在管道间传递额外数据："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_BASE_FORM,\n    [\n        function ($schema, $next) {\n            // 在组件上设置自定义数据\n            $schema->set('_pipeline_data', [\n                'user_role' => admin_user()->role,\n                'timestamp' => time(),\n            ]);\n\n            return $next($schema);\n        },\n        function ($schema, $next) {\n            // 在后续处理器中使用数据\n            $data = $schema->get('_pipeline_data');\n\n            if ($data['user_role'] === 'admin') {\n                $schema->mode('horizontal');\n            }\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"api-参考",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-参考",children:"#"}),"API 参考"]}),"\n",(0,d.jsxs)(n.h3,{id:"adminpipeline-类方法",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#adminpipeline-类方法",children:"#"}),"AdminPipeline 类方法"]}),"\n",(0,d.jsxs)(n.h4,{id:"throughkey-pipes",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#throughkey-pipes",children:"#"}),"through($key, $pipes)"]}),"\n",(0,d.jsx)(n.p,{children:"注册管道处理器到指定键。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"参数："})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$key"})," (string): 管道键名"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$pipes"})," (array): 处理器数组"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"示例："})}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through('my_key', [\n    MyPipe::class,\n    function($schema, $next) { return $next($schema); }\n]);\n"})}),"\n",(0,d.jsxs)(n.h4,{id:"handlekey-passable-callback--null",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#handlekey-passable-callback--null",children:"#"}),"handle($key, $passable, $callback = null)"]}),"\n",(0,d.jsx)(n.p,{children:"执行指定键的管道处理。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"参数："})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$key"})," (string): 管道键名"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$passable"})," (mixed): 要处理的对象"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$callback"})," (callable|null): 最终回调函数"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"返回："})," 处理后的对象"]}),"\n",(0,d.jsxs)(n.h4,{id:"tapkey-callback",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#tapkey-callback",children:"#"}),"tap($key, $callback)"]}),"\n",(0,d.jsx)(n.p,{children:"简化的管道执行，适用于无需传递对象的场景。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"参数："})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$key"})," (string): 管道键名"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$callback"})," (callable): 回调函数"]}),"\n"]}),"\n",(0,d.jsxs)(n.h4,{id:"parsekeysuffix---getchild--false",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#parsekeysuffix---getchild--false",children:"#"}),"parseKey($suffix = '', $getChild = false)"]}),"\n",(0,d.jsx)(n.p,{children:"动态生成管道键名。"}),"\n",(0,d.jsx)(n.p,{children:(0,d.jsx)(n.strong,{children:"参数："})}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$suffix"})," (string): 键名后缀"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$getChild"})," (bool): 是否获取子类名"]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:[(0,d.jsx)(n.strong,{children:"返回："})," 生成的键名"]}),"\n",(0,d.jsxs)(n.h3,{id:"处理器接口",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#处理器接口",children:"#"}),"处理器接口"]}),"\n",(0,d.jsx)(n.p,{children:"管道处理器可以是："}),"\n",(0,d.jsxs)(n.ol,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.strong,{children:"闭包函数"})}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"function ($schema, $next) {\n    // 处理逻辑\n    return $next($schema);\n}\n"})}),"\n",(0,d.jsxs)(n.ol,{start:"2",children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.strong,{children:"类方法"})}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"class MyPipe\n{\n    public function handle($schema, $next)\n    {\n        // 处理逻辑\n        return $next($schema);\n    }\n}\n"})}),"\n",(0,d.jsxs)(n.ol,{start:"3",children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.strong,{children:"可调用对象"})}),"\n"]}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"class MyPipe\n{\n    public function __invoke($schema, $next)\n    {\n        // 处理逻辑\n        return $next($schema);\n    }\n}\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"最佳实践",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最佳实践",children:"#"}),"最佳实践"]}),"\n",(0,d.jsxs)(n.h3,{id:"1-管道组织",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-管道组织",children:"#"}),"1. 管道组织"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["将相关的管道配置放在 ",(0,d.jsx)(n.code,{children:"app/Admin/bootstrap.php"})," 中"]}),"\n",(0,d.jsx)(n.li,{children:"使用类处理器处理复杂逻辑，闭包处理简单逻辑"}),"\n",(0,d.jsx)(n.li,{children:"保持管道处理器的单一职责原则"}),"\n",(0,d.jsx)(n.li,{children:"按功能模块组织管道配置"}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"2-性能考虑",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-性能考虑",children:"#"}),"2. 性能考虑"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"避免在管道中执行数据库查询，使用缓存或预加载"}),"\n",(0,d.jsx)(n.li,{children:"缓存重复计算的结果"}),"\n",(0,d.jsx)(n.li,{children:"合理控制管道数量，避免过度嵌套"}),"\n",(0,d.jsx)(n.li,{children:"在管道开始处进行条件检查，提前退出不必要的处理"}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"3-调试技巧",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-调试技巧",children:"#"}),"3. 调试技巧"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"在管道中添加日志记录便于调试"}),"\n",(0,d.jsx)(n.li,{children:"使用条件判断避免不必要的处理"}),"\n",(0,d.jsx)(n.li,{children:"测试管道的执行顺序和数据传递"}),"\n",(0,d.jsxs)(n.li,{children:["使用 ",(0,d.jsx)(n.code,{children:"dd()"})," 或 ",(0,d.jsx)(n.code,{children:"dump()"})," 查看管道中的数据状态"]}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"4-维护性",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-维护性",children:"#"}),"4. 维护性"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"为管道添加清晰的注释说明用途"}),"\n",(0,d.jsx)(n.li,{children:"使用有意义的管道键名，遵循命名规范"}),"\n",(0,d.jsx)(n.li,{children:"定期清理不再使用的管道配置"}),"\n",(0,d.jsx)(n.li,{children:"建立管道配置的文档记录"}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"5-安全性",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-安全性",children:"#"}),"5. 安全性"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"在管道中进行权限检查"}),"\n",(0,d.jsx)(n.li,{children:"验证输入数据的合法性"}),"\n",(0,d.jsx)(n.li,{children:"避免在管道中暴露敏感信息"}),"\n",(0,d.jsx)(n.li,{children:"对用户输入进行适当的过滤和转义"}),"\n"]}),"\n",(0,d.jsxs)(n.h2,{id:"实际应用场景",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实际应用场景",children:"#"}),"实际应用场景"]}),"\n",(0,d.jsxs)(n.h3,{id:"1-多租户系统",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-多租户系统",children:"#"}),"1. 多租户系统"]}),"\n",(0,d.jsx)(n.p,{children:"为不同租户定制组件行为："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 在 app/Admin/bootstrap.php 中\nAdminPipeline::through(\n    AdminPipeline::PIPE_BASE_CRUD,\n    [\n        function ($schema, $next) {\n            $tenant = admin_user()->tenant;\n\n            // 根据租户配置调整表格\n            if ($tenant->type === 'enterprise') {\n                $schema->set('table.exportable', true);\n                $schema->set('table.printable', true);\n            }\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"2-主题定制",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-主题定制",children:"#"}),"2. 主题定制"]}),"\n",(0,d.jsx)(n.p,{children:"根据用户偏好调整组件样式："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        function ($schema, $next) {\n            $theme = admin_user()->preference('theme', 'default');\n\n            switch ($theme) {\n                case 'dark':\n                    $schema->level('secondary');\n                    break;\n                case 'colorful':\n                    $schema->level('success');\n                    break;\n                default:\n                    $schema->level('primary');\n            }\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"3-国际化支持",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-国际化支持",children:"#"}),"3. 国际化支持"]}),"\n",(0,d.jsx)(n.p,{children:"根据语言环境调整组件："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_BASE_FORM,\n    [\n        function ($schema, $next) {\n            $locale = app()->getLocale();\n\n            if ($locale === 'ar') {\n                // 阿拉伯语从右到左布局\n                $schema->direction('rtl');\n            }\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"4-移动端适配",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-移动端适配",children:"#"}),"4. 移动端适配"]}),"\n",(0,d.jsx)(n.p,{children:"根据设备类型调整组件："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_BASE_CRUD,\n    [\n        function ($schema, $next) {\n            $isMobile = request()->header('User-Agent') &&\n                       preg_match('/Mobile|Android|iPhone/', request()->header('User-Agent'));\n\n            if ($isMobile) {\n                $schema->set('table.columnsTogglable', true);\n                $schema->set('table.affixHeader', false);\n            }\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"常见问题",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#常见问题",children:"#"}),"常见问题"]}),"\n",(0,d.jsxs)(n.h3,{id:"q-管道处理器的执行顺序是什么",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-管道处理器的执行顺序是什么",children:"#"}),"Q: 管道处理器的执行顺序是什么？"]}),"\n",(0,d.jsx)(n.p,{children:"A: 管道处理器按照注册时数组的顺序依次执行。如果同一个键注册了多次，后注册的会覆盖前面的。"}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 执行顺序：Pipe1 -> Pipe2 -> Pipe3\nAdminPipeline::through('key', [Pipe1::class, Pipe2::class, Pipe3::class]);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"q-如何在管道中获取当前请求信息",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何在管道中获取当前请求信息",children:"#"}),"Q: 如何在管道中获取当前请求信息？"]}),"\n",(0,d.jsx)(n.p,{children:"A: 可以直接使用 Laravel 的辅助函数："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        function ($schema, $next) {\n            $route = request()->route()->getName();\n            $user = admin_user();\n            $params = request()->all();\n\n            // 基于请求信息处理组件\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"q-管道处理器中可以抛出异常吗",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-管道处理器中可以抛出异常吗",children:"#"}),"Q: 管道处理器中可以抛出异常吗？"]}),"\n",(0,d.jsx)(n.p,{children:"A: 可以，但建议谨慎使用。异常会中断管道执行："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        function ($schema, $next) {\n            if (!admin_user()->can('create')) {\n                throw new \\Exception('无创建权限');\n            }\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"q-如何调试管道执行过程",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何调试管道执行过程",children:"#"}),"Q: 如何调试管道执行过程？"]}),"\n",(0,d.jsx)(n.p,{children:"A: 可以在管道中添加日志或使用调试工具："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"AdminPipeline::through(\n    AdminPipeline::PIPE_CREATE_ACTION,\n    [\n        function ($schema, $next) {\n            \\Log::info('管道执行', [\n                'schema_type' => get_class($schema),\n                'user_id' => admin_user()->id,\n            ]);\n\n            return $next($schema);\n        },\n    ]\n);\n"})}),"\n",(0,d.jsxs)(n.h3,{id:"q-管道会影响性能吗",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-管道会影响性能吗",children:"#"}),"Q: 管道会影响性能吗？"]}),"\n",(0,d.jsx)(n.p,{children:"A: 适度使用不会显著影响性能。建议："}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"避免在管道中执行重型操作"}),"\n",(0,d.jsx)(n.li,{children:"使用缓存减少重复计算"}),"\n",(0,d.jsx)(n.li,{children:"合理控制管道数量"}),"\n"]}),"\n",(0,d.jsxs)(n.h3,{id:"q-如何清除已注册的管道",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#q-如何清除已注册的管道",children:"#"}),"Q: 如何清除已注册的管道？"]}),"\n",(0,d.jsx)(n.p,{children:"A: 可以通过上下文管理器清除："}),"\n",(0,d.jsx)(n.pre,{children:(0,d.jsx)(n.code,{className:"language-php",meta:"",children:"// 清除特定键的管道\nAdmin::context()->forget('pipe_key');\n\n// 清除所有管道\nAdmin::context()->flush();\n"})}),"\n",(0,d.jsxs)(n.h2,{id:"扩展阅读",children:[(0,d.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展阅读",children:"#"}),"扩展阅读"]}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"https://laravel.com/docs/pipeline",rel:"noopener noreferrer",target:"_blank",children:"Laravel Pipeline 文档"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"/docs/guide/basic/frame#%E7%BB%84%E4%BB%B6%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84",children:"组件系统架构"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"/docs/guide/basic/permission",children:"权限控制"})}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.a,{href:"/docs/guide/basic/context",children:"上下文管理"})}),"\n"]})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,d.jsx)(n,Object.assign({},e,{children:(0,d.jsx)(h,e)})):h(e)}let a=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["guide%2Fcrud%2Fcomponent-pipeline.md"]={toc:[{id:"管道概念",text:"管道概念",depth:2},{id:"工作原理",text:"工作原理",depth:2},{id:"管道执行流程",text:"管道执行流程",depth:3},{id:"核心机制",text:"核心机制",depth:3},{id:"adminpipeline-核心类",text:"AdminPipeline 核心类",depth:2},{id:"基础使用",text:"基础使用",depth:2},{id:"修改新增按钮",text:"修改新增按钮",depth:3},{id:"修改表单组件",text:"修改表单组件",depth:3},{id:"可用管道常量",text:"可用管道常量",depth:2},{id:"页面级管道",text:"页面级管道",depth:3},{id:"表单级管道",text:"表单级管道",depth:3},{id:"按钮级管道",text:"按钮级管道",depth:3},{id:"工具栏级管道",text:"工具栏级管道",depth:3},{id:"组件级管道",text:"组件级管道",depth:3},{id:"实际应用案例",text:"实际应用案例",depth:2},{id:"1-统一按钮样式",text:"1. 统一按钮样式",depth:3},{id:"2-添加权限控制",text:"2. 添加权限控制",depth:3},{id:"3-表单字段增强",text:"3. 表单字段增强",depth:3},{id:"4-列表组件定制",text:"4. 列表组件定制",depth:3},{id:"管道处理器类",text:"管道处理器类",depth:2},{id:"创建处理器类",text:"创建处理器类",depth:3},{id:"使用处理器类",text:"使用处理器类",depth:3},{id:"管道链配置",text:"管道链配置",depth:2},{id:"多个处理器组合",text:"多个处理器组合",depth:3},{id:"条件处理",text:"条件处理",depth:3},{id:"高级功能",text:"高级功能",depth:2},{id:"动态管道键生成",text:"动态管道键生成",depth:3},{id:"条件管道注册",text:"条件管道注册",depth:3},{id:"管道中断处理",text:"管道中断处理",depth:3},{id:"管道数据传递",text:"管道数据传递",depth:3},{id:"api-参考",text:"API 参考",depth:2},{id:"adminpipeline-类方法",text:"AdminPipeline 类方法",depth:3},{id:"throughkey-pipes",text:"through($key, $pipes)",depth:4},{id:"handlekey-passable-callback--null",text:"handle($key, $passable, $callback = null)",depth:4},{id:"tapkey-callback",text:"tap($key, $callback)",depth:4},{id:"parsekeysuffix---getchild--false",text:"parseKey($suffix = '', $getChild = false)",depth:4},{id:"处理器接口",text:"处理器接口",depth:3},{id:"最佳实践",text:"最佳实践",depth:2},{id:"1-管道组织",text:"1. 管道组织",depth:3},{id:"2-性能考虑",text:"2. 性能考虑",depth:3},{id:"3-调试技巧",text:"3. 调试技巧",depth:3},{id:"4-维护性",text:"4. 维护性",depth:3},{id:"5-安全性",text:"5. 安全性",depth:3},{id:"实际应用场景",text:"实际应用场景",depth:2},{id:"1-多租户系统",text:"1. 多租户系统",depth:3},{id:"2-主题定制",text:"2. 主题定制",depth:3},{id:"3-国际化支持",text:"3. 国际化支持",depth:3},{id:"4-移动端适配",text:"4. 移动端适配",depth:3},{id:"常见问题",text:"常见问题",depth:2},{id:"q-管道处理器的执行顺序是什么",text:"Q: 管道处理器的执行顺序是什么？",depth:3},{id:"q-如何在管道中获取当前请求信息",text:"Q: 如何在管道中获取当前请求信息？",depth:3},{id:"q-管道处理器中可以抛出异常吗",text:"Q: 管道处理器中可以抛出异常吗？",depth:3},{id:"q-如何调试管道执行过程",text:"Q: 如何调试管道执行过程？",depth:3},{id:"q-管道会影响性能吗",text:"Q: 管道会影响性能吗？",depth:3},{id:"q-如何清除已注册的管道",text:"Q: 如何清除已注册的管道？",depth:3},{id:"扩展阅读",text:"扩展阅读",depth:2}],title:"组件管道",frontmatter:{}}}}]);