"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["3545"],{1173:function(e,n,r){r.r(n),r.d(n,{default:function(){return t}});var i=r(2676),s=r(453);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",ul:"ul",li:"li",code:"code",pre:"pre"},(0,s.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"改",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#改",children:"#"}),"改"]}),"\n",(0,i.jsxs)(n.h2,{id:"form-方法构建编辑表单",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#form-方法构建编辑表单",children:"#"}),"form 方法构建编辑表单"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["页面模式下","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["通过访问 ",(0,i.jsx)(n.code,{children:"edit"})," 路由, 进入到 ",(0,i.jsx)(n.code,{children:"AdminController"})," 方法中的 ",(0,i.jsx)(n.code,{children:"edit"})," 方法"]}),"\n",(0,i.jsxs)(n.li,{children:["在 ",(0,i.jsx)(n.code,{children:"edit"})," 方法中, 调用 ",(0,i.jsx)(n.code,{children:"form"})," 方法, 并返回新增页面的结构"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["弹窗模式下","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["在访问 ",(0,i.jsx)(n.code,{children:"rowEditButton"})," 方法时, 会调用 ",(0,i.jsx)(n.code,{children:"form"})," 方法, 并返回编辑表单的结构"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 前端 amis 通过识别 form 方法返回的结构来构建表单\n * \n * @param bool $isEdit 用于判断是否为编辑\n * \n * @return Form\n */\npublic function form($isEdit)\n{\n    // baseForm 方法中, 处理了表单的一些基础内容\n    // 可以传入一个 bool 参数, 控制在表单提交成功后是否返回上一页\n    return $this->baseForm()->body([\n        TextControl::make()->name('name')->label('Name'),\n        TextControl::make()->name('email')->label('Email'),\n    ]);\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"update-方法处理编辑表单提交",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#update-方法处理编辑表单提交",children:"#"}),"update 方法处理编辑表单提交"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["提交的流程","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["前端渲染编辑表单 (里面包含了提交的路径)","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["页面模式下, 提交 ",(0,i.jsx)(n.code,{children:"api"})," 和查询回显数据的 ",(0,i.jsx)(n.code,{children:"api"})," 在 ",(0,i.jsx)(n.code,{children:"AdminController"})," 下的 ",(0,i.jsx)(n.code,{children:"edit"})," 方法中进行了设置"]}),"\n",(0,i.jsxs)(n.li,{children:["弹窗模式下, 提交 ",(0,i.jsx)(n.code,{children:"api"})," 和查询回显数据的 ",(0,i.jsx)(n.code,{children:"api"})," 在 ",(0,i.jsx)(n.code,{children:"rowEditButton"})," 方法中进行了设置"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["提交到后端, 后端会调用 ",(0,i.jsx)(n.code,{children:"update"})," 方法, 并进行相应的处理"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AdminController"})," 中的 ",(0,i.jsx)(n.code,{children:"update"})," 方法, 可以满足大多数的编辑表单提交需求, 但是如果有特殊的需求, 也可以重写该方法"]}),"\n",(0,i.jsxs)(n.li,{children:["大多数情况下, 重写对应 ",(0,i.jsx)(n.code,{children:"service"})," 中的 ",(0,i.jsx)(n.code,{children:"update"})," 方法即可"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 编辑保存\n *\n * @param Request $request\n *\n * @return JsonResponse|JsonResource\n */\npublic function update(Request $request)\n{\n    $result = $this->service->update($this->getPrimaryValue($request), $request->all());\n\n    return $this->autoResponse($result, __('admin.save'));\n}\n\n/**\n * service 中实际处理修改逻辑的方法, 可以在自己的 service 中重写该方法\n *\n * @param $primaryKey\n * @param $data\n *\n * @return bool\n */\npublic function update($primaryKey, $data): bool\n{\n    $columns = $this->getTableColumns();\n    $model   = $this->query()->whereKey($primaryKey)->first();\n\n    foreach ($data as $k => $v) {\n        if (!in_array($k, $columns)) {\n            continue;\n        }\n\n        $model->setAttribute($k, $v);\n    }\n\n    return $model->save();\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"数据回显",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据回显",children:"#"}),"数据回显"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["请求数据的 ",(0,i.jsx)(n.code,{children:"api"})," 会携带 ",(0,i.jsx)(n.code,{children:"_action=getData"})," 的参数, 从而调用 ",(0,i.jsx)(n.code,{children:"service"})," 中的 ",(0,i.jsx)(n.code,{children:"getEditData"})," 方法"]}),"\n",(0,i.jsx)(n.li,{children:"如果是弹窗模式, 编辑表单可以从列表中获取数据并回显"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 获取编辑页面\n *\n * @param $id\n *\n * @return JsonResponse|JsonResource\n */\npublic function edit($id)\n{\n    $this->isEdit = true;\n\n    if ($this->actionOfGetData()) {\n        return $this->response()->success($this->service->getEditData($id));\n    }\n\n    // ...\n}\n\n/**\n * 编辑 获取数据 (Service 中)\n *\n * @param $id\n *\n * @return Model|\\Illuminate\\Database\\Eloquent\\Collection|Builder|array|null\n */\npublic function getEditData($id)\n{\n    $model = $this->getModel();\n\n    return $this->query()->find($id)->makeHidden([$model->getCreatedAtColumn(), $model->getUpdatedAtColumn()]);\n}\n"})})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,s.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(d,e)})):d(e)}let t=l;l.__RSPRESS_PAGE_META={},l.__RSPRESS_PAGE_META["guide%2Fcrud%2Fupdate.md"]={toc:[{id:"form-方法构建编辑表单",text:"form 方法构建编辑表单",depth:2},{id:"update-方法处理编辑表单提交",text:"update 方法处理编辑表单提交",depth:2},{id:"数据回显",text:"数据回显",depth:2}],title:"改",frontmatter:{}}}}]);