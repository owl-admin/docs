"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["247"],{4032:function(e,n,r){r.r(n),r.d(n,{default:function(){return l}});var t=r(2676),a=r(453),i=r(8831);function s(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",code:"code",pre:"pre",strong:"strong",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4",blockquote:"blockquote"},(0,a.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.h1,{id:"查询功能详解",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#查询功能详解",children:"#"}),"查询功能详解"]}),"\n",(0,t.jsxs)(n.h2,{id:"查询流程概览",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#查询流程概览",children:"#"}),"查询流程概览"]}),"\n",(0,t.jsx)(n.p,{children:"查询功能包括列表展示和详情查看两个核心部分："}),"\n",(0,t.jsx)(i.Z,Object.assign({code:"sequenceDiagram\n    participant U as 用户\n    participant F as 前端 Amis\n    participant C as AdminController\n    participant S as AdminService\n    participant M as Model\n    participant D as 数据库\n\n    Note over U,D: 列表查询流程\n    U->>F: 访问列表页面\n    F->>C: GET /resource\n    C->>C: list() 构建页面结构\n    C->>F: 返回 CRUD 组件配置\n    F->>C: GET /resource?_action=getData\n    C->>S: list() 获取数据\n    S->>S: listQuery() 构建查询\n    S->>M: 执行查询\n    M->>D: SQL 查询\n    D->>M: 返回数据\n    M->>S: 返回结果\n    S->>C: 格式化数据\n    C->>F: JSON 响应\n    F->>U: 渲染列表\n\n    Note over U,D: 详情查询流程\n    U->>F: 点击查看详情\n    F->>C: GET /resource/{id}?_action=getData\n    C->>S: getDetail(id)\n    S->>M: 查询单条记录\n    M->>D: SQL 查询\n    D->>M: 返回数据\n    M->>S: 返回结果\n    S->>C: 返回详情数据\n    C->>F: JSON 响应\n    F->>U: 显示详情"},{config:{}})),"\n",(0,t.jsxs)(n.h2,{id:"列表功能详解",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#列表功能详解",children:"#"}),"列表功能详解"]}),"\n",(0,t.jsxs)(n.h3,{id:"index-方法的多重职责",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#index-方法的多重职责",children:"#"}),"index 方法的多重职责"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"index"})," 方法通过 ",(0,t.jsx)(n.code,{children:"_action"})," 参数处理不同类型的请求："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"public function index()\n{\n    // 获取列表数据: ?_action=getData\n    if ($this->actionOfGetData()) {\n        return $this->response()->success($this->service->list());\n    }\n\n    // 导出数据: ?_action=export\n    if ($this->actionOfExport()) {\n        return $this->export();\n    }\n\n    // 默认返回页面结构（无 _action 参数）\n    return $this->response()->success($this->list());\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"请求类型对应关系："})}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{align:"left",children:"请求类型"}),(0,t.jsx)(n.th,{align:"left",children:"URL 示例"}),(0,t.jsx)(n.th,{align:"left",children:"处理方法"}),(0,t.jsx)(n.th,{align:"left",children:"返回内容"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"页面结构"}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"/users"})}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"list()"})}),(0,t.jsx)(n.td,{align:"left",children:"CRUD 组件配置"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"列表数据"}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"/users?_action=getData"})}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"service->list()"})}),(0,t.jsx)(n.td,{align:"left",children:"分页数据"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"导出数据"}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"/users?_action=export"})}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"export()"})}),(0,t.jsx)(n.td,{align:"left",children:"导出文件"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"快速编辑"}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"post:/users?_action=quickEdit"})}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"service->quickEdit()"})}),(0,t.jsx)(n.td,{align:"left",children:"操作结果"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{align:"left",children:"快速编辑单项"}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"post:/users?_action=quickEditItem"})}),(0,t.jsx)(n.td,{align:"left",children:(0,t.jsx)(n.code,{children:"service->quickEditItem()"})}),(0,t.jsx)(n.td,{align:"left",children:"操作结果"})]})]})]}),"\n",(0,t.jsxs)(n.h3,{id:"list-方法构建页面结构",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#list-方法构建页面结构",children:"#"}),"list 方法构建页面结构"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"list"})," 方法负责构建完整的 CRUD 页面结构："]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"public function list()\n{\n    $crud = $this->baseCRUD()\n        // 配置筛选器\n        ->filter($this->buildFilter())\n        // 配置头部工具栏\n        ->headerToolbar($this->buildHeaderToolbar())\n        // 配置表格列\n        ->columns($this->buildColumns())\n        // 配置批量操作\n        ->bulkActions($this->buildBulkActions())\n        // 配置底部工具栏\n        ->footerToolbar($this->buildFooterToolbar());\n\n    return $this->baseList($crud);\n}\n\n/**\n * 构建筛选器\n */\nprotected function buildFilter()\n{\n    return $this->baseFilter()->body([\n        // 文本搜索\n        amis()->TextControl('keyword', '关键词')\n            ->size('md')\n            ->clearable()\n            ->placeholder('请输入关键词搜索'),\n\n        // 状态筛选\n        amis()->SelectControl('status', '状态')\n            ->options([\n                ['label' => '全部', 'value' => ''],\n                ['label' => '启用', 'value' => 1],\n                ['label' => '禁用', 'value' => 0],\n            ])\n            ->clearable(),\n\n        // 日期范围\n        amis()->DateRangeControl('created_at', '创建时间')\n            ->format('YYYY-MM-DD')\n            ->clearable(),\n\n        // 分类筛选\n        amis()->SelectControl('category_id', '分类')\n            ->source('/api/categories')\n            ->clearable(),\n    ]);\n}\n\n/**\n * 构建头部工具栏\n */\nprotected function buildHeaderToolbar()\n{\n    return [\n        $this->createButton('dialog'),  // 新增按钮\n        'bulkActions',                  // 批量操作\n        amis('reload')->align('right'), // 刷新按钮\n        amis('filter-toggler')->align('right'), // 筛选器切换\n        $this->exportAction(),          // 导出按钮\n    ];\n}\n\n/**\n * 构建表格列\n */\nprotected function buildColumns()\n{\n    return [\n        // 选择列\n        amis()->TableColumn('id', 'ID')\n            ->sortable()\n            ->width(80),\n\n        // 基础信息列\n        amis()->TableColumn('title', '标题')\n            ->searchable()\n            ->copyable(),\n\n        // 关联数据列\n        amis()->TableColumn('category.name', '分类')\n            ->placeholder('未分类'),\n\n        // 状态列（映射显示）\n        amis()->TableColumn('status', '状态')\n            ->type('mapping')\n            ->map([\n                '1' => '<span class=\"label label-success\">启用</span>',\n                '0' => '<span class=\"label label-default\">禁用</span>',\n            ]),\n\n        // 数值列\n        amis()->TableColumn('price', '价格')\n            ->type('number')\n            ->precision(2)\n            ->prefix('\xa5'),\n\n        // 时间列\n        amis()->TableColumn('created_at', '创建时间')\n            ->type('datetime')\n            ->format('YYYY-MM-DD HH:mm:ss')\n            ->sortable(),\n\n        // 操作列\n        $this->rowActions('dialog'),\n    ];\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"高级列表配置",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#高级列表配置",children:"#"}),"高级列表配置"]}),"\n",(0,t.jsxs)(n.h4,{id:"表格样式定制",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#表格样式定制",children:"#"}),"表格样式定制"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"$crud = $this->baseCRUD()\n    // 表格样式\n    ->className('table-responsive')\n    ->tableClassName('table table-striped')\n\n    // 分页配置\n    ->perPage(20)\n    ->perPageAvailable([10, 20, 50, 100])\n    ->alwaysShowPagination()\n\n    // 头部固定\n    ->affixHeader(true)\n\n    // 筛选器配置\n    ->filterTogglable(true)\n    ->filterDefaultVisible(false)\n\n    // 加载配置\n    ->loadDataOnce(false)\n    ->syncLocation(true);\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"条件渲染",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#条件渲染",children:"#"}),"条件渲染"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"amis()->TableColumn('actions', '操作')\n    ->type('operation')\n    ->buttons([\n        amis()->Button('编辑')\n            ->level('link')\n            ->visibleOn('${status == 1}'), // 仅启用状态显示\n\n        amis()->Button('删除')\n            ->level('link')\n            ->className('text-danger')\n            ->disabledOn('${is_system == 1}'), // 系统数据禁用删除\n    ]),\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"数据查询处理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据查询处理",children:"#"}),"数据查询处理"]}),"\n",(0,t.jsxs)(n.h3,{id:"service-层查询方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#service-层查询方法",children:"#"}),"Service 层查询方法"]}),"\n",(0,t.jsxs)(n.h4,{id:"list-方法分页查询",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#list-方法分页查询",children:"#"}),"list 方法（分页查询）"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 获取分页列表数据\n *\n * @return array\n */\npublic function list()\n{\n    $query = $this->listQuery();\n\n    // 分页查询\n    $perPage = request()->input('perPage', 20);\n    $list = $query->paginate($perPage);\n\n    // 格式化数据\n    $items = $this->formatRows($list->items());\n    $total = $list->total();\n\n    return compact('items', 'total');\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"listquery-方法查询构建",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#listquery-方法查询构建",children:"#"}),"listQuery 方法（查询构建）"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 构建列表查询条件\n *\n * @return Builder\n */\npublic function listQuery()\n{\n    $query = $this->query();\n\n    // 处理排序\n    $this->sortable($query);\n\n    // 自动加载关联关系\n    $this->loadRelations($query);\n\n    // 处理搜索条件\n    $this->searchable($query);\n\n    // 添加自定义关联\n    $this->addRelations($query, 'list');\n\n    return $query;\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"搜索条件处理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#搜索条件处理",children:"#"}),"搜索条件处理"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 处理搜索条件\n *\n * @param Builder $query\n */\npublic function searchable($query)\n{\n    // 关键词搜索\n    $keyword = request('keyword');\n    if ($keyword) {\n        $query->where(function($q) use ($keyword) {\n            $q->where('title', 'like', \"%{$keyword}%\")\n              ->orWhere('description', 'like', \"%{$keyword}%\");\n        });\n    }\n\n    // 状态筛选\n    $status = request('status');\n    if ($status !== null && $status !== '') {\n        $query->where('status', $status);\n    }\n\n    // 分类筛选\n    $categoryId = request('category_id');\n    if ($categoryId) {\n        $query->where('category_id', $categoryId);\n    }\n\n    // 日期范围筛选\n    $createdAt = request('created_at');\n    if ($createdAt) {\n        $dates = explode(',', $createdAt);\n        if (count($dates) === 2) {\n            $query->whereBetween('created_at', [\n                $dates[0] . ' 00:00:00',\n                $dates[1] . ' 23:59:59',\n            ]);\n        }\n    }\n\n    // 价格范围筛选\n    $priceMin = request('price_min');\n    $priceMax = request('price_max');\n    if ($priceMin !== null) {\n        $query->where('price', '>=', $priceMin);\n    }\n    if ($priceMax !== null) {\n        $query->where('price', '<=', $priceMax);\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"排序处理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#排序处理",children:"#"}),"排序处理"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 处理排序\n *\n * @param Builder $query\n */\npublic function sortable($query)\n{\n    // 当请求中包含 orderBy 与 orderDir 时使用请求排序，否则按默认字段倒序\n    if (request()->orderBy && request()->orderDir) {\n        $query->orderBy(request()->orderBy, request()->orderDir ?? 'asc');\n    } else {\n        $query->orderByDesc($this->sortColumn());\n    }\n}\n\n/**\n * 默认排序字段（与内置实现保持一致）\n */\npublic function sortColumn()\n{\n    $updatedAtColumn = $this->getModel()->getUpdatedAtColumn();\n\n    if ($this->hasColumn($updatedAtColumn)) {\n        return $updatedAtColumn;\n    }\n\n    if ($this->hasColumn($this->getModel()->getKeyName())) {\n        return $this->getModel()->getKeyName();\n    }\n\n    return \\Illuminate\\Support\\Arr::first($this->getTableColumns());\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"关联查询优化",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#关联查询优化",children:"#"}),"关联查询优化"]}),"\n",(0,t.jsxs)(n.h4,{id:"预加载关联关系",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#预加载关联关系",children:"#"}),"预加载关联关系"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 添加关联关系\n *\n * @param Builder $query\n * @param string $scene\n */\npublic function addRelations($query, string $scene = 'list')\n{\n    switch ($scene) {\n        case 'list':\n            $query->with([\n                'category:id,name',\n                'user:id,username',\n                'tags:id,name',\n            ]);\n            break;\n\n        case 'detail':\n            $query->with([\n                'category',\n                'user',\n                'tags',\n                'comments.user:id,username',\n            ]);\n            break;\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.h4,{id:"动态关联加载",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态关联加载",children:"#"}),"动态关联加载"]}),"\n",(0,t.jsxs)(n.p,{children:["AdminService 已内置 ",(0,t.jsx)(n.code,{children:"loadRelations()"}),"，会根据当前控制器 ",(0,t.jsx)(n.code,{children:"list()"})," 返回的 ",(0,t.jsx)(n.code,{children:"TableColumn"})," 配置中带点（",(0,t.jsx)(n.code,{children:"."}),"）的字段名自动推导并执行 ",(0,t.jsx)(n.code,{children:"$query->with(...)"}),"，无需手动重写。你仍可通过重写 ",(0,t.jsx)(n.code,{children:"addRelations($query, 'list')"})," 追加自定义关联。"]}),"\n",(0,t.jsxs)(n.h3,{id:"数据格式化",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据格式化",children:"#"}),"数据格式化"]}),"\n",(0,t.jsxs)(n.h4,{id:"formatrows-方法",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#formatrows-方法",children:"#"}),"formatRows 方法"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 格式化列表数据\n *\n * @param array $rows\n * @return array\n */\npublic function formatRows(array $rows)\n{\n    return array_map(function($row) {\n        // 兼容模型实例与数组\n        if ($row instanceof \\Illuminate\\Database\\Eloquent\\Model) {\n            $row = $row->toArray();\n        }\n\n        // 格式化价格\n        if (isset($row['price'])) {\n            $row['price_formatted'] = '\xa5' . number_format($row['price'], 2);\n        }\n\n        // 格式化状态\n        if (isset($row['status'])) {\n            $row['status_text'] = $row['status'] ? '启用' : '禁用';\n        }\n\n        // 添加计算字段（确保有 created_at）\n        if (!empty($row['created_at'])) {\n            $row['days_since_created'] = now()->diffInDays($row['created_at']);\n        }\n\n        // 处理敏感信息\n        unset($row['password']);\n\n        return $row;\n    }, $rows);\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"详情功能详解",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#详情功能详解",children:"#"}),"详情功能详解"]}),"\n",(0,t.jsxs)(n.h3,{id:"show-方法处理",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#show-方法处理",children:"#"}),"show 方法处理"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 详情页面处理\n *\n * @param mixed $id\n * @return JsonResponse|JsonResource\n */\npublic function show($id)\n{\n    // 获取详情数据\n    if ($this->actionOfGetData()) {\n        return $this->response()->success($this->service->getDetail($id));\n    }\n\n    // 构建详情页面\n    $detail = amis()->Card()\n        ->className('base-form')\n        ->header(['title' => admin_trans('admin.detail')])\n        ->body($this->detail($id))\n        ->toolbar([$this->backButton()]);\n\n    $page = $this->basePage()->body($detail);\n\n    return $this->response()->success($page);\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"detail-方法构建",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#detail-方法构建",children:"#"}),"detail 方法构建"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 构建详情页面结构\n *\n * @param mixed $id\n * @return \\Slowlyo\\OwlAdmin\\Renderers\\Form\n */\npublic function detail($id)\n{\n    return $this->baseDetail()->body([\n        // 基础信息组\n        amis()->GroupControl()->label('基础信息')->body([\n            amis()->StaticExactControl('id', 'ID'),\n            amis()->StaticExactControl('title', '标题'),\n            amis()->StaticExactControl('category.name', '分类'),\n        ]),\n\n        // 详细信息组\n        amis()->GroupControl()->label('详细信息')->body([\n            amis()->StaticExactControl('description', '描述')\n                ->type('html'),\n            amis()->StaticExactControl('price', '价格')\n                ->type('number')\n                ->precision(2)\n                ->prefix('\xa5'),\n        ]),\n\n        // 状态信息组\n        amis()->GroupControl()->label('状态信息')->body([\n            amis()->StaticExactControl('status', '状态')\n                ->type('mapping')\n                ->map([\n                    '1' => '<span class=\"label label-success\">启用</span>',\n                    '0' => '<span class=\"label label-default\">禁用</span>',\n                ]),\n            amis()->StaticExactControl('created_at', '创建时间')\n                ->type('datetime'),\n            amis()->StaticExactControl('updated_at', '更新时间')\n                ->type('datetime'),\n        ]),\n\n        // 关联数据组\n        amis()->GroupControl()->label('关联数据')->body([\n            amis()->StaticExactControl('tags', '标签')\n                ->type('each')\n                ->items(amis()->Tpl()->tpl('${name}')),\n        ]),\n    ]);\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"service-详情查询",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#service-详情查询",children:"#"}),"Service 详情查询"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 获取详情数据\n *\n * @param mixed $id\n * @return Model|null\n */\npublic function getDetail($id)\n{\n    $query = $this->query();\n\n    // 添加关联关系\n    $this->addRelations($query, 'detail');\n\n    $model = $query->find($id);\n\n    if (!$model) {\n        admin_abort('记录不存在');\n    }\n\n    return $model;\n}\n"})}),"\n",(0,t.jsxs)(n.h2,{id:"性能优化策略",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能优化策略",children:"#"}),"性能优化策略"]}),"\n",(0,t.jsxs)(n.h3,{id:"1-查询优化",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-查询优化",children:"#"}),"1. 查询优化"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["注意：以下为“扩展示例，非内置”能力，示例中的 ",(0,t.jsx)(n.code,{children:"cursorPaginate"}),"、",(0,t.jsx)(n.code,{children:"standardPaginate"})," 等方法需自行实现。"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"// 使用索引\npublic function listQuery()\n{\n    return $this->query()\n        ->select(['id', 'title', 'status', 'created_at']) // 只查询需要的字段\n        ->whereNotNull('status') // 利用索引\n        ->orderBy('created_at', 'desc'); // 确保 created_at 有索引\n}\n\n// 分页优化\npublic function list()\n{\n    $query = $this->listQuery();\n\n    // 使用游标分页（适合大数据量）\n    if (request('cursor')) {\n        return $this->cursorPaginate($query);\n    }\n\n    // 标准分页\n    return $this->standardPaginate($query);\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"2-缓存策略",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-缓存策略",children:"#"}),"2. 缓存策略"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["注意：以下为“扩展示例，非内置”能力，示例中的 ",(0,t.jsx)(n.code,{children:"buildCacheKey"}),"、",(0,t.jsx)(n.code,{children:"queryData"})," 需自行实现。"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-php",meta:"",children:"public function list()\n{\n    $cacheKey = $this->buildCacheKey();\n\n    return cache()->remember($cacheKey, 300, function() {\n        return $this->queryData();\n    });\n}\n\nprivate function buildCacheKey(): string\n{\n    $params = request()->only(['page', 'perPage', 'keyword', 'status']);\n    return 'list:' . md5(serialize($params));\n}\n"})}),"\n",(0,t.jsxs)(n.h3,{id:"3-数据库连接优化扩展示例",children:[(0,t.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-数据库连接优化扩展示例",children:"#"}),"3. 数据库连接优化（扩展示例）"]}),"\n",(0,t.jsxs)(n.p,{children:["建议通过 ",(0,t.jsx)(n.code,{children:"config/database.php"})," 配置读写分离。如需在 Service 层使用特定连接，可在模型上切换连接后再构建查询（例如使用模型的 ",(0,t.jsx)(n.code,{children:"setConnection()"})," 或 ",(0,t.jsx)(n.code,{children:"on()"})," 方法），并确保与项目的全局数据库策略一致。"]})]})}function d(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(s,e)})):s(e)}let l=d;d.__RSPRESS_PAGE_META={},d.__RSPRESS_PAGE_META["guide%2Fcrud%2Fread.md"]={toc:[{id:"查询流程概览",text:"查询流程概览",depth:2},{id:"列表功能详解",text:"列表功能详解",depth:2},{id:"index-方法的多重职责",text:"index 方法的多重职责",depth:3},{id:"list-方法构建页面结构",text:"list 方法构建页面结构",depth:3},{id:"高级列表配置",text:"高级列表配置",depth:3},{id:"表格样式定制",text:"表格样式定制",depth:4},{id:"条件渲染",text:"条件渲染",depth:4},{id:"数据查询处理",text:"数据查询处理",depth:2},{id:"service-层查询方法",text:"Service 层查询方法",depth:3},{id:"list-方法分页查询",text:"list 方法（分页查询）",depth:4},{id:"listquery-方法查询构建",text:"listQuery 方法（查询构建）",depth:4},{id:"搜索条件处理",text:"搜索条件处理",depth:4},{id:"排序处理",text:"排序处理",depth:4},{id:"关联查询优化",text:"关联查询优化",depth:3},{id:"预加载关联关系",text:"预加载关联关系",depth:4},{id:"动态关联加载",text:"动态关联加载",depth:4},{id:"数据格式化",text:"数据格式化",depth:3},{id:"formatrows-方法",text:"formatRows 方法",depth:4},{id:"详情功能详解",text:"详情功能详解",depth:2},{id:"show-方法处理",text:"show 方法处理",depth:3},{id:"detail-方法构建",text:"detail 方法构建",depth:3},{id:"service-详情查询",text:"Service 详情查询",depth:3},{id:"性能优化策略",text:"性能优化策略",depth:2},{id:"1-查询优化",text:"1. 查询优化",depth:3},{id:"2-缓存策略",text:"2. 缓存策略",depth:3},{id:"3-数据库连接优化扩展示例",text:"3. 数据库连接优化（扩展示例）",depth:3}],title:"查询功能详解",frontmatter:{}}}}]);