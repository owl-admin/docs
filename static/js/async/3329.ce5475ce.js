"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["3329"],{7701:function(e,n,s){s.r(n),s.d(n,{default:function(){return l}});var r=s(2676),i=s(453),a=s(8831);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",h3:"h3",strong:"strong",pre:"pre",code:"code",ul:"ul",li:"li",div:"div",h4:"h4",ol:"ol"},(0,i.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"框架原理",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#框架原理",children:"#"}),"框架原理"]}),"\n",(0,r.jsx)(n.p,{children:"Owl Admin 是一个基于 Laravel + React + Amis 的现代化管理后台框架。本文将深入解析框架的核心工作原理，帮助您更好地理解和使用框架。"}),"\n",(0,r.jsxs)(n.h2,{id:"整体架构",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#整体架构",children:"#"}),"整体架构"]}),"\n",(0,r.jsxs)(n.h3,{id:"技术栈组成",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#技术栈组成",children:"#"}),"技术栈组成"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"架构层次："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{meta:"",children:"┌─────────────────────────────────────────────────────────┐\n│                   前端层 (React)                        │\n├─────────────────────────────────────────────────────────┤\n│                 Amis 渲染引擎                           │\n├─────────────────────────────────────────────────────────┤\n│                  JSON Schema                            │\n├─────────────────────────────────────────────────────────┤\n│               Renderer 组件系统                         │\n├─────────────────────────────────────────────────────────┤\n│                后端层 (Laravel)                         │\n└─────────────────────────────────────────────────────────┘\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"前端技术栈："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"React 18"}),"：现代化前端框架"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TypeScript"}),"：类型安全的 JavaScript"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Amis"}),"：百度开源的低代码前端框架"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ant Design"}),"：企业级 UI 组件库"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"后端技术栈："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Laravel 10+"}),"：优雅的 PHP 框架"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Renderer 系统"}),"：组件抽象层"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"权限管理"}),"：基于 RBAC 的权限控制"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API 管理"}),"：RESTful API 设计"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"运行流程详解",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#运行流程详解",children:"#"}),"运行流程详解"]}),"\n",(0,r.jsxs)(n.h3,{id:"1-应用启动流程",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-应用启动流程",children:"#"}),"1. 应用启动流程"]}),"\n",(0,r.jsx)(a.Z,Object.assign({code:"sequenceDiagram\n    participant U as 用户浏览器\n    participant F as 前端应用\n    participant B as 后端 API\n    participant D as 数据库\n\n    U->>F: 访问 /admin\n    F->>B: 请求用户信息 /current-user\n    B->>D: 查询用户数据\n    D--\x3e>B: 返回用户信息\n    B--\x3e>F: 返回用户数据\n    F->>B: 请求路由配置 /menus\n    B->>D: 查询菜单权限\n    D--\x3e>B: 返回菜单数据\n    B--\x3e>F: 返回路由配置\n    F->>F: 渲染应用界面"},{config:{}})),"\n",(0,r.jsxs)(n.h3,{id:"2-页面渲染流程",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-页面渲染流程",children:"#"}),"2. 页面渲染流程"]}),"\n",(0,r.jsx)(a.Z,Object.assign({code:"sequenceDiagram\n    participant U as 用户\n    participant F as 前端路由\n    participant A as Amis 组件\n    participant B as 后端控制器\n    participant R as Renderer 系统\n\n    U->>F: 访问页面路由\n    F->>A: 加载 Amis 页面组件\n    A->>B: 请求页面 Schema\n    B->>R: 构建 Renderer 组件\n    R->>R: 应用权限过滤\n    R->>R: 执行管道处理\n    R--\x3e>B: 返回 JSON Schema\n    B--\x3e>A: 返回页面结构\n    A->>A: 渲染页面组件\n    A--\x3e>U: 展示最终页面"},{config:{}})),"\n",(0,r.jsxs)(n.h3,{id:"3-详细执行步骤",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-详细执行步骤",children:"#"}),"3. 详细执行步骤"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"步骤 1：前端初始化"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["用户访问 ",(0,r.jsx)(n.code,{children:"/public/admin"})," 静态文件"]}),"\n",(0,r.jsx)(n.li,{children:"React 应用启动，初始化路由系统"}),"\n",(0,r.jsx)(n.li,{children:"自动请求用户信息、权限配置、系统设置"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"步骤 2：动态路由加载"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["前端请求 ",(0,r.jsx)(n.code,{children:"/menus"})," 获取用户可访问的路由"]}),"\n",(0,r.jsx)(n.li,{children:"根据权限动态生成路由配置"}),"\n",(0,r.jsx)(n.li,{children:"懒加载对应的页面组件"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"步骤 3：页面 Schema 获取"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"用户访问具体页面时，Amis 组件请求对应的 API"}),"\n",(0,r.jsx)(n.li,{children:"后端控制器接收请求，调用相应的方法"}),"\n",(0,r.jsx)(n.li,{children:"构建 Renderer 组件树，生成 JSON Schema"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"步骤 4：权限过滤与渲染"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"应用权限过滤，移除无权限的组件"}),"\n",(0,r.jsx)(n.li,{children:"执行管道处理，允许自定义扩展"}),"\n",(0,r.jsx)(n.li,{children:"返回最终的 JSON Schema 给前端"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"步骤 5：前端渲染"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Amis 接收 JSON Schema"}),"\n",(0,r.jsx)(n.li,{children:"根据 Schema 渲染对应的组件"}),"\n",(0,r.jsx)(n.li,{children:"处理用户交互和数据更新"}),"\n"]}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive info",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"核心流程"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.p,{children:["\n",(0,r.jsx)(n.strong,{children:"用户访问"})," → ",(0,r.jsx)(n.strong,{children:"路由解析"})," → ",(0,r.jsx)(n.strong,{children:"权限验证"})," → ",(0,r.jsx)(n.strong,{children:"Schema 构建"})," → ",(0,r.jsx)(n.strong,{children:"组件渲染"})," → ",(0,r.jsx)(n.strong,{children:"页面展示"})]})})]}),"\n",(0,r.jsxs)(n.h2,{id:"baserenderer-核心原理",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#baserenderer-核心原理",children:"#"}),"BaseRenderer 核心原理"]}),"\n",(0,r.jsxs)(n.h3,{id:"类设计理念",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#类设计理念",children:"#"}),"类设计理念"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"BaseRenderer"})," 是整个框架的核心，它将 Amis 的 JSON Schema 概念与 PHP 的面向对象编程完美结合。"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"class BaseRenderer implements \\JsonSerializable\n{\n    use Macroable;\n\n    public string $type;\n    public array $amisSchema = [];\n\n    public static function make(): static\n    {\n        return new static();\n    }\n\n    public function __call($method, $parameters)\n    {\n        if (static::hasMacro($method)) {\n            return $this->macroCall($method, $parameters);\n        }\n\n        return $this->set($method, array_shift($parameters));\n    }\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"核心特性解析",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心特性解析",children:"#"}),"核心特性解析"]}),"\n",(0,r.jsxs)(n.h4,{id:"1-jsonserializable-接口",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-jsonserializable-接口",children:"#"}),"1. JsonSerializable 接口"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"public function jsonSerialize()\n{\n    return $this->filteredResults();\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"作用："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["当 Renderer 对象被 ",(0,r.jsx)(n.code,{children:"json_encode()"})," 时自动调用"]}),"\n",(0,r.jsx)(n.li,{children:"确保返回给前端的是经过处理的 Schema 数据"}),"\n",(0,r.jsx)(n.li,{children:"支持权限过滤和管道处理"}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"2-魔术方法__call",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-魔术方法__call",children:"#"}),"2. 魔术方法",(0,r.jsx)(n.code,{children:"__call()"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"public function __call($method, $parameters)\n{\n    if (static::hasMacro($method)) {\n        return $this->macroCall($method, $parameters);\n    }\n\n    return $this->set($method, array_shift($parameters));\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"功能："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"支持动态方法调用"}),"\n",(0,r.jsx)(n.li,{children:"实现链式调用语法"}),"\n",(0,r.jsx)(n.li,{children:"支持 Laravel 的 Macroable 特性"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"使用示例："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"$button = amis()->Button()\n    ->label('保存')           // 调用 set('label', '保存')\n    ->level('primary')        // 调用 set('level', 'primary')\n    ->size('md');            // 调用 set('size', 'md')\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"3-权限控制系统",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-权限控制系统",children:"#"}),"3. 权限控制系统"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"public function permission(string $sign, mixed $replaceValue = '')\n{\n    $this->amisSchema['owl_permission'] = $sign;\n    $this->amisSchema['owl_permission_replace_value'] = $replaceValue;\n\n    return $this;\n}\n\npublic function filteredResults()\n{\n    $permissionKey = 'owl_permission';\n\n    if (key_exists($permissionKey, $this->amisSchema)) {\n        if (!admin_user()->can($this->amisSchema[$permissionKey])) {\n            return data_get($this->amisSchema, 'owl_permission_replace_value', '');\n        }\n    }\n\n    return AdminPipeline::handle(static::class, $this->amisSchema);\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"权限控制特性："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"细粒度控制"}),"：每个组件都可以设置独立的权限"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"替换值支持"}),"：无权限时可以显示替代内容"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"自动过滤"}),"：在序列化时自动应用权限检查"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"使用示例："})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"// 有权限时显示按钮，无权限时隐藏\n$button = amis()->Button()\n    ->label('删除')\n    ->permission('user.delete');\n\n// 有权限时显示按钮，无权限时显示文本\n$button = amis()->Button()\n    ->label('编辑')\n    ->permission('user.edit', '无权限操作');\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"4-管道处理系统",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-管道处理系统",children:"#"}),"4. 管道处理系统"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"return AdminPipeline::handle(static::class, $this->amisSchema);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"管道系统功能："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"扩展性"}),"：允许第三方插件修改组件行为"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"可配置"}),"：支持动态注册处理管道"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"链式处理"}),"：多个管道按顺序执行"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"组件系统架构",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件系统架构",children:"#"}),"组件系统架构"]}),"\n",(0,r.jsxs)(n.h3,{id:"组件继承关系",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件继承关系",children:"#"}),"组件继承关系"]}),"\n",(0,r.jsx)(a.Z,Object.assign({code:"classDiagram\n    class BaseRenderer {\n        +string type\n        +array amisSchema\n        +make() static\n        +__call(method, parameters)\n        +set(name, value)\n        +permission(sign, replaceValue)\n        +filteredResults()\n        +jsonSerialize()\n    }\n\n    class Button {\n        +label(text)\n        +level(type)\n        +size(size)\n        +disabled(bool)\n    }\n\n    class Form {\n        +api(url)\n        +body(controls)\n        +mode(mode)\n        +submitText(text)\n    }\n\n    class Page {\n        +title(title)\n        +body(content)\n        +toolbar(actions)\n        +aside(sidebar)\n    }\n\n    BaseRenderer <|-- Button\n    BaseRenderer <|-- Form\n    BaseRenderer <|-- Page"},{config:{}})),"\n",(0,r.jsxs)(n.h3,{id:"组件创建方式",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件创建方式",children:"#"}),"组件创建方式"]}),"\n",(0,r.jsxs)(n.h4,{id:"1-直接实例化",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-直接实例化",children:"#"}),"1. 直接实例化"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"use Slowlyo\\OwlAdmin\\Renderers\\Button;\n\n$button = Button::make()->label('点击我');\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"2-助手函数推荐",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-助手函数推荐",children:"#"}),"2. 助手函数（推荐）"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"// 创建具体组件\n$button = amis()->Button()->label('点击我');\n\n// 通过类型字符串创建\n$button = amis('button')->label('点击我');\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"3-组件组合",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-组件组合",children:"#"}),"3. 组件组合"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"$page = amis()->Page()\n    ->title('用户管理')\n    ->body([\n        amis()->Form()\n            ->api('/api/users')\n            ->body([\n                amis()->TextControl('name', '姓名'),\n                amis()->EmailControl('email', '邮箱'),\n            ]),\n        amis()->Button()\n            ->label('提交')\n            ->level('primary')\n    ]);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"前端渲染机制",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前端渲染机制",children:"#"}),"前端渲染机制"]}),"\n",(0,r.jsxs)(n.h3,{id:"amis-渲染器",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#amis-渲染器",children:"#"}),"Amis 渲染器"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",meta:"",children:"const AmisRender = ({schema, className = ''}) => {\n    const history = useHistory()\n    const {getSetting} = useSetting()\n\n    const options: RenderOptions = {\n        enableAMISDebug: getSetting('show_development_tools'),\n        fetcher: ({url, method, data}) => amisRequest(url, method, data),\n        updateLocation: (location, replace) => {\n            replace || history.push(location)\n        },\n        jumpTo: (location: string) => {\n            if (location.startsWith('http')) {\n                window.open(location)\n            } else {\n                history.push(location.startsWith('/') ? location : `/${location}`)\n            }\n        }\n    }\n\n    return (\n        <div className={className}>\n            {renderAmis(schema, props, options)}\n        </div>\n    )\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"页面加载机制",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#页面加载机制",children:"#"}),"页面加载机制"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",meta:"",children:"function AmisPage() {\n    const history = useHistory()\n    const pathname = history.location.pathname + history.location.search\n    const cacheKey = pathname + '-schema'\n\n    const [schema, setSchema] = useState(cache().get(cacheKey))\n\n    const initPage = useRequest(initPageSchema, {\n        cacheKey,\n        manual: true,\n        loadingDelay: 700,\n        onSuccess(res) {\n            if (JSON.stringify(res.data) != JSON.stringify(cache().get(cacheKey))) {\n                setSchema(res.data)\n                cache().set(cacheKey, res.data)\n            }\n        }\n    })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"缓存机制："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SessionStorage 缓存"}),"：避免重复请求相同页面"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"智能更新"}),"：Schema 变化时自动更新缓存"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"性能优化"}),"：减少网络请求，提升用户体验"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"路由系统",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#路由系统",children:"#"}),"路由系统"]}),"\n",(0,r.jsxs)(n.h3,{id:"动态路由加载",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#动态路由加载",children:"#"}),"动态路由加载"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",meta:"",children:"const useRoute = () => {\n    const {routes} = useSelector((state: GlobalState) => state)\n    const dispatch = useDispatch()\n\n    // 获取路由数据\n    const dynamicRoutes = useRequest(fetchUserRoutes, {\n        manual: true,\n        cacheKey: 'app-dynamic-routes',\n        onSuccess: async ({data}) => {\n            if (!isArray(data)) return\n            dispatch({\n                type: 'update-routes',\n                payload: {\n                    routes: await componentMount([...staticRoutes, ...data])\n                },\n            })\n        }\n    })\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"路由特性："})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"权限控制"}),"：根据用户权限动态生成路由"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"懒加载"}),"：按需加载页面组件"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"缓存机制"}),"：避免重复请求路由配置"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"组件懒加载",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#组件懒加载",children:"#"}),"组件懒加载"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",meta:"",children:'export const componentMount = (routes) => {\n    const mod = import.meta.glob("../pages/**/[a-z[]*.tsx")\n\n    const travel = (_routes, parents = []) => {\n        return _routes.map((route) => {\n            if (route.path && !route.children) {\n                if (isString(route.component)) {\n                    route.component = lazyload(mod[`../pages/${route.component}/index.tsx`])\n                }\n            }\n            return route\n        })\n    }\n\n    return travel(routes)\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"扩展机制",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#扩展机制",children:"#"}),"扩展机制"]}),"\n",(0,r.jsxs)(n.h3,{id:"自定义组件注册",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#自定义组件注册",children:"#"}),"自定义组件注册"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",meta:"",children:"export const registerCustomComponents = () => {\n    // 图标组件\n    Renderer({type: 'custom-svg-icon', autoVar: true})(SvgIcon)\n    // 富文本编辑器\n    FormItem({type: 'custom-wang-editor', autoVar: true})(WangEditor)\n    // 水印组件\n    Renderer({type: 'custom-watermark', autoVar: true})(Watermark)\n    // Schema 编辑器\n    FormItem({type: 'custom-amis-editor', autoVar: true})(SchemaEditor)\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"管道扩展",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#管道扩展",children:"#"}),"管道扩展"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-php",meta:"",children:"use Slowlyo\\OwlAdmin\\Support\\Cores\\AdminPipeline;\n\n// 注册自定义管道\nAdminPipeline::through('MyController', [\n    MyCustomPipe::class,\n    AnotherPipe::class,\n]);\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"性能优化",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能优化",children:"#"}),"性能优化"]}),"\n",(0,r.jsxs)(n.h3,{id:"1-前端优化",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-前端优化",children:"#"}),"1. 前端优化"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"组件懒加载"}),"：按需加载页面组件"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Schema 缓存"}),"：避免重复请求"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"虚拟滚动"}),"：大数据量表格优化"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-后端优化",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-后端优化",children:"#"}),"2. 后端优化"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"权限缓存"}),"：减少权限查询"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Schema 复用"}),"：相同组件复用实例"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"数据库优化"}),"：合理的索引和查询"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-网络优化",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-网络优化",children:"#"}),"3. 网络优化"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"HTTP 缓存"}),"：合理设置缓存头"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"压缩传输"}),"：启用 Gzip 压缩"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CDN 加速"}),"：静态资源 CDN 分发"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"总结",children:[(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#总结",children:"#"}),"总结"]}),"\n",(0,r.jsx)(n.p,{children:"Owl Admin 的核心优势在于："}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"简洁的抽象"}),"：BaseRenderer 提供了优雅的组件抽象"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"强大的权限"}),"：细粒度的权限控制系统"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"高度可扩展"}),"：管道机制支持灵活扩展"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"开发效率"}),"：链式调用和助手函数提升开发体验"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"性能优化"}),"：多层缓存和懒加载机制"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"通过理解这些核心原理，您可以更好地使用框架构建复杂的管理后台应用，并根据需要进行定制和扩展。"}),"\n",(0,r.jsxs)(n.div,{className:"rspress-directive tip",children:[(0,r.jsx)(n.div,{className:"rspress-directive-title",children:"开发建议"}),(0,r.jsx)(n.div,{className:"rspress-directive-content",children:(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"熟练掌握 BaseRenderer 的使用方法"}),"\n",(0,r.jsx)(n.li,{children:"合理使用权限控制保护敏感功能"}),"\n",(0,r.jsx)(n.li,{children:"利用管道机制实现业务扩展"}),"\n",(0,r.jsx)(n.li,{children:"关注性能优化，提升用户体验"}),"\n"]})})]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,r.jsx)(n,Object.assign({},e,{children:(0,r.jsx)(d,e)})):d(e)}let l=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["guide%2Fbasic%2Fframe.md"]={toc:[{id:"整体架构",text:"整体架构",depth:2},{id:"技术栈组成",text:"技术栈组成",depth:3},{id:"运行流程详解",text:"运行流程详解",depth:2},{id:"1-应用启动流程",text:"1. 应用启动流程",depth:3},{id:"2-页面渲染流程",text:"2. 页面渲染流程",depth:3},{id:"3-详细执行步骤",text:"3. 详细执行步骤",depth:3},{id:"baserenderer-核心原理",text:"BaseRenderer 核心原理",depth:2},{id:"类设计理念",text:"类设计理念",depth:3},{id:"核心特性解析",text:"核心特性解析",depth:3},{id:"1-jsonserializable-接口",text:"1. JsonSerializable 接口",depth:4},{id:"2-魔术方法__call",text:"2. 魔术方法`__call()`",depth:4},{id:"3-权限控制系统",text:"3. 权限控制系统",depth:4},{id:"4-管道处理系统",text:"4. 管道处理系统",depth:4},{id:"组件系统架构",text:"组件系统架构",depth:2},{id:"组件继承关系",text:"组件继承关系",depth:3},{id:"组件创建方式",text:"组件创建方式",depth:3},{id:"1-直接实例化",text:"1. 直接实例化",depth:4},{id:"2-助手函数推荐",text:"2. 助手函数（推荐）",depth:4},{id:"3-组件组合",text:"3. 组件组合",depth:4},{id:"前端渲染机制",text:"前端渲染机制",depth:2},{id:"amis-渲染器",text:"Amis 渲染器",depth:3},{id:"页面加载机制",text:"页面加载机制",depth:3},{id:"路由系统",text:"路由系统",depth:2},{id:"动态路由加载",text:"动态路由加载",depth:3},{id:"组件懒加载",text:"组件懒加载",depth:3},{id:"扩展机制",text:"扩展机制",depth:2},{id:"自定义组件注册",text:"自定义组件注册",depth:3},{id:"管道扩展",text:"管道扩展",depth:3},{id:"性能优化",text:"性能优化",depth:2},{id:"1-前端优化",text:"1. 前端优化",depth:3},{id:"2-后端优化",text:"2. 后端优化",depth:3},{id:"3-网络优化",text:"3. 网络优化",depth:3},{id:"总结",text:"总结",depth:2}],title:"框架原理",frontmatter:{}}}}]);