"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["8098"],{4882:function(e,n,s){s.r(n),s.d(n,{default:function(){return l}});var i=s(2676),t=s(453),r=s(8831);function d(e){let n=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",code:"code",pre:"pre",ul:"ul",li:"li",ol:"ol",strong:"strong"},(0,t.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"删除功能详解",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除功能详解",children:"#"}),"删除功能详解"]}),"\n",(0,i.jsxs)(n.h2,{id:"删除流程概览",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除流程概览",children:"#"}),"删除流程概览"]}),"\n",(0,i.jsx)(n.p,{children:"删除功能包括单条删除、批量删除、软删除等多种模式："}),"\n",(0,i.jsx)(r.Z,Object.assign({code:"sequenceDiagram\n    participant U as 用户\n    participant F as 前端 Amis\n    participant C as AdminController\n    participant S as AdminService\n    participant M as Model\n    participant D as 数据库\n\n    Note over U,D: 单条删除流程\n    U->>F: 点击删除按钮\n    F->>U: 显示确认对话框\n    U->>F: 确认删除\n    F->>C: DELETE /resource/{id}\n    C->>S: delete(id)\n    S->>M: 执行删除\n    M->>D: 删除记录\n    S->>S: deleted(ids) 钩子\n    S->>C: 返回操作结果\n    C->>F: JSON 响应\n    F->>U: 显示操作结果\n\n    Note over U,D: 批量删除流程\n    U->>F: 选择多条记录\n    U->>F: 点击批量删除\n    F->>U: 显示确认对话框\n    U->>F: 确认删除\n    F->>C: DELETE /resource/{ids}\n    C->>S: delete([id1,id2,...])\n    S->>M: 批量删除\n    M->>D: 删除多条记录\n    S->>S: deleted(ids) 钩子\n    S->>C: 返回操作结果\n    C->>F: JSON 响应\n    F->>U: 显示操作结果"},{config:{}})),"\n",(0,i.jsxs)(n.h2,{id:"删除按钮配置",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除按钮配置",children:"#"}),"删除按钮配置"]}),"\n",(0,i.jsxs)(n.h3,{id:"列表页删除按钮",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#列表页删除按钮",children:"#"}),"列表页删除按钮"]}),"\n",(0,i.jsxs)(n.p,{children:["控制器中的 ",(0,i.jsx)(n.code,{children:"list"})," 方法负责构建数据列表和删除按钮："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function list()\n{\n    $crud = $this->baseCRUD()\n        // 配置批量操作\n        ->bulkActions([\n            $this->bulkDeleteButton(), // 批量删除按钮（内置，使用 getBulkDeletePath）\n\n            // 自定义批量删除按钮（与内置效果一致）\n            amis()->Button()->label('批量删除')\n                ->level('danger')\n                ->actionType('ajax')\n                ->api($this->getBulkDeletePath())\n                ->confirmText('确定要删除选中的记录吗？')\n                ->reload('window'),\n        ])\n\n        // 配置选择条件\n        ->itemCheckableOn('${!is_system}') // 系统数据不可选择删除\n\n        ->columns([\n            amis()->TableColumn('id', 'ID')->sortable(),\n            amis()->TableColumn('title', '标题'),\n            amis()->TableColumn('status', '状态')\n                ->type('mapping')\n                ->map([\n                    1 => '<span class=\"label label-success\">启用</span>',\n                    0 => '<span class=\"label label-danger\">禁用</span>',\n                ]),\n\n            // 行内操作按钮\n            $this->rowActions([\n                $this->rowEditButton(true), // 编辑按钮\n\n                // 自定义删除按钮（内置路径辅助）\n                amis()->Button()->label('删除')\n                    ->level('link')\n                    ->className('text-danger')\n                    ->actionType('ajax')\n                    ->api($this->getDeletePath())\n                    ->confirmText('确定要删除此记录吗？')\n                    ->visibleOn('${!is_system}') // 示例条件\n                    ->reload('window'),\n            ]),\n        ]);\n\n    return $this->baseList($crud);\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"删除按钮权限控制",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除按钮权限控制",children:"#"}),"删除按钮权限控制"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function list()\n{\n    $crud = $this->baseCRUD()\n        ->bulkActions([\n            // 根据权限显示批量删除按钮\n            admin_user()->can('delete', $this->modelName)\n                ? $this->bulkDeleteButton()\n                : null,\n        ])\n        ->columns([\n            // ...\n            $this->rowActions([\n                $this->rowEditButton(true),\n\n                // 根据权限和数据状态显示删除按钮\n                amis()->Button()->label('删除')\n                    ->level('link')\n                    ->className('text-danger')\n                    ->actionType('ajax')\n                    ->api($this->getDeletePath())\n                    ->confirmText('确定要删除此记录吗？')\n                    ->visibleOn('${!is_system && can_delete}') // 多条件控制\n                    ->reload('window'),\n            ]),\n        ]);\n\n    return $this->baseList($crud);\n}\n\n/**\n * 在数据查询时添加权限字段\n */\npublic function list()\n{\n    // 在查询时添加权限判断字段\n    $this->service->addSelectRaw([\n        DB::raw('(CASE WHEN is_system = 0 AND created_by = ' . admin_user()->id . ' THEN 1 ELSE 0 END) as can_delete')\n    ]);\n\n    // ... 其他代码\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"删除方法实现",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除方法实现",children:"#"}),"删除方法实现"]}),"\n",(0,i.jsxs)(n.h3,{id:"destroy-方法处理",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#destroy-方法处理",children:"#"}),"destroy 方法处理"]}),"\n",(0,i.jsxs)(n.p,{children:["控制器的 ",(0,i.jsx)(n.code,{children:"destroy"})," 方法处理删除请求："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 删除记录\n *\n * @param mixed $ids 单个ID或多个ID（逗号分隔）\n * @return JsonResponse|JsonResource\n */\npublic function destroy($ids)\n{\n    $response = fn($result) => $this->autoResponse($result, admin_trans('admin.delete'));\n\n    return $response($this->service->delete($ids));\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"service-层删除实现内置默认行为",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#service-层删除实现内置默认行为",children:"#"}),"Service 层删除实现（内置默认行为）"]}),"\n",(0,i.jsxs)(n.p,{children:["AdminService 默认实现的删除逻辑如下（见 ",(0,i.jsx)(n.code,{children:"Slowlyo\\OwlAdmin\\Services\\AdminService::delete()"}),"）："]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function delete(string $ids)\n{\n    DB::beginTransaction();\n    try {\n        $result = $this->query()->whereIn($this->primaryKey(), explode(',', $ids))->delete();\n\n        if ($result) {\n            $this->deleted($ids); // 删除后钩子\n        }\n\n        DB::commit();\n    } catch (\\Throwable $e) {\n        DB::rollBack();\n        admin_abort($e->getMessage());\n    }\n\n    return $result;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"说明："}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["如果模型 ",(0,i.jsx)(n.code,{children:"use SoftDeletes"}),"，Eloquent 的 ",(0,i.jsx)(n.code,{children:"delete()"})," 将执行软删除；否则为硬删除。"]}),"\n",(0,i.jsx)(n.li,{children:"如需“永久删除/恢复”等能力，请在业务 Service 中自定义扩展（见下文“扩展示例”）。"}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"删除类型详解",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除类型详解",children:"#"}),"删除类型详解"]}),"\n",(0,i.jsxs)(n.h3,{id:"1-软删除默认由-eloquent-提供",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-软删除默认由-eloquent-提供",children:"#"}),"1. 软删除（默认由 Eloquent 提供）"]}),"\n",(0,i.jsx)(n.p,{children:"软删除不会真正删除数据，而是标记为已删除状态："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"use Illuminate\\Database\\Eloquent\\SoftDeletes;\n\nclass User extends Model\n{\n    use SoftDeletes;\n\n    protected $dates = ['deleted_at'];\n}\n\n// 默认：模型引入 SoftDeletes 后，调用 delete() 即为软删除\n// 如需额外校验/日志，可在 Service::deleted($ids) 或自定义 delete() 中扩展\n\n// 扩展示例：恢复/永久删除可在 Service 中自定义实现（非内置）\n\n/**\n * 永久删除\n */\npublic function forceDelete($ids)\n{\n    if (is_string($ids)) {\n        $ids = explode(',', $ids);\n    }\n\n    // 删除前清理关联数据\n    $models = $this->query()\n        ->onlyTrashed()\n        ->whereIn($this->primaryKey(), $ids)\n        ->get();\n\n    foreach ($models as $model) {\n        $this->cleanupRelatedData($model);\n    }\n\n    $result = $this->query()\n        ->onlyTrashed()\n        ->whereIn($this->primaryKey(), $ids)\n        ->forceDelete();\n\n    logger()->info('永久删除记录', [\n        'model' => $this->modelName,\n        'ids' => $ids,\n    ]);\n\n    return $result;\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-硬删除",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-硬删除",children:"#"}),"2. 硬删除"]}),"\n",(0,i.jsx)(n.p,{children:"直接从数据库中删除记录："}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function delete($ids)\n{\n    if (is_string($ids)) {\n        $ids = explode(',', $ids);\n    }\n\n    // 删除前备份数据\n    $models = $this->query()->whereIn($this->primaryKey(), $ids)->get();\n    $backupData = $models->toArray();\n\n    // 删除前钩子\n    $this->deleted($ids);\n\n    // 清理关联数据\n    foreach ($models as $model) {\n        $this->cleanupRelatedData($model);\n    }\n\n    // 执行硬删除\n    $result = $this->query()->whereIn($this->primaryKey(), $ids)->delete();\n\n    // 记录删除日志（包含备份数据）\n    logger()->info('硬删除记录', [\n        'model' => $this->modelName,\n        'ids' => $ids,\n        'backup_data' => $backupData,\n    ]);\n\n    return $result;\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"删除权限控制",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除权限控制",children:"#"}),"删除权限控制"]}),"\n",(0,i.jsxs)(n.h3,{id:"权限验证",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#权限验证",children:"#"}),"权限验证"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 验证删除权限\n */\nprotected function validateDelete($ids)\n{\n    $models = $this->query()->whereIn($this->primaryKey(), $ids)->get();\n\n    foreach ($models as $model) {\n        // 检查基础删除权限\n        if (!$this->canDelete($model)) {\n            admin_abort(\"记录 {$model->id} 不允许删除\");\n        }\n\n        // 检查业务规则\n        $this->validateBusinessRules($model);\n\n        // 检查关联数据\n        $this->validateRelatedData($model);\n    }\n}\n\n/**\n * 检查是否可以删除\n */\nprotected function canDelete($model): bool\n{\n    // 系统数据不允许删除\n    if (isset($model->is_system) && $model->is_system) {\n        return false;\n    }\n\n    // 检查用户权限\n    if (!admin_user()->can('delete', $model)) {\n        return false;\n    }\n\n    // 创建者才能删除自己的记录\n    if (isset($model->created_by) && $model->created_by !== admin_user()->id) {\n        if (!admin_user()->hasRole('admin')) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * 验证业务规则\n */\nprotected function validateBusinessRules($model)\n{\n    // 示例：订单已支付不能删除\n    if ($model instanceof Order && $model->status === 'paid') {\n        admin_abort('已支付的订单不能删除');\n    }\n\n    // 示例：有子记录的分类不能删除\n    if ($model instanceof Category && $model->children()->exists()) {\n        admin_abort('存在子分类的分类不能删除');\n    }\n}\n\n/**\n * 验证关联数据\n */\nprotected function validateRelatedData($model)\n{\n    // 检查是否有关联数据\n    if ($model instanceof User && $model->orders()->exists()) {\n        admin_abort('用户存在订单记录，不能删除');\n    }\n\n    if ($model instanceof Category && $model->products()->exists()) {\n        admin_abort('分类下存在商品，不能删除');\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"批量删除功能",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#批量删除功能",children:"#"}),"批量删除功能"]}),"\n",(0,i.jsxs)(n.h3,{id:"前端批量删除配置",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#前端批量删除配置",children:"#"}),"前端批量删除配置"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function list()\n{\n    $crud = $this->baseCRUD()\n        // 配置批量操作\n        ->bulkActions([\n            amis()->Button()->label('批量删除')\n                ->level('danger')\n                ->actionType('ajax')\n                ->api($this->getBulkDeletePath())\n                ->confirmText('确定要删除选中的记录吗？')\n                ->reload('window'),\n\n            amis()->Button()->label('批量禁用')\n                ->level('warning')\n                ->actionType('ajax')\n                ->api($this->getUpdatePath())\n                ->data(['status' => 0])\n                ->confirmText('确定要禁用选中的记录吗？')\n                ->reload('window'),\n        ])\n\n        // 配置选择列\n        ->itemCheckableOn('${!is_system}') // 系统数据不可选择\n\n        ->columns([\n            amis()->TableColumn('id', 'ID')->sortable(),\n            // ... 其他列\n        ]);\n\n    return $this->baseList($crud);\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"批量删除实现扩展示例非内置",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#批量删除实现扩展示例非内置",children:"#"}),"批量删除实现（扩展示例，非内置）"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 批量删除处理\n */\npublic function destroy($ids)\n{\n    // 解析批量ID\n    if (is_string($ids)) {\n        $ids = explode(',', $ids);\n    }\n\n    // 限制批量删除数量\n    if (count($ids) > 100) {\n        admin_abort('单次最多只能删除100条记录');\n    }\n\n    $result = $this->service->batchDelete($ids);\n\n    return $this->autoResponse($result, admin_trans('admin.delete'));\n}\n\n/**\n * Service 中的批量删除\n */\npublic function batchDelete($ids): bool\n{\n    DB::beginTransaction();\n    try {\n        $successCount = 0;\n        $failedIds = [];\n\n        foreach ($ids as $id) {\n            try {\n                $this->delete($id);\n                $successCount++;\n            } catch (\\Exception $e) {\n                $failedIds[] = $id;\n                logger()->error(\"删除记录失败\", [\n                    'id' => $id,\n                    'error' => $e->getMessage(),\n                ]);\n            }\n        }\n\n        DB::commit();\n\n        if (!empty($failedIds)) {\n            admin_abort(\"成功删除 {$successCount} 条记录，失败 \" . count($failedIds) . \" 条\");\n        }\n\n        return true;\n\n    } catch (\\Exception $e) {\n        DB::rollBack();\n        throw $e;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"删除钩子函数",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#删除钩子函数",children:"#"}),"删除钩子函数"]}),"\n",(0,i.jsxs)(n.h3,{id:"deleted-钩子删除后",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#deleted-钩子删除后",children:"#"}),"deleted 钩子（删除后）"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 删除后处理\n *\n * @param array $ids 要删除的ID数组\n */\npublic function deleted($ids)\n{\n    // 若启用软删除，需要使用 withTrashed() 才能取到刚被删除的记录\n    $models = $this->query()->withTrashed()->whereIn($this->primaryKey(), $ids)->get();\n\n    foreach ($models as $model) {\n        // 清理上传文件\n        $this->cleanupFiles($model);\n\n        // 清理关联数据\n        $this->cleanupRelatedData($model);\n\n        // 清理缓存\n        $this->cleanupCache($model);\n\n        // 发送通知\n        $this->sendDeleteNotification($model);\n    }\n}\n\n/**\n * 清理上传文件\n */\nprotected function cleanupFiles($model)\n{\n    $fileFields = ['avatar', 'cover', 'attachments'];\n\n    foreach ($fileFields as $field) {\n        if (isset($model->$field) && $model->$field) {\n            if (is_array($model->$field)) {\n                foreach ($model->$field as $file) {\n                    $this->deleteFile($file);\n                }\n            } else {\n                $this->deleteFile($model->$field);\n            }\n        }\n    }\n}\n\n/**\n * 清理关联数据\n */\nprotected function cleanupRelatedData($model)\n{\n    // 删除关联的标签\n    if (method_exists($model, 'tags')) {\n        $model->tags()->detach();\n    }\n\n    // 删除关联的评论\n    if (method_exists($model, 'comments')) {\n        $model->comments()->delete();\n    }\n\n    // 删除关联的日志\n    if (method_exists($model, 'logs')) {\n        $model->logs()->delete();\n    }\n}\n\n/**\n * 清理缓存\n */\nprotected function cleanupCache($model)\n{\n    $cacheKeys = [\n        \"model_{$model->id}\",\n        \"user_permissions_{$model->id}\",\n        \"category_products_{$model->category_id}\",\n    ];\n\n    foreach ($cacheKeys as $key) {\n        cache()->forget($key);\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"回收站功能扩展示例非内置",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#回收站功能扩展示例非内置",children:"#"}),"回收站功能（扩展示例，非内置）"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 回收站控制器\n */\nclass TrashController extends AdminController // 示例：演示如何自建回收站模块\n{\n    protected string $serviceName = TrashService::class;\n\n    public function list()\n    {\n        $crud = $this->baseCRUD()\n            ->headerToolbar([\n                amis()->Button()->label('清空回收站')\n                    ->level('danger')\n                    ->actionType('ajax')\n                    ->api('delete:' . admin_url('trash/clear'))\n                    ->confirmText('确定要清空回收站吗？此操作不可恢复！'),\n            ])\n            ->bulkActions([\n                amis()->Button()->label('批量恢复')\n                    ->level('success')\n                    ->actionType('ajax')\n                    ->api('put:' . admin_url('trash/restore'))\n                    ->confirmText('确定要恢复选中的记录吗？'),\n\n                amis()->Button()->label('永久删除')\n                    ->level('danger')\n                    ->actionType('ajax')\n                    ->api('delete:' . admin_url('trash/force-delete'))\n                    ->confirmText('确定要永久删除选中的记录吗？此操作不可恢复！'),\n            ])\n            ->columns([\n                amis()->TableColumn('id', 'ID'),\n                amis()->TableColumn('title', '标题'),\n                amis()->TableColumn('deleted_at', '删除时间')->type('datetime'),\n                amis()->TableColumn('deleted_by_user.username', '删除人'),\n\n                // 操作列\n                amis()->TableColumn('actions', '操作')\n                    ->type('operation')\n                    ->buttons([\n                        amis()->Button()->label('恢复')\n                            ->level('success')\n                            ->size('sm')\n                            ->actionType('ajax')\n                            ->api('put:' . admin_url('trash/restore/${id}'))\n                            ->confirmText('确定要恢复此记录吗？'),\n\n                        amis()->Button()->label('永久删除')\n                            ->level('danger')\n                            ->size('sm')\n                            ->actionType('ajax')\n                            ->api('delete:' . admin_url('trash/force-delete/${id}'))\n                            ->confirmText('确定要永久删除此记录吗？此操作不可恢复！'),\n                    ]),\n            ]);\n\n        return $this->baseList($crud);\n    }\n\n    /**\n     * 恢复记录\n     */\n    public function restore($ids)\n    {\n        $result = $this->service->restore($ids);\n        return $this->autoResponse($result, '恢复成功');\n    }\n\n    /**\n     * 永久删除\n     */\n    public function forceDelete($ids)\n    {\n        $result = $this->service->forceDelete($ids);\n        return $this->autoResponse($result, '永久删除成功');\n    }\n\n    /**\n     * 清空回收站\n     */\n    public function clear()\n    {\n        $result = $this->service->clearTrash();\n        return $this->autoResponse($result, '回收站已清空');\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"实际应用案例",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实际应用案例",children:"#"}),"实际应用案例"]}),"\n",(0,i.jsxs)(n.h3,{id:"完整的用户删除功能",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#完整的用户删除功能",children:"#"}),"完整的用户删除功能"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Services;\n\nuse App\\Models\\User;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Slowlyo\\OwlAdmin\\Services\\AdminService;\n\nclass UserService extends AdminService\n{\n    protected string $modelName = User::class;\n\n    /**\n     * 删除用户\n     */\n    public function delete($ids)\n    {\n        if (is_string($ids)) {\n            $ids = explode(',', $ids);\n        }\n\n        DB::beginTransaction();\n        try {\n            $users = $this->query()->whereIn('id', $ids)->get();\n\n            foreach ($users as $user) {\n                // 验证删除权限\n                $this->validateUserDelete($user);\n\n                // 处理用户数据\n                $this->handleUserDeletion($user);\n            }\n\n            // 执行软删除\n            $result = $this->query()->whereIn('id', $ids)->delete();\n\n            // 删除后处理\n            $this->deleted($ids);\n\n            DB::commit();\n            return $result;\n\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            admin_abort($e->getMessage());\n        }\n    }\n\n    /**\n     * 验证用户删除\n     */\n    protected function validateUserDelete($user)\n    {\n        // 超级管理员不能删除\n        if ($user->hasRole('super-admin')) {\n            admin_abort('超级管理员不能删除');\n        }\n\n        // 当前用户不能删除自己\n        if ($user->id === admin_user()->id) {\n            admin_abort('不能删除当前登录用户');\n        }\n\n        // 检查是否有重要关联数据\n        if ($user->orders()->where('status', 'processing')->exists()) {\n            admin_abort('用户有正在处理的订单，不能删除');\n        }\n    }\n\n    /**\n     * 处理用户删除\n     */\n    protected function handleUserDeletion($user)\n    {\n        // 匿名化敏感数据\n        $user->update([\n            'email' => 'deleted_' . $user->id . '@example.com',\n            'phone' => null,\n            'real_name' => '已删除用户',\n        ]);\n\n        // 删除头像文件\n        if ($user->avatar) {\n            Storage::delete($user->avatar);\n        }\n\n        // 清理会话\n        $user->sessions()->delete();\n\n        // 撤销所有角色\n        $user->roles()->detach();\n\n        // 清理权限缓存\n        cache()->forget(\"user_permissions_{$user->id}\");\n    }\n\n    /**\n     * 删除后处理\n     */\n    public function deleted($ids)\n    {\n        // 记录删除日志\n        logger()->info('删除用户', [\n            'user_ids' => $ids,\n            'operator' => admin_user()->username,\n            'deleted_at' => now(),\n        ]);\n\n        // 发送通知给管理员\n        // event(new UsersDeleted($ids));\n\n        // 清理相关缓存\n        cache()->forget('active_users_count');\n        cache()->forget('user_statistics');\n    }\n\n    /**\n     * 恢复用户\n     */\n    public function restore($ids)\n    {\n        if (is_string($ids)) {\n            $ids = explode(',', $ids);\n        }\n\n        $result = $this->query()\n            ->onlyTrashed()\n            ->whereIn('id', $ids)\n            ->restore();\n\n        // 恢复后处理\n        foreach ($ids as $id) {\n            $user = $this->query()->find($id);\n            if ($user) {\n                // 重新分配默认角色\n                $user->assignRole('user');\n\n                // 清理缓存\n                cache()->forget(\"user_permissions_{$id}\");\n            }\n        }\n\n        logger()->info('恢复用户', ['user_ids' => $ids]);\n\n        return $result;\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"分类删除功能级联处理",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#分类删除功能级联处理",children:"#"}),"分类删除功能（级联处理）"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:'<?php\n\nnamespace App\\Admin\\Services;\n\nuse App\\Models\\Category;\nuse Slowlyo\\OwlAdmin\\Services\\AdminService;\n\nclass CategoryService extends AdminService\n{\n    protected string $modelName = Category::class;\n\n    public function delete($ids)\n    {\n        if (is_string($ids)) {\n            $ids = explode(\',\', $ids);\n        }\n\n        DB::beginTransaction();\n        try {\n            foreach ($ids as $id) {\n                $this->deleteCategoryWithChildren($id);\n            }\n\n            DB::commit();\n            return true;\n\n        } catch (\\Exception $e) {\n            DB::rollBack();\n            admin_abort($e->getMessage());\n        }\n    }\n\n    /**\n     * 递归删除分类及其子分类\n     */\n    protected function deleteCategoryWithChildren($id)\n    {\n        $category = $this->query()->find($id);\n\n        if (!$category) {\n            return;\n        }\n\n        // 检查是否有商品\n        if ($category->products()->exists()) {\n            admin_abort("分类 \'{$category->name}\' 下存在商品，不能删除");\n        }\n\n        // 递归删除子分类\n        $children = $category->children()->get();\n        foreach ($children as $child) {\n            $this->deleteCategoryWithChildren($child->id);\n        }\n\n        // 删除当前分类\n        $category->delete();\n\n        // 清理缓存\n        cache()->forget("category_tree");\n        cache()->forget("category_{$id}");\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.h2,{id:"安全注意事项",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#安全注意事项",children:"#"}),"安全注意事项"]}),"\n",(0,i.jsxs)(n.h3,{id:"1-防止误删",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-防止误删",children:"#"}),"1. 防止误删"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * 重要数据删除确认\n */\npublic function destroy($ids)\n{\n    // 检查是否为重要数据\n    $models = $this->service->query()->whereIn('id', explode(',', $ids))->get();\n\n    foreach ($models as $model) {\n        if ($this->isImportantData($model)) {\n            // 要求二次确认\n            if (!request()->has('force_delete')) {\n                return $this->response()->fail('重要数据需要二次确认删除');\n            }\n        }\n    }\n\n    return $this->autoResponse($this->service->delete($ids), admin_trans('admin.delete'));\n}\n\nprotected function isImportantData($model): bool\n{\n    // 系统数据\n    if (isset($model->is_system) && $model->is_system) {\n        return true;\n    }\n\n    // 有大量关联数据\n    if ($model instanceof User && $model->orders()->count() > 100) {\n        return true;\n    }\n\n    return false;\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-删除日志记录",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-删除日志记录",children:"#"}),"2. 删除日志记录"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function deleted($ids)\n{\n    $models = $this->query()->whereIn($this->primaryKey(), $ids)->get();\n\n    foreach ($models as $model) {\n        // 详细记录删除信息\n        logger()->info('删除记录', [\n            'model' => get_class($model),\n            'id' => $model->getKey(),\n            'data' => $model->toArray(),\n            'operator' => admin_user()->username,\n            'ip' => request()->ip(),\n            'user_agent' => request()->userAgent(),\n            'deleted_at' => now(),\n        ]);\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"3-数据备份",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-数据备份",children:"#"}),"3. 数据备份"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function delete($ids)\n{\n    if (is_string($ids)) {\n        $ids = explode(',', $ids);\n    }\n\n    // 删除前备份重要数据\n    $models = $this->query()->whereIn($this->primaryKey(), $ids)->get();\n    $this->backupBeforeDelete($models);\n\n    // 执行删除\n    return parent::delete($ids);\n}\n\nprotected function backupBeforeDelete($models)\n{\n    foreach ($models as $model) {\n        // 备份到专门的备份表\n        DB::table('deleted_data_backup')->insert([\n            'model_type' => get_class($model),\n            'model_id' => $model->getKey(),\n            'data' => json_encode($model->toArray()),\n            'deleted_by' => admin_user()->id,\n            'deleted_at' => now(),\n        ]);\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"性能优化",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#性能优化",children:"#"}),"性能优化"]}),"\n",(0,i.jsxs)(n.h3,{id:"1-批量操作优化",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-批量操作优化",children:"#"}),"1. 批量操作优化"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function batchDelete($ids): bool\n{\n    // 分批处理大量数据\n    $chunks = array_chunk($ids, 100);\n\n    foreach ($chunks as $chunk) {\n        $this->query()->whereIn($this->primaryKey(), $chunk)->delete();\n    }\n\n    return true;\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"2-异步删除",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-异步删除",children:"#"}),"2. 异步删除"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"public function delete($ids)\n{\n    // 对于大量数据，使用队列异步处理\n    if (count($ids) > 1000) {\n        dispatch(new BatchDeleteJob($this->modelName, $ids));\n        return true;\n    }\n\n    return $this->performDelete($ids);\n}\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"3-软删除索引优化",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-软删除索引优化",children:"#"}),"3. 软删除索引优化"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-php",meta:"",children:"// 数据库迁移中添加软删除索引\nSchema::table('users', function (Blueprint $table) {\n    $table->index(['deleted_at', 'created_at']);\n});\n"})}),"\n",(0,i.jsxs)(n.h2,{id:"最佳实践",children:[(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#最佳实践",children:"#"}),"最佳实践"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"优先使用软删除"}),"：对于重要数据，建议使用软删除而非硬删除"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"权限控制"}),"：严格控制删除权限，防止误删重要数据"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"关联检查"}),"：删除前检查关联数据，避免数据完整性问题"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"日志记录"}),"：详细记录删除操作，便于审计和恢复"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"数据备份"}),"：重要数据删除前进行备份"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"批量限制"}),"：限制批量删除的数量，防止系统负载过高"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"异步处理"}),"：大量数据删除使用队列异步处理"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"用户确认"}),"：重要操作需要用户二次确认"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"回收站功能"}),"：提供回收站功能，允许用户恢复误删数据"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"性能优化"}),"：合理使用索引，优化删除查询性能"]}),"\n"]})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,i.jsx)(n,Object.assign({},e,{children:(0,i.jsx)(d,e)})):d(e)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["guide%2Fcrud%2Fdelete.md"]={toc:[{id:"删除流程概览",text:"删除流程概览",depth:2},{id:"删除按钮配置",text:"删除按钮配置",depth:2},{id:"列表页删除按钮",text:"列表页删除按钮",depth:3},{id:"删除按钮权限控制",text:"删除按钮权限控制",depth:3},{id:"删除方法实现",text:"删除方法实现",depth:2},{id:"destroy-方法处理",text:"destroy 方法处理",depth:3},{id:"service-层删除实现内置默认行为",text:"Service 层删除实现（内置默认行为）",depth:3},{id:"删除类型详解",text:"删除类型详解",depth:2},{id:"1-软删除默认由-eloquent-提供",text:"1. 软删除（默认由 Eloquent 提供）",depth:3},{id:"2-硬删除",text:"2. 硬删除",depth:3},{id:"删除权限控制",text:"删除权限控制",depth:2},{id:"权限验证",text:"权限验证",depth:3},{id:"批量删除功能",text:"批量删除功能",depth:2},{id:"前端批量删除配置",text:"前端批量删除配置",depth:3},{id:"批量删除实现扩展示例非内置",text:"批量删除实现（扩展示例，非内置）",depth:3},{id:"删除钩子函数",text:"删除钩子函数",depth:2},{id:"deleted-钩子删除后",text:"deleted 钩子（删除后）",depth:3},{id:"回收站功能扩展示例非内置",text:"回收站功能（扩展示例，非内置）",depth:2},{id:"实际应用案例",text:"实际应用案例",depth:2},{id:"完整的用户删除功能",text:"完整的用户删除功能",depth:3},{id:"分类删除功能级联处理",text:"分类删除功能（级联处理）",depth:3},{id:"安全注意事项",text:"安全注意事项",depth:2},{id:"1-防止误删",text:"1. 防止误删",depth:3},{id:"2-删除日志记录",text:"2. 删除日志记录",depth:3},{id:"3-数据备份",text:"3. 数据备份",depth:3},{id:"性能优化",text:"性能优化",depth:2},{id:"1-批量操作优化",text:"1. 批量操作优化",depth:3},{id:"2-异步删除",text:"2. 异步删除",depth:3},{id:"3-软删除索引优化",text:"3. 软删除索引优化",depth:3},{id:"最佳实践",text:"最佳实践",depth:2}],title:"删除功能详解",frontmatter:{}}}}]);