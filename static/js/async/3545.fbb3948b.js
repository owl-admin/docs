"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["3545"],{1173:function(n,e,a){a.r(e),a.d(e,{default:function(){return l}});var i=a(2676),d=a(453),r=a(8831);function t(n){let e=Object.assign({h1:"h1",a:"a",h2:"h2",p:"p",h3:"h3",code:"code",pre:"pre",h4:"h4"},(0,d.ah)(),n.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.h1,{id:"编辑功能详解",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编辑功能详解",children:"#"}),"编辑功能详解"]}),"\n",(0,i.jsxs)(e.h2,{id:"编辑流程概览",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编辑流程概览",children:"#"}),"编辑流程概览"]}),"\n",(0,i.jsx)(e.p,{children:"编辑功能包括数据回显、表单验证、数据更新等核心环节："}),"\n",(0,i.jsx)(r.Z,Object.assign({code:"sequenceDiagram\n    participant U as 用户\n    participant F as 前端 Amis\n    participant C as AdminController\n    participant S as AdminService\n    participant M as Model\n    participant D as 数据库\n\n    Note over U,D: 编辑页面加载流程\n    U->>F: 点击编辑按钮\n    F->>C: GET /resource/{id}/edit\n    C->>C: form(true) 构建表单\n    C->>F: 返回表单结构\n    F->>C: GET /resource/{id}/edit?_action=getData\n    C->>S: getEditData(id)\n    S->>M: 查询记录\n    M->>D: SQL 查询\n    D->>M: 返回数据\n    M->>S: 返回模型\n    S->>C: 返回编辑数据\n    C->>F: JSON 响应\n    F->>U: 表单数据回显\n\n    Note over U,D: 编辑保存流程\n    U->>F: 修改并提交表单\n    F->>C: PUT /resource/{id} (表单数据)\n    C->>S: update(id, data)\n    S->>S: saving(data, id) 钩子\n    S->>M: 更新模型\n    M->>D: 保存到数据库\n    S->>S: saved(model, true) 钩子\n    S->>C: 返回操作结果\n    C->>F: JSON 响应\n    F->>U: 显示操作结果"},{config:{}})),"\n",(0,i.jsxs)(e.h2,{id:"表单构建与数据回显",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#表单构建与数据回显",children:"#"}),"表单构建与数据回显"]}),"\n",(0,i.jsxs)(e.h3,{id:"form-方法的编辑模式",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#form-方法的编辑模式",children:"#"}),"form 方法的编辑模式"]}),"\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.code,{children:"form"})," 方法通过 ",(0,i.jsx)(e.code,{children:"$isEdit"})," 参数区分新增和编辑模式："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 构建表单结构\n *\n * @param bool $isEdit 是否为编辑模式\n * @return \\Slowlyo\\OwlAdmin\\Renderers\\Form\n */\npublic function form($isEdit = false)\n{\n    return $this->baseForm($isEdit)->body([\n        // 基础信息分组\n        amis()->GroupControl()->label('基础信息')->body([\n            amis()->TextControl('title', '标题')\n                ->required()\n                ->maxLength(100)\n                ->placeholder('请输入标题'),\n\n            // 编辑时显示 ID（只读）\n            amis()->StaticExactControl('id', 'ID')\n                ->visibleOn('${id}'), // 仅编辑时显示\n\n            amis()->SelectControl('category_id', '分类')\n                ->required()\n                ->source('/api/categories')\n                ->placeholder('请选择分类'),\n        ]),\n\n        // 密码字段（仅新增时必填）\n        amis()->GroupControl()\n            ->label('密码设置')\n            ->visibleOn('!${id}') // 仅新增时显示\n            ->body([\n                amis()->PasswordControl('password', '密码')\n                    ->required()\n                    ->minLength(6)\n                    ->placeholder('请输入密码'),\n            ]),\n\n        // 密码修改（仅编辑时显示）\n        amis()->GroupControl()\n            ->label('修改密码')\n            ->visibleOn('${id}') // 仅编辑时显示\n            ->body([\n                amis()->PasswordControl('new_password', '新密码')\n                    ->minLength(6)\n                    ->placeholder('留空则不修改密码'),\n\n                amis()->PasswordControl('confirm_password', '确认密码')\n                    ->validations(['equalsField' => 'new_password'])\n                    ->visibleOn('${new_password}'), // 仅输入新密码时显示\n            ]),\n\n        // 状态信息\n        amis()->GroupControl()->label('状态信息')->body([\n            amis()->SwitchControl('status', '状态')\n                ->value(1)\n                ->onText('启用')\n                ->offText('禁用'),\n\n            // 编辑时显示创建信息\n            amis()->StaticExactControl('created_at', '创建时间')\n                ->type('datetime')\n                ->visibleOn('${id}'),\n\n            amis()->StaticExactControl('updated_at', '更新时间')\n                ->type('datetime')\n                ->visibleOn('${id}'),\n        ]),\n    ]);\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"条件显示字段",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#条件显示字段",children:"#"}),"条件显示字段"]}),"\n",(0,i.jsx)(e.p,{children:"根据编辑状态动态显示不同字段："}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"// 仅新增时显示\namis()->TextControl('username', '用户名')\n    ->required()\n    ->visibleOn('!${id}'),\n\n// 仅编辑时显示\namis()->StaticExactControl('username', '用户名')\n    ->visibleOn('${id}'),\n\n// 根据状态显示\namis()->TextControl('reason', '禁用原因')\n    ->visibleOn('${status == 0}'),\n\n// 根据角色显示\namis()->SelectControl('department_id', '部门')\n    ->visibleOn('${role == \"employee\"}')\n    ->source('/api/departments'),\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"数据回显机制",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数据回显机制",children:"#"}),"数据回显机制"]}),"\n",(0,i.jsxs)(e.h4,{id:"edit-方法处理",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#edit-方法处理",children:"#"}),"edit 方法处理"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 编辑页面处理\n *\n * @param mixed $id\n * @return JsonResponse|JsonResource\n */\npublic function edit($id)\n{\n    $this->isEdit = true;\n\n    // 获取编辑数据\n    if ($this->actionOfGetData()) {\n        return $this->response()->success($this->service->getEditData($id));\n    }\n\n    // 构建编辑页面\n    $form = amis()->Card()\n        ->className('base-form')\n        ->header(['title' => admin_trans('admin.edit')])\n        ->body($this->form(true)) // 传入 true 表示编辑模式\n        ->toolbar([$this->backButton()]);\n\n    $page = $this->basePage()->body($form);\n\n    return $this->response()->success($page);\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"geteditdata-方法实现",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#geteditdata-方法实现",children:"#"}),"getEditData 方法实现"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 获取编辑数据\n *\n * @param mixed $id\n * @return Model\n */\npublic function getEditData($id)\n{\n    $query = $this->query();\n\n    // 添加关联关系\n    $this->addRelations($query, 'edit');\n\n    $model = $query->find($id);\n\n    if (!$model) {\n        admin_abort('记录不存在');\n    }\n\n    // 数据预处理\n    return $this->formatEditData($model);\n}\n\n/**\n * 格式化编辑数据\n *\n * @param Model $model\n * @return Model\n */\nprotected function formatEditData($model)\n{\n    // 处理关联数据\n    if ($model->relationLoaded('tags')) {\n        $model->tag_ids = $model->tags->pluck('id')->toArray();\n    }\n\n    // 处理日期格式\n    if ($model->publish_at) {\n        $model->publish_at = $model->publish_at->format('Y-m-d H:i:s');\n    }\n\n    // 处理 JSON 字段\n    if ($model->settings) {\n        $model->settings = json_decode($model->settings, true);\n    }\n\n    // 移除敏感字段\n    unset($model->password);\n\n    return $model;\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"数据更新处理",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#数据更新处理",children:"#"}),"数据更新处理"]}),"\n",(0,i.jsxs)(e.h3,{id:"update-方法流程",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#update-方法流程",children:"#"}),"update 方法流程"]}),"\n",(0,i.jsxs)(e.p,{children:["控制器的 ",(0,i.jsx)(e.code,{children:"update"})," 方法处理编辑请求："]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 编辑保存\n *\n * @param Request $request\n * @return JsonResponse|JsonResource\n */\npublic function update(Request $request)\n{\n    $primaryKey = $this->getPrimaryValue($request);\n    $result = $this->service->update($primaryKey, $request->all());\n\n    return $this->autoResponse($result, admin_trans('admin.save'));\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"service-层更新实现",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#service-层更新实现",children:"#"}),"Service 层更新实现"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 更新数据\n *\n * @param mixed $primaryKey\n * @param array $data\n * @return bool\n */\npublic function update($primaryKey, $data): bool\n{\n    DB::beginTransaction();\n    try {\n        // 查找记录\n        $model = $this->query()->findOrFail($primaryKey);\n\n        // 保存前钩子\n        $this->saving($data, $primaryKey);\n\n        // 更新字段\n        foreach ($data as $k => $v) {\n            if (!$this->hasColumn($k)) {\n                continue;\n            }\n            $model->setAttribute($k, $v);\n        }\n\n        $result = $model->save();\n\n        if ($result) {\n            // 保存后钩子\n            $this->saved($model, true);\n        }\n\n        DB::commit();\n        return $result;\n\n    } catch (\\Throwable $e) {\n        DB::rollBack();\n        admin_abort($e->getMessage());\n    }\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"编辑钩子函数",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#编辑钩子函数",children:"#"}),"编辑钩子函数"]}),"\n",(0,i.jsxs)(e.h4,{id:"saving-钩子更新前",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#saving-钩子更新前",children:"#"}),"saving 钩子（更新前）"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 保存前处理\n *\n * @param array $data 表单数据\n * @param string $primaryKey 主键值\n */\npublic function saving(&$data, $primaryKey = '')\n{\n    // 密码处理\n    if (isset($data['new_password']) && $data['new_password']) {\n        $data['password'] = Hash::make($data['new_password']);\n    }\n    unset($data['new_password'], $data['confirm_password']);\n\n    // 更新者信息\n    if ($primaryKey) {\n        $data['updated_by'] = admin_user()->id;\n        $data['updated_at'] = now();\n    }\n\n    // 处理上传文件\n    if (isset($data['avatar']) && is_string($data['avatar'])) {\n        $oldModel = $this->query()->find($primaryKey);\n        if ($oldModel && $oldModel->avatar !== $data['avatar']) {\n            // 删除旧文件\n            $this->deleteOldFile($oldModel->avatar);\n            // 处理新文件\n            $data['avatar'] = $this->processUploadedFile($data['avatar']);\n        }\n    }\n\n    // 数据验证\n    $this->validateUpdateData($data, $primaryKey);\n}\n\n/**\n * 编辑数据验证\n */\nprivate function validateUpdateData($data, $primaryKey)\n{\n    $rules = [\n        'title' => 'required|max:100',\n        'email' => 'required|email|unique:users,email,' . $primaryKey,\n    ];\n\n    // 密码验证（仅在修改时）\n    if (isset($data['new_password'])) {\n        $rules['new_password'] = 'min:6';\n        $rules['confirm_password'] = 'same:new_password';\n    }\n\n    $validator = validator($data, $rules);\n\n    if ($validator->fails()) {\n        admin_abort($validator->errors()->first());\n    }\n}\n"})}),"\n",(0,i.jsxs)(e.h4,{id:"saved-钩子更新后",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#saved-钩子更新后",children:"#"}),"saved 钩子（更新后）"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 保存后处理\n *\n * @param Model $model 模型实例\n * @param bool $isEdit 是否为编辑\n */\npublic function saved($model, $isEdit = false)\n{\n    if ($isEdit) {\n        // 处理关联数据更新\n        if (isset($this->request['tag_ids'])) {\n            $model->tags()->sync($this->request['tag_ids']);\n        }\n\n        // 清除相关缓存\n        cache()->forget(\"user_{$model->id}\");\n        cache()->forget(\"user_permissions_{$model->id}\");\n\n        // 记录变更日志\n        $this->logChanges($model);\n\n        // 发送通知\n        if ($model->wasChanged('status')) {\n            event(new UserStatusChanged($model));\n        }\n    }\n}\n\n/**\n * 记录变更日志\n */\nprivate function logChanges($model)\n{\n    $changes = $model->getChanges();\n    $original = $model->getOriginal();\n\n    $changeLog = [];\n    foreach ($changes as $field => $newValue) {\n        $oldValue = $original[$field] ?? null;\n        $changeLog[] = [\n            'field' => $field,\n            'old_value' => $oldValue,\n            'new_value' => $newValue,\n        ];\n    }\n\n    admin_log('更新记录', [\n        'model' => get_class($model),\n        'id' => $model->getKey(),\n        'changes' => $changeLog,\n    ]);\n}\n"})}),"\n",(0,i.jsxs)(e.h2,{id:"高级编辑功能",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#高级编辑功能",children:"#"}),"高级编辑功能"]}),"\n",(0,i.jsxs)(e.h3,{id:"批量编辑",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#批量编辑",children:"#"}),"批量编辑"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 批量编辑\n */\npublic function batchUpdate(Request $request)\n{\n    $ids = $request->input('ids', []);\n    $data = $request->input('data', []);\n\n    if (empty($ids) || empty($data)) {\n        admin_abort('参数错误');\n    }\n\n    DB::beginTransaction();\n    try {\n        foreach ($ids as $id) {\n            $this->service->update($id, $data);\n        }\n\n        DB::commit();\n        return $this->response()->success(null, '批量更新成功');\n\n    } catch (\\Exception $e) {\n        DB::rollBack();\n        return $this->response()->fail($e->getMessage());\n    }\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"快速编辑",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#快速编辑",children:"#"}),"快速编辑"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 快速编辑（表格内编辑）\n */\npublic function quickEdit($data): bool\n{\n    $id = $data['id'] ?? null;\n    $field = $data['name'] ?? null;\n    $value = $data['value'] ?? null;\n\n    if (!$id || !$field) {\n        admin_abort('参数错误');\n    }\n\n    // 验证字段是否允许快速编辑\n    $allowedFields = ['status', 'sort', 'title'];\n    if (!in_array($field, $allowedFields)) {\n        admin_abort('该字段不允许快速编辑');\n    }\n\n    $model = $this->query()->findOrFail($id);\n    $model->setAttribute($field, $value);\n\n    return $model->save();\n}\n"})}),"\n",(0,i.jsxs)(e.h3,{id:"版本控制",children:[(0,i.jsx)(e.a,{className:"header-anchor","aria-hidden":"true",href:"#版本控制",children:"#"}),"版本控制"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-php",meta:"",children:"/**\n * 保存版本历史\n */\npublic function saved($model, $isEdit = false)\n{\n    if ($isEdit && $model->wasChanged()) {\n        // 保存版本历史\n        $model->versions()->create([\n            'data' => $model->getOriginal(),\n            'changes' => $model->getChanges(),\n            'user_id' => admin_user()->id,\n            'created_at' => now(),\n        ]);\n    }\n}\n\n/**\n * 版本回滚\n */\npublic function rollback($id, $versionId)\n{\n    $model = $this->query()->findOrFail($id);\n    $version = $model->versions()->findOrFail($versionId);\n\n    // 恢复到指定版本\n    $model->fill($version->data);\n    $model->save();\n\n    return true;\n}\n"})})]})}function s(){let n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:e}=Object.assign({},(0,d.ah)(),n.components);return e?(0,i.jsx)(e,Object.assign({},n,{children:(0,i.jsx)(t,n)})):t(n)}let l=s;s.__RSPRESS_PAGE_META={},s.__RSPRESS_PAGE_META["guide%2Fcrud%2Fupdate.md"]={toc:[{id:"编辑流程概览",text:"编辑流程概览",depth:2},{id:"表单构建与数据回显",text:"表单构建与数据回显",depth:2},{id:"form-方法的编辑模式",text:"form 方法的编辑模式",depth:3},{id:"条件显示字段",text:"条件显示字段",depth:3},{id:"数据回显机制",text:"数据回显机制",depth:3},{id:"edit-方法处理",text:"edit 方法处理",depth:4},{id:"geteditdata-方法实现",text:"getEditData 方法实现",depth:4},{id:"数据更新处理",text:"数据更新处理",depth:2},{id:"update-方法流程",text:"update 方法流程",depth:3},{id:"service-层更新实现",text:"Service 层更新实现",depth:3},{id:"编辑钩子函数",text:"编辑钩子函数",depth:3},{id:"saving-钩子更新前",text:"saving 钩子（更新前）",depth:4},{id:"saved-钩子更新后",text:"saved 钩子（更新后）",depth:4},{id:"高级编辑功能",text:"高级编辑功能",depth:2},{id:"批量编辑",text:"批量编辑",depth:3},{id:"快速编辑",text:"快速编辑",depth:3},{id:"版本控制",text:"版本控制",depth:3}],title:"编辑功能详解",frontmatter:{}}}}]);