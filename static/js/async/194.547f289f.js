"use strict";(self.webpackChunkrspress_doc_template=self.webpackChunkrspress_doc_template||[]).push([["194"],{3917:function(e,n,a){a.r(n),a.d(n,{default:function(){return l}});var s=a(2676),t=a(453);function i(e){let n=Object.assign({h1:"h1",a:"a",p:"p",h2:"h2",code:"code",pre:"pre",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li",ol:"ol",strong:"strong"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"系统设置",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#系统设置",children:"#"}),"系统设置"]}),"\n",(0,s.jsx)(n.p,{children:"系统设置功能提供了灵活的配置管理机制，支持动态存储和获取应用程序的各种配置参数。所有设置项都会自动缓存以提升性能，并支持模块化管理。"}),"\n",(0,s.jsxs)(n.h2,{id:"快速开始",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#快速开始",children:"#"}),"快速开始"]}),"\n",(0,s.jsxs)(n.p,{children:["通过 ",(0,s.jsx)(n.code,{children:"settings()"})," 辅助函数可以轻松管理系统设置："]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"// 设置单个配置项\nsettings()->set('site_name', 'Owl Admin');\n\n// 获取配置项\n$siteName = settings()->get('site_name', '默认站点名');\n\n// 批量设置\nsettings()->setMany([\n    'site_name' => 'Owl Admin',\n    'site_description' => 'Laravel 后台管理系统',\n    'upload_domain' => 'https://cdn.example.com',\n]);\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"核心方法",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#核心方法",children:"#"}),"核心方法"]}),"\n",(0,s.jsxs)(n.h3,{id:"set---保存设置项",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#set---保存设置项",children:"#"}),"set - 保存设置项"]}),"\n",(0,s.jsx)(n.p,{children:"保存单个设置项到数据库，并自动清除相关缓存。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param string $key   设置项键名\n * @param mixed  $value 设置项值（支持任意类型，自动JSON序列化）\n * @return bool\n */\npublic function set($key, $value = null): bool\n\n// 示例\nsettings()->set('site_name', 'Owl Admin');\nsettings()->set('mail_config', [\n    'driver' => 'smtp',\n    'host' => 'smtp.example.com',\n    'port' => 587,\n]);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"setmany---批量保存设置",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#setmany---批量保存设置",children:"#"}),"setMany - 批量保存设置"]}),"\n",(0,s.jsx)(n.p,{children:"批量保存多个设置项，使用数据库事务确保数据一致性。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param array $data 设置项数组，键为设置名，值为设置值\n * @return bool\n */\npublic function setMany(array $data): bool\n\n// 示例\nsettings()->setMany([\n    'site_name' => 'Owl Admin',\n    'site_description' => 'Laravel 后台管理系统',\n    'admin_email' => 'admin@example.com',\n    'upload_config' => [\n        'max_size' => '10MB',\n        'allowed_types' => ['jpg', 'png', 'pdf'],\n    ],\n]);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"adminsetmany---后台批量保存",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#adminsetmany---后台批量保存",children:"#"}),"adminSetMany - 后台批量保存"]}),"\n",(0,s.jsx)(n.p,{children:"专为后台控制器设计的批量保存方法，自动返回标准的后台响应格式。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param array $data 设置项数组\n * @return \\Illuminate\\Http\\JsonResponse|\\Illuminate\\Http\\Resources\\Json\\JsonResource\n */\npublic function adminSetMany(array $data)\n\n// 在控制器中使用\npublic function store(Request $request)\n{\n    $data = $request->only(['site_name', 'site_description', 'upload_domain']);\n    return settings()->adminSetMany($data);\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"get---获取设置项",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#get---获取设置项",children:"#"}),"get - 获取设置项"]}),"\n",(0,s.jsx)(n.p,{children:"获取指定的设置项值，支持默认值和强制刷新。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param string     $key     设置项键名\n * @param mixed|null $default 默认值\n * @param bool       $fresh   是否跳过缓存直接从数据库获取\n * @return mixed|null\n */\npublic function get(string $key, mixed $default = null, bool $fresh = false)\n\n// 示例\n$siteName = settings()->get('site_name', '默认站点');\n$mailConfig = settings()->get('mail_config', []);\n\n// 强制从数据库获取最新值\n$freshValue = settings()->get('site_name', null, true);\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"getbymodule---获取模块设置",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getbymodule---获取模块设置",children:"#"}),"getByModule - 获取模块设置"]}),"\n",(0,s.jsx)(n.p,{children:"获取当前模块的专属设置项，自动添加模块前缀。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param string     $key     设置项键名\n * @param mixed|null $default 默认值\n * @param bool       $fresh   是否跳过缓存\n * @return mixed|null\n */\npublic function getByModule(string $key, mixed $default = null, bool $fresh = false)\n\n// 示例：在 user 模块中调用\nsettings()->getByModule('theme_color', '#1890ff');\n// 实际获取的是 'user_theme_color' 设置项\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"all---获取所有设置",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#all---获取所有设置",children:"#"}),"all - 获取所有设置"]}),"\n",(0,s.jsx)(n.p,{children:"以关联数组形式返回所有设置项。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @return array 所有设置项的键值对数组\n */\npublic function all(): array\n\n// 示例\n$allSettings = settings()->all();\n// 返回：['site_name' => 'Owl Admin', 'site_description' => '...', ...]\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"arrayget---获取嵌套值",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#arrayget---获取嵌套值",children:"#"}),"arrayGet - 获取嵌套值"]}),"\n",(0,s.jsx)(n.p,{children:"从数组类型的设置项中获取指定路径的值，支持点号分隔的路径语法。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param string $key     设置项键名\n * @param string $path    点号分隔的路径，如 'user.profile.name'\n * @param mixed  $default 默认值\n * @return mixed\n */\npublic function arrayGet(string $key, string $path, $default = null)\n\n// 示例\nsettings()->set('user_config', [\n    'profile' => [\n        'name' => 'John Doe',\n        'email' => 'john@example.com',\n    ],\n    'preferences' => [\n        'theme' => 'dark',\n        'language' => 'zh_CN',\n    ],\n]);\n\n$userName = settings()->arrayGet('user_config', 'profile.name');\n$theme = settings()->arrayGet('user_config', 'preferences.theme', 'light');\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"del---删除设置项",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#del---删除设置项",children:"#"}),"del - 删除设置项"]}),"\n",(0,s.jsx)(n.p,{children:"删除指定的设置项及其缓存。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param string $key 设置项键名\n * @return bool\n */\npublic function del(string $key): bool\n\n// 示例\nsettings()->del('old_config');\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"clearcache---清除缓存",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#clearcache---清除缓存",children:"#"}),"clearCache - 清除缓存"]}),"\n",(0,s.jsx)(n.p,{children:"清除指定设置项的缓存，下次获取时将重新从数据库读取。"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"/**\n * @param string $key 设置项键名\n * @return void\n */\npublic function clearCache($key): void\n\n// 示例\nsettings()->clearCache('site_name');\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"实际应用示例",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#实际应用示例",children:"#"}),"实际应用示例"]}),"\n",(0,s.jsxs)(n.h3,{id:"创建设置页面控制器",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#创建设置页面控制器",children:"#"}),"创建设置页面控制器"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"<?php\n\nnamespace App\\Admin\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Slowlyo\\OwlAdmin\\Controllers\\AdminController;\n\nclass SettingController extends AdminController\n{\n    public function index()\n    {\n        if ($this->actionOfGetData()) {\n            return $this->response()->success(settings()->all());\n        }\n\n        $page = $this->basePage()->body([\n            amis()->Alert()\n                ->showIcon()\n                ->body('系统设置页面，修改后立即生效'),\n            $this->form(),\n        ]);\n\n        return $this->response()->success($page);\n    }\n\n    public function form()\n    {\n        return $this->baseForm(false)\n            ->redirect('')\n            // 也可改为 ->api(admin_url('_settings', true)) 使用内置保存接口\n            ->api($this->getStorePath())\n            // 读取初始化数据，推荐使用内置接口 `GET /{prefix}/_settings`\n            ->initApi(admin_url('system/settings?_action=getData', true))\n            ->body(\n                amis()->Tabs()->tabs([\n                    amis()->Tab()->title('基本设置')->body([\n                        amis()->TextControl('site_name', '网站名称')\n                            ->required()\n                            ->placeholder('请输入网站名称'),\n                        amis()->TextareaControl('site_description', '网站描述')\n                            ->placeholder('请输入网站描述'),\n                        amis()->TextControl('admin_email', '管理员邮箱')\n                            ->format('email'),\n                    ]),\n                    amis()->Tab()->title('上传设置')->body([\n                        amis()->TextControl('upload_domain', '上传域名')\n                            ->placeholder('https://cdn.example.com'),\n                        amis()->TextControl('upload_path', '上传路径')\n                            ->placeholder('/uploads'),\n                        amis()->NumberControl('max_upload_size', '最大上传大小(MB)')\n                            ->min(1)\n                            ->max(100),\n                    ]),\n                    amis()->Tab()->title('邮件设置')->body([\n                        amis()->SelectControl('mail_driver', '邮件驱动')\n                            ->options([\n                                ['label' => 'SMTP', 'value' => 'smtp'],\n                                ['label' => 'Sendmail', 'value' => 'sendmail'],\n                            ]),\n                        amis()->TextControl('mail_host', 'SMTP主机')\n                            ->visibleOn('${mail_driver === \"smtp\"}'),\n                        amis()->NumberControl('mail_port', 'SMTP端口')\n                            ->visibleOn('${mail_driver === \"smtp\"}'),\n                    ]),\n                ])\n            );\n    }\n\n    public function store(Request $request)\n    {\n        $data = $request->only([\n            'site_name',\n            'site_description',\n            'admin_email',\n            'upload_domain',\n            'upload_path',\n            'max_upload_size',\n            'mail_driver',\n            'mail_host',\n            'mail_port',\n        ]);\n\n        return settings()->adminSetMany($data);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"在应用中使用设置",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#在应用中使用设置",children:"#"}),"在应用中使用设置"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-php",meta:"",children:"// 在视图中显示网站名称\n$siteName = settings()->get('site_name', 'Owl Admin');\n\n// 在邮件服务中使用邮件配置\n$mailConfig = settings()->get('mail_config', []);\nif ($mailConfig) {\n    config(['mail.mailers.smtp' => $mailConfig]);\n}\n\n// 在文件上传中使用上传设置\n$uploadDomain = settings()->get('upload_domain', '');\n$uploadPath = settings()->get('upload_path', '/uploads');\n$maxSize = settings()->get('max_upload_size', 10) * 1024 * 1024; // 转换为字节\n\n// 在中间件中使用设置\nclass CustomMiddleware\n{\n    public function handle($request, Closure $next)\n    {\n        $maintenanceMode = settings()->get('maintenance_mode', false);\n\n        if ($maintenanceMode && !auth()->user()?->isAdmin()) {\n            return response('系统维护中', 503);\n        }\n\n        return $next($request);\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.h2,{id:"数据结构",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#数据结构",children:"#"}),"数据结构"]}),"\n",(0,s.jsxs)(n.p,{children:["设置数据存储在 ",(0,s.jsx)(n.code,{children:"admin_settings"})," 表中："]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"字段名"}),(0,s.jsx)(n.th,{children:"类型"}),(0,s.jsx)(n.th,{children:"说明"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"key"}),(0,s.jsx)(n.td,{children:"string"}),(0,s.jsx)(n.td,{children:"设置项键名（主键）"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"values"}),(0,s.jsx)(n.td,{children:"json"}),(0,s.jsx)(n.td,{children:"设置项值（JSON格式存储）"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"created_at"}),(0,s.jsx)(n.td,{children:"timestamp"}),(0,s.jsx)(n.td,{children:"创建时间"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"updated_at"}),(0,s.jsx)(n.td,{children:"timestamp"}),(0,s.jsx)(n.td,{children:"更新时间"})]})]})]}),"\n",(0,s.jsxs)(n.h2,{id:"缓存机制",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#缓存机制",children:"#"}),"缓存机制"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["所有设置项都会自动缓存，缓存键格式为 ",(0,s.jsx)(n.code,{children:"app_setting_{key}"})]}),"\n",(0,s.jsxs)(n.li,{children:["使用 Laravel 的永久缓存（",(0,s.jsx)(n.code,{children:"Cache::rememberForever"}),"）"]}),"\n",(0,s.jsx)(n.li,{children:"设置项更新时自动清除对应缓存"}),"\n",(0,s.jsxs)(n.li,{children:["可通过 ",(0,s.jsx)(n.code,{children:"clearCache()"})," 方法手动清除指定缓存"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"注意事项",children:[(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#注意事项",children:"#"}),"注意事项"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"数据类型"}),"：设置值支持任意 PHP 数据类型，会自动进行 JSON 序列化/反序列化"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"缓存策略"}),"：默认使用缓存提升性能，如需获取最新值请使用 ",(0,s.jsx)(n.code,{children:"fresh"})," 参数"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"事务安全"}),"：批量操作使用数据库事务，确保数据一致性"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"模块隔离"}),"：使用 ",(0,s.jsx)(n.code,{children:"getByModule()"})," 可实现模块间设置隔离"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"性能考虑"}),"：避免频繁调用 ",(0,s.jsx)(n.code,{children:"all()"})," 方法，建议按需获取具体设置项"]}),"\n"]})]})}function r(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,Object.assign({},e,{children:(0,s.jsx)(i,e)})):i(e)}let l=r;r.__RSPRESS_PAGE_META={},r.__RSPRESS_PAGE_META["guide%2Fbuilt-in%2Fsetting.md"]={toc:[{id:"快速开始",text:"快速开始",depth:2},{id:"核心方法",text:"核心方法",depth:2},{id:"set---保存设置项",text:"set - 保存设置项",depth:3},{id:"setmany---批量保存设置",text:"setMany - 批量保存设置",depth:3},{id:"adminsetmany---后台批量保存",text:"adminSetMany - 后台批量保存",depth:3},{id:"get---获取设置项",text:"get - 获取设置项",depth:3},{id:"getbymodule---获取模块设置",text:"getByModule - 获取模块设置",depth:3},{id:"all---获取所有设置",text:"all - 获取所有设置",depth:3},{id:"arrayget---获取嵌套值",text:"arrayGet - 获取嵌套值",depth:3},{id:"del---删除设置项",text:"del - 删除设置项",depth:3},{id:"clearcache---清除缓存",text:"clearCache - 清除缓存",depth:3},{id:"实际应用示例",text:"实际应用示例",depth:2},{id:"创建设置页面控制器",text:"创建设置页面控制器",depth:3},{id:"在应用中使用设置",text:"在应用中使用设置",depth:3},{id:"数据结构",text:"数据结构",depth:2},{id:"缓存机制",text:"缓存机制",depth:2},{id:"注意事项",text:"注意事项",depth:2}],title:"系统设置",frontmatter:{}}}}]);